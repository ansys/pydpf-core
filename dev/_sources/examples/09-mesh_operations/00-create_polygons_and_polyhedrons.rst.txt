
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\09-mesh_operations\00-create_polygons_and_polyhedrons.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_09-mesh_operations_00-create_polygons_and_polyhedrons.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_09-mesh_operations_00-create_polygons_and_polyhedrons.py:


.. _create_polygons_and_polyhedrons:

Create and display a mesh with polygon and polyhedron elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to manually create a
:class:`MeshedRegion <ansys.dpf.meshed_region.MeshedRegion>`
object with two elements, a polygon and a polyhedron.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default


    # First import the required modules
    from ansys.dpf import core as dpf








.. GENERATED FROM PYTHON SOURCE LINES 18-21

Define the node coordinates
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Define the coordinates of the nodes of the polygon

.. GENERATED FROM PYTHON SOURCE LINES 21-45

.. code-block:: default

    polygon_points = [
        [0.02, 0.0, 0.0],
        [0.02, 0.01, 0.0],
        [0.03, 0.01, 0.0],
        [0.035, 0.005, 0.0],
        [0.03, 0.0, 0.0],
    ]

    # Define the coordinates of the nodes of the polyhedron
    polyhedron_points = [
        [0.02, 0.0, 0.02],
        [0.02, 0.01, 0.02],
        [0.03, 0.01, 0.02],
        [0.035, 0.005, 0.02],
        [0.03, 0.0, 0.02],
        [0.02, 0.0, 0.03],
        [0.02, 0.01, 0.03],
        [0.03, 0.01, 0.03],
        [0.035, 0.005, 0.03],
        [0.03, 0.0, 0.03],
    ]

    coordinates = polygon_points + polyhedron_points








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Create a bare mesh with pre-reserved memory

.. GENERATED FROM PYTHON SOURCE LINES 47-54

.. code-block:: default

    mesh = dpf.MeshedRegion(num_nodes=len(coordinates), num_elements=2)

    # Add the nodes to the MeshedRegion
    for i, node in enumerate(mesh.nodes.add_nodes(num=len(coordinates))):
        node.id = i + 1
        node.coordinates = coordinates[i]








.. GENERATED FROM PYTHON SOURCE LINES 55-56

Define the polygon's connectivity using node indices (not IDs)

.. GENERATED FROM PYTHON SOURCE LINES 56-63

.. code-block:: default

    connectivity = [0, 1, 2, 3, 4]

    polygon_faces_connectivity = [connectivity]

    # Add the polygon element to the MeshedRegion
    mesh.elements.add_shell_element(id=1, connectivity=connectivity)








.. GENERATED FROM PYTHON SOURCE LINES 64-65

Define the polyhedron's connectivity

.. GENERATED FROM PYTHON SOURCE LINES 65-83

.. code-block:: default


    # Define the faces connectivity
    polyhedron_faces_connectivity = [
        [5, 6, 7, 8, 9],
        [5, 6, 11, 10],
        [5, 9, 14, 10],
        [9, 14, 13, 8],
        [8, 13, 12, 7],
        [7, 12, 11, 6],
        [10, 11, 12, 13, 14],
    ]

    # Build the polyhedron's nodal connectivity from faces connectivity
    connectivity = [i for face in polyhedron_faces_connectivity for i in face]

    # Add the polyhedron element to the MeshedRegion
    mesh.elements.add_solid_element(id=2, connectivity=connectivity)








.. GENERATED FROM PYTHON SOURCE LINES 84-85

Set property fields required for Polyhedron elements

.. GENERATED FROM PYTHON SOURCE LINES 85-104

.. code-block:: default


    # Set the ``"faces_nodes_connectivity"``
    # :class:`PropertyField <ansys.dpf.core.property_field.PropertyField>`
    faces_connectivity = polygon_faces_connectivity + polyhedron_faces_connectivity
    connectivity_f = dpf.PropertyField()
    for face_index, face_connectivity in enumerate(faces_connectivity):
        connectivity_f.append(face_connectivity, face_index)
    mesh.set_property_field(property_name="faces_nodes_connectivity", value=connectivity_f)

    # Set the ``"elements_faces_connectivity"``
    # :class:`PropertyField <ansys.dpf.core.property_field.PropertyField>`
    polygon_faces = [[0]]
    polyhedron_faces = [[1, 2, 3, 4, 5, 6, 7]]
    element_faces = polygon_faces + polyhedron_faces
    elements_faces_f = dpf.PropertyField()
    for element_index, element_faces in enumerate(element_faces):
        elements_faces_f.append(element_faces, element_index)
    mesh.set_property_field(property_name="elements_faces_connectivity", value=elements_faces_f)








.. GENERATED FROM PYTHON SOURCE LINES 105-108

Visualize mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~
Plot the :class:`MeshedRegion <ansys.dpf.meshed_region.MeshedRegion>`

.. GENERATED FROM PYTHON SOURCE LINES 108-109

.. code-block:: default

    mesh.plot()



.. image-sg:: /examples/09-mesh_operations/images/sphx_glr_00-create_polygons_and_polyhedrons_001.png
   :alt: 00 create polygons and polyhedrons
   :srcset: /examples/09-mesh_operations/images/sphx_glr_00-create_polygons_and_polyhedrons_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.938 seconds)


.. _sphx_glr_download_examples_09-mesh_operations_00-create_polygons_and_polyhedrons.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 00-create_polygons_and_polyhedrons.py <00-create_polygons_and_polyhedrons.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 00-create_polygons_and_polyhedrons.ipynb <00-create_polygons_and_polyhedrons.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
