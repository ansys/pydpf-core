
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-modal-harmonic\00-multi_harmonic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-modal-harmonic_00-multi_harmonic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-modal-harmonic_00-multi_harmonic.py:


.. _ref_basic_harmonic:

Multi-Harmonic Response Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to compute a multi-harmonic response
using fft transforms.

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default

    import matplotlib.pyplot as pyplot

    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators as ops








.. GENERATED FROM PYTHON SOURCE LINES 17-24

Begin by downloading the example harmonic result.  This result is
not included in the core module by default to speed up the install.
Download should only take a few seconds.

Next, create the model and display the state of the result.  Note
that this harmonic result file contains several rpms,
each rpm has several frequencies.

.. GENERATED FROM PYTHON SOURCE LINES 24-30

.. code-block:: default


    # this file is 66Mb size, it may take time to download
    harmonic = examples.download_multi_harmonic_result()
    model = dpf.Model(harmonic)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\02-modal-harmonic\00-multi_harmonic.py", line 28, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 31-32

Read the analysis domain support

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default

    tf = model.metadata.time_freq_support
    print("Number of solution sets", tf.n_sets)


.. GENERATED FROM PYTHON SOURCE LINES 36-40

Compute multi harmonic response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example we compute the Rz multi harmonic responses based on
a selected nodes and a set of EOs (multiple engine orders).

.. GENERATED FROM PYTHON SOURCE LINES 40-75

.. code-block:: default


    # Create a total displacement operator and set its time scoping to
    # the entire time freq support and its nodes scoping into a user defined nodes.
    disp_op = ops.result.raw_displacement(data_sources=model)
    time_ids = list(range(1, model.metadata.time_freq_support.n_sets + 1))

    # define nodal scoping
    nodes = dpf.Scoping()
    nodes.ids = [2, 18]

    # connect the frequencies and the nodes scopings to the result
    # provider operator
    disp_op.inputs.mesh_scoping.connect(nodes)
    disp_op.inputs.time_scoping.connect(time_ids)

    # extract Rz component using the component selector operator
    comp = dpf.Operator("component_selector_fc")
    comp.inputs.connect(disp_op.outputs)
    comp.inputs.component_number.connect(5)

    # Compute the multi-harmonic response based on Rz and a set of RPMs
    rpms = dpf.Scoping()
    rpms.ids = [1, 2, 3]

    fft = ops.math.fft_multi_harmonic_minmax()

    fft.inputs.connect(comp.outputs)
    fft.inputs.rpm_scoping.connect(rpms)

    fields = fft.outputs.field_max()
    len(fields)  # one multi-harmonic field response per node

    field1 = fields[0]
    field2 = fields[1]


.. GENERATED FROM PYTHON SOURCE LINES 76-77

Plot the minimum and maximum displacements over time

.. GENERATED FROM PYTHON SOURCE LINES 77-84

.. code-block:: default


    pyplot.plot(field1.data, "r", label="Field 1")
    pyplot.plot(field2.data, "b", label="Field 2")
    pyplot.xlabel("Frequency (Hz)")
    pyplot.ylabel("Displacement (m)")
    pyplot.legend()
    pyplot.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_02-modal-harmonic_00-multi_harmonic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 00-multi_harmonic.py <00-multi_harmonic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 00-multi_harmonic.ipynb <00-multi_harmonic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
