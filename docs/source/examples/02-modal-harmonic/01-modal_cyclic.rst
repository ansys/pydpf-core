
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-modal-harmonic\01-modal_cyclic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-modal-harmonic_01-modal_cyclic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-modal-harmonic_01-modal_cyclic.py:


.. _ref_basic_cyclic:

Modal Cyclic symmetry Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to expand a cyclic mesh and its results.

.. GENERATED FROM PYTHON SOURCE LINES 9-13

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 14-15

Create the model and display the state of the result.

.. GENERATED FROM PYTHON SOURCE LINES 15-18

.. code-block:: default

    model = dpf.Model(examples.simple_cyclic)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\02-modal-harmonic\01-modal_cyclic.py", line 16, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 19-23

Expand displacement results
~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example we expand displacement results, by default on all
nodes and the first time step.

.. GENERATED FROM PYTHON SOURCE LINES 23-38

.. code-block:: default


    # Create displacement cyclic operator
    u_cyc = model.operator("mapdl::rst::U_cyclic")

    # expand the displacements
    fields = u_cyc.outputs.fields_container()

    # # get the expanded mesh
    mesh_provider = model.metadata.mesh_provider
    mesh_provider.inputs.read_cyclic(2)
    mesh = mesh_provider.outputs.mesh()

    # plot the expanded result on the expanded mesh
    mesh.plot(fields[0])


.. GENERATED FROM PYTHON SOURCE LINES 39-41

Expand stresses at a given time step
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 41-65

.. code-block:: default


    # define stress expansion operator and request stresses at time set = 8
    scyc_op = model.operator("mapdl::rst::S_cyclic")
    scyc_op.inputs.read_cyclic(2)
    scyc_op.inputs.time_scoping.connect([8])

    # request the results averaged on the nodes
    scyc_op.inputs.requested_location.connect("Nodal")

    # connect the base mesh and the expanded mesh, to avoid rexpanding the mesh
    scyc_op.inputs.sector_mesh.connect(model.metadata.meshed_region)
    # scyc_op.inputs.expanded_meshed_region.connect(mesh)

    # request equivalent von mises operator and connect it to stress operator
    eqv = dpf.Operator("eqv_fc")
    eqv.inputs.connect(scyc_op.outputs)

    # expand the results and get stress eqv
    fields = eqv.outputs.fields_container()

    # plot the expanded result on the expanded mesh
    # mesh.plot(fields[0])



.. GENERATED FROM PYTHON SOURCE LINES 66-68

Expand stresses at given sectors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 68-96

.. code-block:: default


    # define stress expansion operator and request stresses at time set = 8
    scyc_op = model.operator("mapdl::rst::S_cyclic")
    scyc_op.inputs.read_cyclic(2)
    scyc_op.inputs.time_scoping.connect([8])

    # request the results averaged on the nodes
    scyc_op.inputs.requested_location.connect("Nodal")

    # connect the base mesh and the expanded mesh, to avoid rexpanding the mesh
    scyc_op.inputs.sector_mesh.connect(model.metadata.meshed_region)
    # scyc_op.inputs.expanded_meshed_region.connect(mesh)

    # request results on sectors 1, 3 and 5
    scyc_op.inputs.sectors_to_expand.connect([1, 3, 5])

    # extract Sy (use component selector and select the component 1)
    comp_sel = dpf.Operator("component_selector_fc")
    comp_sel.inputs.fields_container.connect(scyc_op.outputs.fields_container)
    comp_sel.inputs.component_number.connect(0)

    # expand the displacements and get the resuls
    fields = comp_sel.outputs.fields_container()

    # plot the expanded result on the expanded mesh
    # mesh.plot(fields[0])



.. GENERATED FROM PYTHON SOURCE LINES 97-99

Expand stresses and average to elemental location
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 99-126

.. code-block:: default


    # define stress expansion operator and request stresses at time set = 8
    scyc_op = model.operator("mapdl::rst::S_cyclic")
    scyc_op.inputs.read_cyclic(2)
    scyc_op.inputs.time_scoping.connect([8])

    # request the results in the solver
    scyc_op.inputs.bool_rotate_to_global.connect(False)

    # connect the base mesh and the expanded mesh, to avoid rexpanding the mesh
    scyc_op.inputs.sector_mesh.connect(model.metadata.meshed_region)
    # scyc_op.inputs.expanded_meshed_region.connect(mesh)

    # request to elemental averaging operator
    to_elemental = dpf.Operator("to_elemental_fc")
    to_elemental.inputs.fields_container.connect(scyc_op.outputs.fields_container)

    # extract Sy (use component selector and select the component 1)
    comp_sel = dpf.Operator("component_selector_fc")
    comp_sel.inputs.fields_container.connect(to_elemental.outputs.fields_container)
    comp_sel.inputs.component_number.connect(1)

    # expand the displacements and get the resuls
    fields = comp_sel.outputs.fields_container()

    # # plot the expanded result on the expanded mesh
    mesh.plot(fields)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.006 seconds)


.. _sphx_glr_download_examples_02-modal-harmonic_01-modal_cyclic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 01-modal_cyclic.py <01-modal_cyclic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 01-modal_cyclic.ipynb <01-modal_cyclic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
