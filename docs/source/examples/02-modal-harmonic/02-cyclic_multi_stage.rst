
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-modal-harmonic\02-cyclic_multi_stage.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-modal-harmonic_02-cyclic_multi_stage.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-modal-harmonic_02-cyclic_multi_stage.py:


.. _ref_multi_stage_cyclic:

Multi-stage Cyclic Symmetry Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to expand the mesh and results from a
multi-stage cyclic analysis.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

.. code-block:: default

    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 14-15

Create the model and display the state of the result.

.. GENERATED FROM PYTHON SOURCE LINES 15-19

.. code-block:: default

    cyc = examples.download_multi_stage_cyclic_result()
    model = dpf.Model(cyc)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\02-modal-harmonic\02-cyclic_multi_stage.py", line 17, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 20-24

Expand displacement results
~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example we expand displacement results, by default on all
nodes and the first time step.

.. GENERATED FROM PYTHON SOURCE LINES 24-42

.. code-block:: default


    # Create displacement cyclic operator
    UCyc = model.results.displacement()
    UCyc.inputs.read_cyclic(2)

    # expand the displacements and get a total deformation
    nrm = dpf.Operator("norm_fc")
    nrm.inputs.connect(UCyc.outputs)
    fields = nrm.outputs.fields_container()

    # # get the expanded mesh
    mesh_provider = model.metadata.mesh_provider
    mesh_provider.inputs.read_cyclic(2)
    mesh = mesh_provider.outputs.mesh()

    # # plot the expanded result on the expanded mesh
    mesh.plot(fields)


.. GENERATED FROM PYTHON SOURCE LINES 43-45

Expand stresses at a given time step
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 45-64

.. code-block:: default


    # define stress expansion operator and request stresses at time set = 3
    SCyc = model.results.stress()
    SCyc.inputs.read_cyclic(2)
    SCyc.inputs.time_scoping.connect([3])

    # request the results averaged on the nodes
    SCyc.inputs.requested_location.connect("Nodal")

    # request equivalent von mises operator and connect it to stress
    # operator
    eqv = dpf.Operator("eqv_fc")
    eqv.inputs.connect(SCyc.outputs)

    # expand the results and get stress eqv
    fields = eqv.outputs.fields_container()

    # plot the expanded result on the expanded mesh
    mesh.plot(fields)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.016 seconds)


.. _sphx_glr_download_examples_02-modal-harmonic_02-cyclic_multi_stage.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 02-cyclic_multi_stage.py <02-cyclic_multi_stage.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 02-cyclic_multi_stage.ipynb <02-cyclic_multi_stage.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
