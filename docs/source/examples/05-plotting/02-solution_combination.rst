
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\05-plotting\02-solution_combination.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_05-plotting_02-solution_combination.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_05-plotting_02-solution_combination.py:


.. _solution_combination:

Load Case Combination for Principal Stress
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to get a principal stress loadcase combination using DPF
And highlight min/max values in the plot.

.. GENERATED FROM PYTHON SOURCE LINES 12-14

First, import the DPF-Core module as ``dpf_core`` and import the
included examples file and ``DpfPlotter``

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default

    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core.plotter import DpfPlotter








.. GENERATED FROM PYTHON SOURCE LINES 19-32

Next, open an example and print out the ``model`` object.  The
:class:`Model <ansys.dpf.core.model.Model> class helps to organize access
methods for the result by keeping track of the operators and data sources
used by the result
file.

Printing the model displays:

- Analysis type
- Available results
- Size of the mesh
- Number of results


.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default

    model = dpf.Model(examples.msup_transient)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\05-plotting\02-solution_combination.py", line 33, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 36-40

Get the stress tensor and connect time scoping.
Make sure to define ``"Nodal"`` as the requested location,
as the labels are supported only for Nodal results.


.. GENERATED FROM PYTHON SOURCE LINES 40-46

.. code-block:: default

    stress_tensor = model.results.stress()
    time_scope = dpf.Scoping()
    time_scope.ids = [1, 2]
    stress_tensor.inputs.time_scoping.connect(time_scope)
    stress_tensor.inputs.requested_location.connect("Nodal")


.. GENERATED FROM PYTHON SOURCE LINES 47-55

This code performs solution combination on two load cases.
=>LC1 - LC2
You can access individual loadcases as the fields of a fields_container for `stress_tensor`

LC1: stress_tensor.outputs.fields_container.get_data()[0]
LC2: stress_tensor.outputs.fields_container.get_data()[1]

Scale LC2 to -1

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    field_lc2 = stress_tensor.outputs.fields_container.get_data()[1]
    stress_tensor_lc2_sc = dpf.operators.math.scale(field=field_lc2, ponderation=-1.0)


.. GENERATED FROM PYTHON SOURCE LINES 59-61

Add load cases


.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: default

    field_lc1 = stress_tensor.outputs.fields_container.get_data()[0]
    stress_tensor_combi = dpf.operators.math.add(
        fieldA=field_lc1, fieldB=stress_tensor_lc2_sc
    )


.. GENERATED FROM PYTHON SOURCE LINES 67-70

Principal Stresses are the Eigenvalues of the stress tensor.
Use ``principal_invariants`` to get S1, S2 and S3


.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    p_inv = dpf.operators.invariant.principal_invariants()
    p_inv.inputs.field.connect(stress_tensor_combi)


.. GENERATED FROM PYTHON SOURCE LINES 74-76

Print S1 - Maximum Principal stress


.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: default

    print(p_inv.outputs.field_eig_1().data)


.. GENERATED FROM PYTHON SOURCE LINES 79-81

Get the meshed region


.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: default

    mesh_set = model.metadata.meshed_region


.. GENERATED FROM PYTHON SOURCE LINES 84-87

Plot the results on the mesh.
``label_text_size`` and ``label_point_size`` control font size of the label.


.. GENERATED FROM PYTHON SOURCE LINES 87-94

.. code-block:: default

    plot = DpfPlotter()
    plot.add_field(p_inv.outputs.field_eig_1(), meshed_region=mesh_set)

    # You can set the camera positions using the `cpos` argument
    # The three tuples in the list `cpos` represent camera position-
    # focal point, and view up respectively.
    plot.show_figure(show_axes=True)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.016 seconds)


.. _sphx_glr_download_examples_05-plotting_02-solution_combination.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 02-solution_combination.py <02-solution_combination.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 02-solution_combination.ipynb <02-solution_combination.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
