
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\03-advanced\00-multistage_advanced_options.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-advanced_00-multistage_advanced_options.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-advanced_00-multistage_advanced_options.py:


.. _ref_multi_stage_cyclic_advanced:

Multi-stage Cyclic Symmetry Use Advanced Customization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to expand on selected sectors the mesh and results from a
multi-stage cyclic analysis.
It also shows how to use the cyclic support for advanced post processing

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: default

    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators as ops








.. GENERATED FROM PYTHON SOURCE LINES 15-16

Create the model and display the state of the result.

.. GENERATED FROM PYTHON SOURCE LINES 16-20

.. code-block:: default

    cyc = examples.download_multi_stage_cyclic_result()
    model = dpf.Model(cyc)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\03-advanced\00-multistage_advanced_options.py", line 18, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 21-22

Check the result info to verify that it's a multistage model

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: default

    result_info = model.metadata.result_info
    print(result_info.has_cyclic)
    print(result_info.cyclic_symmetry_type)


.. GENERATED FROM PYTHON SOURCE LINES 27-28

Go over the cyclic support

.. GENERATED FROM PYTHON SOURCE LINES 28-37

.. code-block:: default

    cyc_support = result_info.cyclic_support
    print("num stages:", cyc_support.num_stages)
    print("num_sectors stage 0:", cyc_support.num_sectors(0))
    print("num_sectors stage 1:", cyc_support.num_sectors(1))
    print(
        "num nodes in the first stage's base sector: ",
        len(cyc_support.base_nodes_scoping(0)),
    )


.. GENERATED FROM PYTHON SOURCE LINES 38-41

Expand displacement results
~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example we expand displacement results, on chosen sectors

.. GENERATED FROM PYTHON SOURCE LINES 41-65

.. code-block:: default



    # Create displacement cyclic operator
    UCyc = dpf.operators.result.cyclic_expanded_displacement()
    UCyc.inputs.data_sources(model.metadata.data_sources)
    # Select the sectors to expand on the first stage
    UCyc.inputs.sectors_to_expand([0, 1, 2])
    # Or select the sectors to expand stage by stage
    sectors_scopings = dpf.ScopingsContainer()
    sectors_scopings.labels = ["stage"]
    sectors_scopings.add_scoping({"stage": 0}, dpf.Scoping(ids=[0, 1, 2]))
    sectors_scopings.add_scoping({"stage": 1}, dpf.Scoping(ids=[0, 1, 2, 3, 4, 5, 6]))
    UCyc.inputs.sectors_to_expand(sectors_scopings)

    # expand the displacements and get a total deformation
    nrm = dpf.Operator("norm_fc")
    nrm.inputs.connect(UCyc.outputs)
    fields = nrm.outputs.fields_container()

    # # get the expanded mesh
    mesh_provider = model.metadata.mesh_provider
    mesh_provider.inputs.read_cyclic(2)
    mesh = mesh_provider.outputs.mesh()


.. GENERATED FROM PYTHON SOURCE LINES 66-68

plot the expanded result on the expanded mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    mesh.plot(fields)


.. GENERATED FROM PYTHON SOURCE LINES 71-73

Choose to expand only some sectors for the mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 73-83

.. code-block:: default

    cyc_support_provider = ops.metadata.cyclic_support_provider(
        data_sources=model.metadata.data_sources
    )
    cyc_support_provider.inputs.sectors_to_expand(sectors_scopings)
    mesh_exp = ops.metadata.cyclic_mesh_expansion(cyclic_support=cyc_support_provider)
    selected_sectors_mesh = mesh_exp.outputs.meshed_region()

    # # plot the expanded result on the expanded mesh
    selected_sectors_mesh.plot(fields)


.. GENERATED FROM PYTHON SOURCE LINES 84-86

Check results precisely
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 86-103

.. code-block:: default


    # print the time_freq_support to see the harmonic index
    print(model.metadata.time_freq_support)
    print(model.metadata.time_freq_support.get_harmonic_indices(stage_num=1).data)

    # harmonic index 0 means that the results are symmetric sectors by sector
    # taking a node in the base sector of the first stage
    node_id = cyc_support.base_nodes_scoping(0)[18]
    print(node_id)

    # check what are the expanded ids of this node
    expanded_ids = cyc_support.expand_node_id(node_id, [0, 1, 2], 0)
    print(expanded_ids.ids)

    # verify that the displacement values are the same on all those nodes
    for node in expanded_ids.ids:
        print(fields[0].get_entity_data_by_id(node))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_03-advanced_00-multistage_advanced_options.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 00-multistage_advanced_options.py <00-multistage_advanced_options.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 00-multistage_advanced_options.ipynb <00-multistage_advanced_options.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
