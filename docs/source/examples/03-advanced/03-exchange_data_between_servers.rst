
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\03-advanced\03-exchange_data_between_servers.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-advanced_03-exchange_data_between_servers.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-advanced_03-exchange_data_between_servers.py:


.. _ref_exchange_data_between_servers.:

Exchange Data Between Servers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example, 2 dpf's servers will be started and a workflow will be
created with a part on both servers. This example opens the possibility for a
user to read data from a given machine and transform this data on another
without any more difficulties than working on a local computer

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators as ops








.. GENERATED FROM PYTHON SOURCE LINES 17-22

Create 2 servers
~~~~~~~~~~~~~~~~~
Here the 2 servers are started on the local machine with start_local_server
but, if the user has another server, he can connect on any dpf's server on
the network via: connect_to_server

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # the as_global attributes allows to choose whether a server will be stored
    # by the module and used by default
    # Here, we choose the 1st server to be the default
    server1 = dpf.start_local_server(as_global=True)
    server2 = dpf.start_local_server(as_global=False)

    # Check that the 2 servers are on different ports
    print(server1.port, server2.port)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\03-advanced\03-exchange_data_between_servers.py", line 26, in <module>
        server1 = dpf.start_local_server(as_global=True)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\server.py", line 233, in start_local_server
        server = DpfServer(
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\server.py", line 379, in __init__
        check_ansys_grpc_dpf_version(self, timeout=timeout)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\server.py", line 691, in check_ansys_grpc_dpf_version
        raise ImportWarning(f"An incompatibility has been detected between the DPF server version "
    ImportWarning: An incompatibility has been detected between the DPF server version (3.0 from Ansys 2022R1) and the ansys-grpc-dpf version installed (0.3.0). Please consider using the latest DPF server available in the 2022R1 Ansys unified install.
    To follow the compatibility guidelines given in https://dpfdocs.pyansys.com/getting_started/index.html#client-server-compatibility while still using DPF server 3.0, please install version 0.4.0 of ansys-grpc-dpf with the command: 
         pip install ansys-grpc-dpf==0.4.0




.. GENERATED FROM PYTHON SOURCE LINES 33-37

Send the result file
~~~~~~~~~~~~~~~~~~~~~
Here, the result file is sent in a temporary dir of the first server
This file upload is useless in our case, since the 2 servers are locals

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    file = examples.complex_rst
    file_path_in_tmp = dpf.upload_file_in_tmp_folder(file)


.. GENERATED FROM PYTHON SOURCE LINES 41-44

Create a workflow on the first server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create the model

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: default

    model = dpf.Model(file_path_in_tmp)

    # Read displacement
    disp = model.results.displacement()
    disp.inputs.time_scoping(len(model.metadata.time_freq_support.time_frequencies))


.. GENERATED FROM PYTHON SOURCE LINES 51-53

Create a workflow on the second server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 53-66

.. code-block:: default


    # Change the cartesian coordinates to cylindrical coordinates cs
    coordinates = ops.geo.rotate_in_cylindrical_cs_fc(server=server2)

    # Create the cartesian coordinate cs
    cs = dpf.fields_factory.create_scalar_field(12, server=server2)
    cs.data = [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]

    coordinates.inputs.coordinate_system(cs)

    # choose the radial component to plot
    comp = dpf.operators.logic.component_selector_fc(coordinates, 0, server=server2)


.. GENERATED FROM PYTHON SOURCE LINES 67-69

Pass data from one server to another
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 69-79

.. code-block:: default

    fc_disp = disp.outputs.fields_container()
    fc_copy = fc_disp.deep_copy(server=server2)

    mesh_copy = model.metadata.meshed_region.deep_copy(server=server2)
    # give a mesh to the field
    fc_copy[0].meshed_region = mesh_copy
    fc_copy[1].meshed_region = mesh_copy

    coordinates.inputs.field(fc_copy)


.. GENERATED FROM PYTHON SOURCE LINES 80-82

Plot the output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default

    out = comp.outputs.fields_container()

    # real part
    mesh_copy.plot(out.get_field({"complex": 0}))

    # imaginary part
    mesh_copy.plot(out.get_field({"complex": 1}))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.316 seconds)


.. _sphx_glr_download_examples_03-advanced_03-exchange_data_between_servers.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 03-exchange_data_between_servers.py <03-exchange_data_between_servers.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 03-exchange_data_between_servers.ipynb <03-exchange_data_between_servers.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
