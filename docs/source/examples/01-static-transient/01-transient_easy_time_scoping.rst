
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\01-static-transient\01-transient_easy_time_scoping.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-static-transient_01-transient_easy_time_scoping.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-static-transient_01-transient_easy_time_scoping.py:


.. _ref_transient_easy_time_scoping:

Choose a Time Scoping for a Transient Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to use a model's results to easily
choose a time scoping.

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default

    import matplotlib.pyplot as plt

    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators as ops








.. GENERATED FROM PYTHON SOURCE LINES 17-19

Create the model and display the state of the result. This transient result
file contains several individual results, each at a different times.

.. GENERATED FROM PYTHON SOURCE LINES 19-24

.. code-block:: default


    transient = examples.msup_transient
    model = dpf.Model(transient)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\01-static-transient\01-transient_easy_time_scoping.py", line 22, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 25-29

Obtain Minimum and Maximum Displacements at All Times
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a displacement operator and set its time scoping request to
the entire time frequency support:

.. GENERATED FROM PYTHON SOURCE LINES 29-39

.. code-block:: default

    disp = model.results.displacement
    disp_op = disp.on_all_time_freqs()

    # Chain the displacement operator with norm and min_max operators.
    min_max_op = ops.min_max.min_max_fc(ops.math.norm_fc(disp_op))

    min_disp = min_max_op.outputs.field_min()
    max_disp = min_max_op.outputs.field_max()
    print(max_disp.data)


.. GENERATED FROM PYTHON SOURCE LINES 40-41

Plot the minimum and maximum displacements over time:

.. GENERATED FROM PYTHON SOURCE LINES 41-50

.. code-block:: default


    tdata = model.metadata.time_freq_support.time_frequencies.data
    plt.plot(tdata, max_disp.data, "r", label="Max")
    plt.plot(tdata, min_disp.data, "b", label="Min")
    plt.xlabel("Time (s)")
    plt.ylabel("Displacement (m)")
    plt.legend()
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 51-56

Use Time Extrapolation
~~~~~~~~~~~~~~~~~~~~~~~
A local maximum can be seen on the plot between 0.05 and 0.075 seconds.
Displacement will be evaluated every 0.0005s in this range
to draw a nicer plot on this range.

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default


    offset = 0.0005
    time_scoping = [0.05 + offset * i for i in range(0, int((0.08 - 0.05) / offset))]
    print(time_scoping)


.. GENERATED FROM PYTHON SOURCE LINES 62-63

Create a displacement operator and set its time scoping request:

.. GENERATED FROM PYTHON SOURCE LINES 63-73

.. code-block:: default

    disp = model.results.displacement
    disp_op = disp.on_time_scoping(time_scoping)()

    # Chain the displacement operator with norm and min_max operators.
    min_max_op = ops.min_max.min_max_fc(ops.math.norm_fc(disp_op))

    min_disp = min_max_op.outputs.field_min()
    max_disp = min_max_op.outputs.field_max()
    print(max_disp.data)


.. GENERATED FROM PYTHON SOURCE LINES 74-75

Plot the minimum and maximum displacements over time:

.. GENERATED FROM PYTHON SOURCE LINES 75-81

.. code-block:: default


    plt.plot(time_scoping, max_disp.data, "rx", label="Max")
    plt.xlabel("Time (s)")
    plt.ylabel("Displacement (m)")
    plt.legend()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_01-static-transient_01-transient_easy_time_scoping.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 01-transient_easy_time_scoping.py <01-transient_easy_time_scoping.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 01-transient_easy_time_scoping.ipynb <01-transient_easy_time_scoping.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
