
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-basic\08-results_over_time_subset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_08-results_over_time_subset.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_08-results_over_time_subset.py:


.. _ref_results_over_time:

Scope results over custom time domains
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The ``Result`` class, which are instances created by the ``Model``, give
access to helpers for requesting results on specific mesh and time scopings.
With these helpers, working on a temporal subset of the
model is straightforward. In this example, different ways to choose the temporal subset to
evaluate a result are exposed. This example can be extended to frequency subsets.

Import necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Create a model object to establish a connection with an example result file:

.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: default

    model = dpf.Model(examples.download_transient_result())
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\00-basic\08-results_over_time_subset.py", line 21, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 24-28

Request specific time sets
~~~~~~~~~~~~~~~~~~~~~~~~~~
If specific time sets are of interest, looking into the ``TimeFreqSupport``
and connect a given ``time_scoping`` accordingly to the cumulative indexes can be useful.

.. GENERATED FROM PYTHON SOURCE LINES 28-42

.. code-block:: default


    print(model.metadata.time_freq_support)

    time_sets = [1, 3, 10]
    disp = model.results.displacement.on_time_scoping(time_sets).eval()

    print(disp)

    # Or using a scoping
    time_sets_scoping = dpf.time_freq_scoping_factory.scoping_by_sets([1, 3, 10])
    disp = model.results.displacement.on_time_scoping(time_sets_scoping).eval()

    print(disp)


.. GENERATED FROM PYTHON SOURCE LINES 43-44

Equivalent to:

.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: default

    disp_op = model.results.displacement()
    disp_op.inputs.time_scoping(time_sets)
    disp = disp_op.outputs.fields_container()


.. GENERATED FROM PYTHON SOURCE LINES 49-50

Equivalent to:

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    disp = model.results.displacement(time_scoping=time_sets_scoping).eval()


.. GENERATED FROM PYTHON SOURCE LINES 53-57

Request specific time steps
~~~~~~~~~~~~~~~~~~~~~~~~~~~
If specific time steps or load steps are of interest, looking into the
``TimeFreqSupport`` and connect a given ``time_scoping`` located on steps can be done.

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: default

    time_steps_scoping = dpf.time_freq_scoping_factory.scoping_by_load_step([1])
    disp = model.results.displacement.on_time_scoping(time_steps_scoping).eval()

    print(disp)


.. GENERATED FROM PYTHON SOURCE LINES 63-64

Equivalent to:

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: default

    disp_op = model.results.displacement()
    disp_op.inputs.time_scoping(time_steps_scoping)
    disp = disp_op.outputs.fields_container()


.. GENERATED FROM PYTHON SOURCE LINES 69-72

Using helpers
~~~~~~~~~~~~~
Evaluate at all times.

.. GENERATED FROM PYTHON SOURCE LINES 72-75

.. code-block:: default


    disp = model.results.displacement.on_all_time_freqs().eval()


.. GENERATED FROM PYTHON SOURCE LINES 76-77

Evaluate at first and last times

.. GENERATED FROM PYTHON SOURCE LINES 77-81

.. code-block:: default

    disp = model.results.displacement.on_first_time_freq().eval()
    print(disp)
    disp = model.results.displacement.on_last_time_freq().eval()
    print(disp)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.016 seconds)


.. _sphx_glr_download_examples_00-basic_08-results_over_time_subset.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 08-results_over_time_subset.py <08-results_over_time_subset.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 08-results_over_time_subset.ipynb <08-results_over_time_subset.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
