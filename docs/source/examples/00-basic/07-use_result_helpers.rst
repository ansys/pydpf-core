
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-basic\07-use_result_helpers.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_07-use_result_helpers.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_07-use_result_helpers.py:


.. _ref_use_result_helpers:

Use Result Helpers to Load Custom Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The ``Result`` class, which is an instance created by the ``Model``, gives
access to helpers for requesting results on specific mesh and time scopings.
With these helpers, working on a custom spatial and temporal subset of the
model is straightforward.

Import necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Create a model object to establish a connection with an example result file:

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default

    model = dpf.Model(examples.download_multi_stage_cyclic_result())
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\00-basic\07-use_result_helpers.py", line 20, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 23-26

Visualize Specific Mode Shapes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Choose the modes to visualize:

.. GENERATED FROM PYTHON SOURCE LINES 26-30

.. code-block:: default

    modes = [1, 5, 6]

    disp = model.results.displacement.on_time_scoping(modes)


.. GENERATED FROM PYTHON SOURCE LINES 31-34

Choose a Spatial Subset
~~~~~~~~~~~~~~~~~~~~~~~
Work on only a named selection (or component).

.. GENERATED FROM PYTHON SOURCE LINES 36-37

Print the available named selection:

.. GENERATED FROM PYTHON SOURCE LINES 37-39

.. code-block:: default

    print(model.metadata.available_named_selections)


.. GENERATED FROM PYTHON SOURCE LINES 40-41

Specify to the result that you want to work on a specific named selection:

.. GENERATED FROM PYTHON SOURCE LINES 41-50

.. code-block:: default

    disp.on_named_selection("_STAG1_BASE_NOD")
    op = disp()
    op.inputs.read_cyclic(2)  # expand cyclic
    results = op.outputs.fields_container()

    # plot
    for mode in modes:
        results[0].meshed_region.plot(results.get_fields_by_time_complex_ids(mode, 0)[0])


.. GENERATED FROM PYTHON SOURCE LINES 51-52

Specify to the result that you want to work on specific nodes:

.. GENERATED FROM PYTHON SOURCE LINES 52-61

.. code-block:: default

    disp = model.results.displacement.on_time_scoping(modes)
    disp.on_mesh_scoping(list(range(1, 200)))
    op = disp()
    op.inputs.read_cyclic(2)  # expand cyclic
    results = op.outputs.fields_container()

    # plot
    for mode in modes:
        results[0].meshed_region.plot(results.get_fields_by_time_complex_ids(mode, 0)[0])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_00-basic_07-use_result_helpers.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 07-use_result_helpers.py <07-use_result_helpers.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 07-use_result_helpers.ipynb <07-use_result_helpers.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
