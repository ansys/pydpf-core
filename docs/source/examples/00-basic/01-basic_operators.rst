
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-basic\01-basic_operators.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_01-basic_operators.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_01-basic_operators.py:


.. _ref_basic_operators_example:

Operators Overview
~~~~~~~~~~~~~~~~~~

In DPF, operators provide the primary method for interacting with and extracting
results.  Within DPF-Core, operators are directly exposed with
the ``Operators`` class as well as wrapped within several other
convenience classes.

For a list of all operators, see :ref:`ref_dpf_operators_reference`.

This example demonstrates how to work directly with operators and
compares this method to a wrapped approach.

Import the necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 24-26

Create a model object to establish a connection with an
example result file:

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: default

    model = dpf.Model(examples.static_rst)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\00-basic\01-basic_operators.py", line 27, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 30-37

Next, create a raw displacement operator ``"U"``.  Each operator
contains ``input`` and ``output`` pins that can be connected to
various sources to include other operators.  This allows operators
to be "chained" to allow for highly efficient operations.

To print out the available inputs and outputs of the
displacement operator:

.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: default

    disp_op = dpf.Operator("U")
    print(disp_op.inputs)
    print(disp_op.outputs)


.. GENERATED FROM PYTHON SOURCE LINES 42-47

Compute the Maximum Normalized Displacement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example demonstrate how to chain various operators. It connects the input
of the operator to the data sources contained within the ``model`` object and
then the maximum of the norm of the operator.

.. GENERATED FROM PYTHON SOURCE LINES 47-66

.. code-block:: default


    # Connect to the data sources of the model.
    disp_op.inputs.data_sources.connect(model.metadata.data_sources)

    # Create a field container norm operator and connect it to the
    # displacement operator to chain the operators.
    norm_op = dpf.Operator("norm_fc")
    norm_op.inputs.connect(disp_op.outputs)

    # Create a field container min/max operator and connect it to the
    # output of the norm operator.
    mm_op = dpf.Operator("min_max_fc")
    mm_op.inputs.connect(norm_op.outputs)

    # Finally, get the value of the maximum displacement.
    field_max = mm_op.outputs.field_max()
    print(field_max)
    print(field_max.data)


.. GENERATED FROM PYTHON SOURCE LINES 67-73

Wrapped Operators
~~~~~~~~~~~~~~~~~
The ``model.results`` property contains all the wrapped operators
available for a given result.  This is provided out of convenience
because all operators may not be available for a given result. Consequently,
it is much easier to reference available operators by first running:

.. GENERATED FROM PYTHON SOURCE LINES 73-75

.. code-block:: default

    print(model.results)


.. GENERATED FROM PYTHON SOURCE LINES 76-77

Create the displacement operator directly from the ``results`` property:

.. GENERATED FROM PYTHON SOURCE LINES 77-90

.. code-block:: default

    disp_op = model.results.displacement()

    # Out of convenience, the ``operators`` module contains available operators.
    # These operators can be chained to create a workflow in one line.
    from ansys.dpf.core import operators

    mm_op = operators.min_max.min_max_fc(operators.math.norm_fc(disp_op))

    # Finally, get the value of the maximum displacement.
    field_max = mm_op.outputs.field_max()
    print(field_max)
    print(field_max.data)


.. GENERATED FROM PYTHON SOURCE LINES 91-92

Plot the displacement:

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: default

    print(model.metadata.meshed_region.plot(disp_op.outputs.fields_container()))


.. GENERATED FROM PYTHON SOURCE LINES 95-101

Scripting Operator Syntax
~~~~~~~~~~~~~~~~~~~~~~~~~~
Because DPF provides a scripting syntax, knowing
an operator's "string name" is not mandatory.
While this example is similar to the above script, it uses the DPF
scripting syntax.

.. GENERATED FROM PYTHON SOURCE LINES 103-105

Instead of using a ``model`` class instance, use a
``DdataSources`` object directly. The ``DataSources`` constructor input is a path.

.. GENERATED FROM PYTHON SOURCE LINES 105-108

.. code-block:: default

    ds = dpf.DataSources(examples.static_rst)
    print(examples.static_rst)


.. GENERATED FROM PYTHON SOURCE LINES 109-110

Instantiate the operators and connect them:

.. GENERATED FROM PYTHON SOURCE LINES 110-118

.. code-block:: default


    disp_op = dpf.operators.result.displacement()
    disp_op.inputs.data_sources.connect(ds)
    norm_op = dpf.operators.math.norm_fc()
    norm_op.inputs.connect(disp_op.outputs)
    mm_op = dpf.operators.min_max.min_max_fc()
    mm_op.inputs.connect(norm_op.outputs)


.. GENERATED FROM PYTHON SOURCE LINES 119-120

Get the output and print the result data:

.. GENERATED FROM PYTHON SOURCE LINES 120-123

.. code-block:: default


    field_max = mm_op.outputs.field_max()
    print(field_max.data)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_00-basic_01-basic_operators.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 01-basic_operators.py <01-basic_operators.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 01-basic_operators.ipynb <01-basic_operators.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
