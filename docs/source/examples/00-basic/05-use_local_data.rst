
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-basic\05-use_local_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_05-use_local_data.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_05-use_local_data.py:


.. _ref_use_local_data_example:

Bring a Field's Data Locally to Improve Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Reducing the number of calls to the server is key to improving
performance. Using the ``as_local_field`` option brings the data
from the server to your local machine where you can work on it.
When finished, you send the updated data back to the server
in one transaction.

Import necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 14-19

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators as ops








.. GENERATED FROM PYTHON SOURCE LINES 20-22

Create a model object to establish a connection with an
example result file and then extract:

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    model = dpf.Model(examples.download_multi_stage_cyclic_result())
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\00-basic\05-use_local_data.py", line 23, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 26-30

Create the Workflow
~~~~~~~~~~~~~~~~~~~~
Maximum principal stress usually occurs on the skin of the
model. Computing results only on this skin reduces the data size.

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: default


    # Create a simple workflow computing the principal stress on the skin
    # of the model.

    skin_op = ops.mesh.external_layer(model.metadata.meshed_region)
    skin_mesh = skin_op.outputs.mesh()


.. GENERATED FROM PYTHON SOURCE LINES 38-39

Plot the mesh skin:

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    skin_mesh.plot()


.. GENERATED FROM PYTHON SOURCE LINES 42-43

Compute the stress principal inveriants on the skin nodes only:

.. GENERATED FROM PYTHON SOURCE LINES 43-52

.. code-block:: default

    stress_op = ops.result.stress(data_sources=model.metadata.data_sources)
    stress_op.inputs.requested_location.connect(dpf.locations.nodal)
    stress_op.inputs.mesh_scoping.connect(skin_op.outputs.nodes_mesh_scoping)

    principal_op = ops.invariant.principal_invariants_fc(stress_op)
    principal_stress_1 = principal_op.outputs.fields_eig_1()[0]
    principal_stress_2 = principal_op.outputs.fields_eig_2()[0]
    principal_stress_3 = principal_op.outputs.fields_eig_3()[0]


.. GENERATED FROM PYTHON SOURCE LINES 53-55

Manipulate Data Locally
~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 58-61

This example goes over the fields, keeping the largest invariant value
by node if the averaged value of invariants is large enough.
Exploring data allows you to customize it to meet your needs.

.. GENERATED FROM PYTHON SOURCE LINES 61-81

.. code-block:: default


    node_scoping_ids = principal_stress_1.scoping.ids
    threshold = 300000.0

    field_to_keep = dpf.fields_factory.create_scalar_field(
        len(node_scoping_ids), location=dpf.locations.nodal
    )

    with field_to_keep.as_local_field() as f:
        with principal_stress_1.as_local_field() as s1:
            with principal_stress_2.as_local_field() as s2:
                with principal_stress_3.as_local_field() as s3:
                    for i, id in enumerate(node_scoping_ids):
                        d1 = abs(s1.get_entity_data_by_id(id))
                        d2 = abs(s2.get_entity_data_by_id(id))
                        d3 = abs(s3.get_entity_data_by_id(id))
                        if (d1 + d2 + d3) / 3.0 > threshold:
                            d = max(d1, d2, d3)
                            f.append(d, id)


.. GENERATED FROM PYTHON SOURCE LINES 82-84

Plot Result Field
~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 87-88

Plot the result field on the skin mesh:

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    skin_mesh.plot(field_to_keep)


.. GENERATED FROM PYTHON SOURCE LINES 91-93

Plot Initial Invariants
~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 96-97

Plot the initial invariants on the skin mesh:

.. GENERATED FROM PYTHON SOURCE LINES 97-101

.. code-block:: default


    skin_mesh.plot(principal_stress_1)
    skin_mesh.plot(principal_stress_2)
    skin_mesh.plot(principal_stress_3)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_00-basic_05-use_local_data.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 05-use_local_data.py <05-use_local_data.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 05-use_local_data.ipynb <05-use_local_data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
