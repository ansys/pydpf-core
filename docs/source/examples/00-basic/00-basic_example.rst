
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-basic\00-basic_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_00-basic_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_00-basic_example.py:


.. _ref_basic_example:

Basic DPF-Core Usage
~~~~~~~~~~~~~~~~~~~~
This example shows how to open a result file and do some
basic postprocessing.

If you have Ansys 2021 R1 installed, starting DPF is quite easy
as DPF-Core takes care of launching all the services that
are required for postprocessing Ansys files.

First, import the DPF-Core module as ``dpf_core`` and import the
included examples file.

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 23-39

Next, open an example and print out the ``model`` object.  The
``Model`` class helps to organize access methods for the result by
keeping track of the operators and data sources used by the result
file.

Printing the model displays:

- Analysis type
- Available results
- Size of the mesh
- Number of results

Also, note that the first time you create a DPF object, Python
automatically attempts to start the server in the background.  If you
want to connect to an existing server (either local or remote), use
:func:`dpf.connect_to_server`.

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: default


    model = dpf.Model(examples.simple_bar)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\00-basic\00-basic_example.py", line 40, in <module>
        model = dpf.Model(examples.simple_bar)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 48, in __init__
        server = dpf.core._global_server()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\server.py", line 83, in _global_server
        start_local_server()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\server.py", line 233, in start_local_server
        server = DpfServer(
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\server.py", line 379, in __init__
        check_ansys_grpc_dpf_version(self, timeout=timeout)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\server.py", line 691, in check_ansys_grpc_dpf_version
        raise ImportWarning(f"An incompatibility has been detected between the DPF server version "
    ImportWarning: An incompatibility has been detected between the DPF server version (3.0 from Ansys 2022R1) and the ansys-grpc-dpf version installed (0.3.0). Please consider using the latest DPF server available in the 2022R1 Ansys unified install.
    To follow the compatibility guidelines given in https://dpfdocs.pyansys.com/getting_started/index.html#client-server-compatibility while still using DPF server 3.0, please install version 0.4.0 of ansys-grpc-dpf with the command: 
         pip install ansys-grpc-dpf==0.4.0




.. GENERATED FROM PYTHON SOURCE LINES 44-49

Model Metadata
~~~~~~~~~~~~~~
Specific metadata can be extracted from the model by referencing the
model's ``metadata`` property.  For example, to print only the
``result_info``:

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: default


    metadata = model.metadata
    print(metadata.result_info)


.. GENERATED FROM PYTHON SOURCE LINES 54-55

To print the mesh region:

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default


    print(metadata.meshed_region)


.. GENERATED FROM PYTHON SOURCE LINES 59-60

To print the time or frequency of the results:

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default


    print(metadata.time_freq_support)


.. GENERATED FROM PYTHON SOURCE LINES 64-76

Extracting Displacement Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
All results of the model can be accessed through the ``results``
property, which returns the :class:`ansys.dpf.core.results.Results`
class. This class contains the DPF result operators available to a
specific result file, which are listed when printing the object with
``print(results)``.

Here, the ``'U'`` operator is connected with ``data_sources``, which
takes place automatically when running ``results.displacement()``.
By default, the ``'U'`` operator is connected to the first result set,
which for this static result is the only result.

.. GENERATED FROM PYTHON SOURCE LINES 76-84

.. code-block:: default

    results = model.results
    displacements = results.displacement()
    fields = displacements.outputs.fields_container()

    # Finally, extract the data of the displacement field:
    disp = fields[0].data
    disp


.. GENERATED FROM PYTHON SOURCE LINES 85-86

.. code-block:: default

    model.metadata.meshed_region.plot(fields)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.385 seconds)


.. _sphx_glr_download_examples_00-basic_00-basic_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 00-basic_example.py <00-basic_example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 00-basic_example.ipynb <00-basic_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
