
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-basic\02-basic_field_containers.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_02-basic_field_containers.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_02-basic_field_containers.py:


.. _ref_basic_field_example:

Field and Field Containers Overview
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In DPF, the field is the main simulation data container. During a numerical
simulation, result data is defined by values associated to entities
(scoping). These entities are a subset of a model (support).

Because field data is always associated to its scoping and support,
the field is a self-describing piece of data. A field is also
defined by its parameters, such as dimensionality, unit, and location.
For example, a field can describe a displacement vector or norm, stress or strain
tensor, stress or strain equivalent, or minimum or maximum
over time of any result. A field can be defined on a complete model or
on only certain entities of the model based on its scoping. The data
is stored as a vector of double values, and each elementary entity has
a number of components. For example, a displacement will have three
components, and a symmetrical stress matrix will have six components.

In DPF, a fields container is simply a collection of fields that can be
indexed, just like a Python list. Operators applied to a fields
container will have each individual field operated on. Fields
containers are outputs from operators.

First, import necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default

    import numpy as np

    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 35-37

Create a model object to establish a connection with an
example result file and then extract:

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    model = dpf.Model(examples.static_rst)
    print(model)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\PyAnsysRepo\pydpf-core\examples\00-basic\02-basic_field_containers.py", line 38, in <module>
        print(model)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 207, in __str__
        txt += str(self.results)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 159, in results
        self._results = CommonResults(self)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\results.py", line 574, in __init__
        self._result_info = model.metadata.result_info
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 104, in metadata
        self._metadata = Metadata(self._data_sources, self._server)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 258, in __init__
        self._set_data_sources(data_sources)
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 394, in _set_data_sources
        self._cache_streams_provider()
      File "d:\pyansysrepo\pydpf-core\ansys\dpf\core\model.py", line 282, in _cache_streams_provider
        self._stream_provider.inputs.connect(self._data_sources)
    AttributeError: 'NoneType' object has no attribute 'connect'




.. GENERATED FROM PYTHON SOURCE LINES 41-43

Create the displacement operator directly from the ``results``
property and extract the displacement fields container:

.. GENERATED FROM PYTHON SOURCE LINES 43-47

.. code-block:: default

    disp_op = model.results.displacement()
    fields = disp_op.outputs.fields_container()
    print(fields)


.. GENERATED FROM PYTHON SOURCE LINES 48-50

A field can be extracted from a fields container by simply indexing
the requested field:

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    field = fields[0]
    print(field)


.. GENERATED FROM PYTHON SOURCE LINES 54-58

Extracting Data from a Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can extract all the data from a given field using the ``data``
property.  This returns a ``numpy`` array.

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default


    print(field.data)


.. GENERATED FROM PYTHON SOURCE LINES 62-72

While it might seem preferable to work entirely within ``numpy``,
DPF runs outside of Python and potentially even on a
remote machine.  Therefore, the transfer of unnecessary data between
the DPF instance and the Python client leads to inefficient
operations on large models. Instead, you should use DPF operators to
assemble the necessary data before recalling the data from DPF.

For example, if you want the maximum displacement for a given
result, use the min/max operator:


.. GENERATED FROM PYTHON SOURCE LINES 72-81

.. code-block:: default

    min_max_op = dpf.operators.min_max.min_max(field)
    print(min_max_op.outputs.field_max().data)

    # Out of conveience, you can simply take the max of the field with:
    print(field.max().data)

    # The above yields a result identical to:
    print(np.max(field.data, axis=0))


.. GENERATED FROM PYTHON SOURCE LINES 82-85

Note that the numpy array does not retain any information about the
field it describes.  Using the DPF ``max`` operator of the field does
retain this information.

.. GENERATED FROM PYTHON SOURCE LINES 85-87

.. code-block:: default

    max_field = field.max()
    print(max_field)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_00-basic_02-basic_field_containers.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 02-basic_field_containers.py <02-basic_field_containers.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 02-basic_field_containers.ipynb <02-basic_field_containers.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
