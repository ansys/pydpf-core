"""
string_deserializer
===================
"""
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs, _modify_output_spec_with_one_type
from ansys.dpf.core.operators.specification import PinSpecification, Specification

"""Operators from "serialization" category
"""

class string_deserializer(Operator):
    """Takes a string generated by the serializer and deserializes it into DPF's entities.

      available inputs:
        - serialized_string (str)

      available outputs:
        - any_output1 ()
        - any_output2 ()

      Examples
      --------
      >>> from ansys.dpf import core as dpf

      >>> # Instantiate operator
      >>> op = dpf.operators.serialization.string_deserializer()

      >>> # Make input connections
      >>> my_serialized_string = str()
      >>> op.inputs.serialized_string.connect(my_serialized_string)

      >>> # Instantiate operator and connect inputs in one line
      >>> op = dpf.operators.serialization.string_deserializer(serialized_string=my_serialized_string)

      >>> # Get output data
      >>> result_any_output1 = op.outputs.any_output1()
      >>> result_any_output2 = op.outputs.any_output2()"""
    def __init__(self, serialized_string=None, config=None, server=None):
        super().__init__(name="string_deserializer", config = config, server = server)
        self._inputs = InputsStringDeserializer(self)
        self._outputs = OutputsStringDeserializer(self)
        if serialized_string !=None:
            self.inputs.serialized_string.connect(serialized_string)

    @staticmethod
    def _spec():
        spec = Specification(description="""Takes a string generated by the serializer and deserializes it into DPF's entities.""",
                             map_input_pin_spec={
                                 0 : PinSpecification(name = "serialized_string", type_names=["string"], optional=False, document="""""")},
                             map_output_pin_spec={
                                 1 : PinSpecification(name = "any_output", type_names=[], optional=False, document="""number and types of outputs corresponding of the inputs used in the serialization"""), 
                                 2 : PinSpecification(name = "any_output", type_names=[], optional=False, document="""number and types of outputs corresponding of the inputs used in the serialization""")})
        return spec


    @staticmethod
    def default_config():
        return Operator.default_config(name = "string_deserializer")

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsStringDeserializer 
        """
        return super().inputs


    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluationg it

        Returns
        --------
        outputs : OutputsStringDeserializer 
        """
        return super().outputs


#internal name: string_deserializer
#scripting name: string_deserializer
class InputsStringDeserializer(_Inputs):
    """Intermediate class used to connect user inputs to string_deserializer operator

      Examples
      --------
      >>> from ansys.dpf import core as dpf

      >>> op = dpf.operators.serialization.string_deserializer()
      >>> my_serialized_string = str()
      >>> op.inputs.serialized_string.connect(my_serialized_string)
    """
    def __init__(self, op: Operator):
        super().__init__(string_deserializer._spec().inputs, op)
        self._serialized_string = Input(string_deserializer._spec().input_pin(0), 0, op, -1) 
        self._inputs.append(self._serialized_string)

    @property
    def serialized_string(self):
        """Allows to connect serialized_string input to the operator

        Parameters
        ----------
        my_serialized_string : str, 

        Examples
        --------
        >>> from ansys.dpf import core as dpf

        >>> op = dpf.operators.serialization.string_deserializer()
        >>> op.inputs.serialized_string.connect(my_serialized_string)
        >>> #or
        >>> op.inputs.serialized_string(my_serialized_string)

        """
        return self._serialized_string

class OutputsStringDeserializer(_Outputs):
    """Intermediate class used to get outputs from string_deserializer operator
      Examples
      --------
      >>> from ansys.dpf import core as dpf

      >>> op = dpf.operators.serialization.string_deserializer()
      >>> # Connect inputs : op.inputs. ...
    """
    def __init__(self, op: Operator):
        super().__init__(string_deserializer._spec().outputs, op)
        pass 

