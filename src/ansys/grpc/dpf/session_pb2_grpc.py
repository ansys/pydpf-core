# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ansys.grpc.dpf.base_pb2 as base__pb2
import ansys.grpc.dpf.session_pb2 as session__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in session_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class SessionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/ansys.api.dpf.session.v0.SessionService/Create',
                request_serializer=session__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=session__pb2.Session.FromString,
                _registered_method=True)
        self.Add = channel.unary_unary(
                '/ansys.api.dpf.session.v0.SessionService/Add',
                request_serializer=session__pb2.AddRequest.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)
        self.ListenToProgress = channel.unary_stream(
                '/ansys.api.dpf.session.v0.SessionService/ListenToProgress',
                request_serializer=session__pb2.Session.SerializeToString,
                response_deserializer=session__pb2.GetProgressResponse.FromString,
                _registered_method=True)
        self.AddProgressEventSystem = channel.unary_unary(
                '/ansys.api.dpf.session.v0.SessionService/AddProgressEventSystem',
                request_serializer=session__pb2.Session.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)
        self.FlushWorkflows = channel.unary_unary(
                '/ansys.api.dpf.session.v0.SessionService/FlushWorkflows',
                request_serializer=session__pb2.Session.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/ansys.api.dpf.session.v0.SessionService/Delete',
                request_serializer=session__pb2.Session.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)


class SessionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Add(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenToProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddProgressEventSystem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlushWorkflows(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SessionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=session__pb2.CreateSessionRequest.FromString,
                    response_serializer=session__pb2.Session.SerializeToString,
            ),
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,
                    request_deserializer=session__pb2.AddRequest.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'ListenToProgress': grpc.unary_stream_rpc_method_handler(
                    servicer.ListenToProgress,
                    request_deserializer=session__pb2.Session.FromString,
                    response_serializer=session__pb2.GetProgressResponse.SerializeToString,
            ),
            'AddProgressEventSystem': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProgressEventSystem,
                    request_deserializer=session__pb2.Session.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'FlushWorkflows': grpc.unary_unary_rpc_method_handler(
                    servicer.FlushWorkflows,
                    request_deserializer=session__pb2.Session.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=session__pb2.Session.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ansys.api.dpf.session.v0.SessionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ansys.api.dpf.session.v0.SessionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SessionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.session.v0.SessionService/Create',
            session__pb2.CreateSessionRequest.SerializeToString,
            session__pb2.Session.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.session.v0.SessionService/Add',
            session__pb2.AddRequest.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListenToProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ansys.api.dpf.session.v0.SessionService/ListenToProgress',
            session__pb2.Session.SerializeToString,
            session__pb2.GetProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddProgressEventSystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.session.v0.SessionService/AddProgressEventSystem',
            session__pb2.Session.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FlushWorkflows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.session.v0.SessionService/FlushWorkflows',
            session__pb2.Session.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.session.v0.SessionService/Delete',
            session__pb2.Session.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
