# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ansys.grpc.dpf.base_pb2 as base__pb2
import ansys.grpc.dpf.collection_pb2 as collection__pb2
import ansys.grpc.dpf.support_pb2 as support__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in collection_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class CollectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/Create',
                request_serializer=collection__pb2.CollectionRequest.SerializeToString,
                response_deserializer=collection__pb2.Collection.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/Update',
                request_serializer=collection__pb2.UpdateCollectionRequest.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateLabels = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/UpdateLabels',
                request_serializer=collection__pb2.UpdateLabelsRequest.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateEntry = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/UpdateEntry',
                request_serializer=collection__pb2.UpdateRequest.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)
        self.List = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/List',
                request_serializer=collection__pb2.Collection.SerializeToString,
                response_deserializer=collection__pb2.ListResponse.FromString,
                _registered_method=True)
        self.GetEntries = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/GetEntries',
                request_serializer=collection__pb2.EntryRequest.SerializeToString,
                response_deserializer=collection__pb2.GetEntriesResponse.FromString,
                _registered_method=True)
        self.GetEntriesIndices = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/GetEntriesIndices',
                request_serializer=collection__pb2.EntryRequest.SerializeToString,
                response_deserializer=collection__pb2.GetEntriesIndicesResponse.FromString,
                _registered_method=True)
        self.GetSupport = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/GetSupport',
                request_serializer=collection__pb2.SupportRequest.SerializeToString,
                response_deserializer=support__pb2.Support.FromString,
                _registered_method=True)
        self.GetLabelScoping = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/GetLabelScoping',
                request_serializer=collection__pb2.LabelScopingRequest.SerializeToString,
                response_deserializer=collection__pb2.LabelScopingResponse.FromString,
                _registered_method=True)
        self.UpdateSupport = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/UpdateSupport',
                request_serializer=collection__pb2.UpdateSupportRequest.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)
        self.GetAllData = channel.unary_stream(
                '/ansys.api.dpf.collection.v0.CollectionService/GetAllData',
                request_serializer=collection__pb2.GetAllDataRequest.SerializeToString,
                response_deserializer=base__pb2.Array.FromString,
                _registered_method=True)
        self.UpdateAllData = channel.stream_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/UpdateAllData',
                request_serializer=collection__pb2.UpdateAllDataRequest.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)
        self.Describe = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/Describe',
                request_serializer=base__pb2.DescribeRequest.SerializeToString,
                response_deserializer=base__pb2.DescribeResponse.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/ansys.api.dpf.collection.v0.CollectionService/Delete',
                request_serializer=collection__pb2.Collection.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                _registered_method=True)


class CollectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLabels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEntry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEntriesIndices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabelScoping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSupport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllData(self, request, context):
        """for integral type collections
        sends streamed data, to choose the size of each chunk set metadata with "num_double", "num_int" or "num_bytes"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAllData(self, request_iterator, context):
        """for integral type collections
        streams bytes from client to server 
        optional: for efficiency purpose, please give the total array size in the client metadata with "size_bytes", "size_double" or "size_int"
        if the total size is specified, the data will be directly copied in the collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Describe(self, request, context):
        """describe any ISharedObjCollection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=collection__pb2.CollectionRequest.FromString,
                    response_serializer=collection__pb2.Collection.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=collection__pb2.UpdateCollectionRequest.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'UpdateLabels': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLabels,
                    request_deserializer=collection__pb2.UpdateLabelsRequest.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'UpdateEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEntry,
                    request_deserializer=collection__pb2.UpdateRequest.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=collection__pb2.Collection.FromString,
                    response_serializer=collection__pb2.ListResponse.SerializeToString,
            ),
            'GetEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEntries,
                    request_deserializer=collection__pb2.EntryRequest.FromString,
                    response_serializer=collection__pb2.GetEntriesResponse.SerializeToString,
            ),
            'GetEntriesIndices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEntriesIndices,
                    request_deserializer=collection__pb2.EntryRequest.FromString,
                    response_serializer=collection__pb2.GetEntriesIndicesResponse.SerializeToString,
            ),
            'GetSupport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupport,
                    request_deserializer=collection__pb2.SupportRequest.FromString,
                    response_serializer=support__pb2.Support.SerializeToString,
            ),
            'GetLabelScoping': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabelScoping,
                    request_deserializer=collection__pb2.LabelScopingRequest.FromString,
                    response_serializer=collection__pb2.LabelScopingResponse.SerializeToString,
            ),
            'UpdateSupport': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSupport,
                    request_deserializer=collection__pb2.UpdateSupportRequest.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'GetAllData': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAllData,
                    request_deserializer=collection__pb2.GetAllDataRequest.FromString,
                    response_serializer=base__pb2.Array.SerializeToString,
            ),
            'UpdateAllData': grpc.stream_unary_rpc_method_handler(
                    servicer.UpdateAllData,
                    request_deserializer=collection__pb2.UpdateAllDataRequest.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'Describe': grpc.unary_unary_rpc_method_handler(
                    servicer.Describe,
                    request_deserializer=base__pb2.DescribeRequest.FromString,
                    response_serializer=base__pb2.DescribeResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=collection__pb2.Collection.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ansys.api.dpf.collection.v0.CollectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ansys.api.dpf.collection.v0.CollectionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/Create',
            collection__pb2.CollectionRequest.SerializeToString,
            collection__pb2.Collection.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/Update',
            collection__pb2.UpdateCollectionRequest.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/UpdateLabels',
            collection__pb2.UpdateLabelsRequest.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/UpdateEntry',
            collection__pb2.UpdateRequest.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/List',
            collection__pb2.Collection.SerializeToString,
            collection__pb2.ListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/GetEntries',
            collection__pb2.EntryRequest.SerializeToString,
            collection__pb2.GetEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEntriesIndices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/GetEntriesIndices',
            collection__pb2.EntryRequest.SerializeToString,
            collection__pb2.GetEntriesIndicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSupport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/GetSupport',
            collection__pb2.SupportRequest.SerializeToString,
            support__pb2.Support.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLabelScoping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/GetLabelScoping',
            collection__pb2.LabelScopingRequest.SerializeToString,
            collection__pb2.LabelScopingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSupport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/UpdateSupport',
            collection__pb2.UpdateSupportRequest.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/GetAllData',
            collection__pb2.GetAllDataRequest.SerializeToString,
            base__pb2.Array.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAllData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/UpdateAllData',
            collection__pb2.UpdateAllDataRequest.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Describe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/Describe',
            base__pb2.DescribeRequest.SerializeToString,
            base__pb2.DescribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ansys.api.dpf.collection.v0.CollectionService/Delete',
            collection__pb2.Collection.SerializeToString,
            base__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
