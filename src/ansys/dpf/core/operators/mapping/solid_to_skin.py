"""
solid_to_skin

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class solid_to_skin(Operator):
    r"""Maps a field defined on solid elements to a field defined on skin
    elements. Three cases are possible, based on the solid field data
    location; (i) Elemental: The values associated with the solid elements
    are copied according to those underlying the skin, (ii) Nodal: The solid
    field is rescoped with respect to the nodes of the skin mesh, (iii)
    ElementalNodal: The values are copied from the solid mesh to the skin
    mesh for each element face and the nodes associated with it.


    Parameters
    ----------
    field: Field or FieldsContainer
        field or fields container with only one field is expected
    mesh: MeshedRegion
        skin mesh region expected
    solid_mesh: MeshedRegion, optional
        Solid mesh support (optional).

    Returns
    -------
    field: Field

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.mapping.solid_to_skin()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_solid_mesh = dpf.MeshedRegion()
    >>> op.inputs.solid_mesh.connect(my_solid_mesh)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.mapping.solid_to_skin(
    ...     field=my_field,
    ...     mesh=my_mesh,
    ...     solid_mesh=my_solid_mesh,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self, field=None, mesh=None, solid_mesh=None, config=None, server=None
    ):
        super().__init__(name="solid_to_skin", config=config, server=server)
        self._inputs = InputsSolidToSkin(self)
        self._outputs = OutputsSolidToSkin(self)
        if field is not None:
            self.inputs.field.connect(field)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)
        if solid_mesh is not None:
            self.inputs.solid_mesh.connect(solid_mesh)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Maps a field defined on solid elements to a field defined on skin
elements. Three cases are possible, based on the solid field data
location; (i) Elemental: The values associated with the solid elements
are copied according to those underlying the skin, (ii) Nodal: The solid
field is rescoped with respect to the nodes of the skin mesh, (iii)
ElementalNodal: The values are copied from the solid mesh to the skin
mesh for each element face and the nodes associated with it.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document=r"""field or fields container with only one field is expected""",
                ),
                1: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document=r"""skin mesh region expected""",
                ),
                2: PinSpecification(
                    name="solid_mesh",
                    type_names=["abstract_meshed_region"],
                    optional=True,
                    document=r"""Solid mesh support (optional).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="solid_to_skin", server=server)

    @property
    def inputs(self) -> InputsSolidToSkin:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsSolidToSkin.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsSolidToSkin:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsSolidToSkin.
        """
        return super().outputs


class InputsSolidToSkin(_Inputs):
    """Intermediate class used to connect user inputs to
    solid_to_skin operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mapping.solid_to_skin()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_solid_mesh = dpf.MeshedRegion()
    >>> op.inputs.solid_mesh.connect(my_solid_mesh)
    """

    def __init__(self, op: Operator):
        super().__init__(solid_to_skin._spec().inputs, op)
        self._field = Input(solid_to_skin._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._mesh = Input(solid_to_skin._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._mesh)
        self._solid_mesh = Input(solid_to_skin._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._solid_mesh)

    @property
    def field(self) -> Input:
        r"""Allows to connect field input to the operator.

        field or fields container with only one field is expected

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.solid_to_skin()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def mesh(self) -> Input:
        r"""Allows to connect mesh input to the operator.

        skin mesh region expected

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.solid_to_skin()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh

    @property
    def solid_mesh(self) -> Input:
        r"""Allows to connect solid_mesh input to the operator.

        Solid mesh support (optional).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.solid_to_skin()
        >>> op.inputs.solid_mesh.connect(my_solid_mesh)
        >>> # or
        >>> op.inputs.solid_mesh(my_solid_mesh)
        """
        return self._solid_mesh


class OutputsSolidToSkin(_Outputs):
    """Intermediate class used to get outputs from
    solid_to_skin operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mapping.solid_to_skin()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(solid_to_skin._spec().outputs, op)
        self._field = Output(solid_to_skin._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)

    @property
    def field(self) -> Output:
        r"""Allows to get field output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.solid_to_skin()
        >>> # Get the output from op.outputs. ...
        >>> result_field = op.outputs.field()
        """
        return self._field
