"""
apply_mechanical_native_mapping
===============================
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class apply_mechanical_native_mapping(Operator):
    """Maps source data from source mesh to target mesh (computes
    interpolation).This operator needs to be used with the prepare
    mechanical native mapping associated one.

    Parameters
    ----------
    source_mesh : MeshedRegion
        Source mesh
    source_mesh_id : int
        Source mesh id
    target_mesh : MeshedRegion
        Target mesh
    target_mesh_id : int
        Target mesh id
    mapping_manager_data :
    source_data : FieldsContainer
        Source data
    target_scoping : Scoping, optional
        Target scoping the result will be scoped on


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()

    >>> # Make input connections
    >>> my_source_mesh = dpf.MeshedRegion()
    >>> op.inputs.source_mesh.connect(my_source_mesh)
    >>> my_source_mesh_id = int()
    >>> op.inputs.source_mesh_id.connect(my_source_mesh_id)
    >>> my_target_mesh = dpf.MeshedRegion()
    >>> op.inputs.target_mesh.connect(my_target_mesh)
    >>> my_target_mesh_id = int()
    >>> op.inputs.target_mesh_id.connect(my_target_mesh_id)
    >>> my_mapping_manager_data = dpf.()
    >>> op.inputs.mapping_manager_data.connect(my_mapping_manager_data)
    >>> my_source_data = dpf.FieldsContainer()
    >>> op.inputs.source_data.connect(my_source_data)
    >>> my_target_scoping = dpf.Scoping()
    >>> op.inputs.target_scoping.connect(my_target_scoping)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.mapping.apply_mechanical_native_mapping(
    ...     source_mesh=my_source_mesh,
    ...     source_mesh_id=my_source_mesh_id,
    ...     target_mesh=my_target_mesh,
    ...     target_mesh_id=my_target_mesh_id,
    ...     mapping_manager_data=my_mapping_manager_data,
    ...     source_data=my_source_data,
    ...     target_scoping=my_target_scoping,
    ... )

    >>> # Get output data
    >>> result_mapped_data = op.outputs.mapped_data()
    """

    def __init__(
        self,
        source_mesh=None,
        source_mesh_id=None,
        target_mesh=None,
        target_mesh_id=None,
        mapping_manager_data=None,
        source_data=None,
        target_scoping=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="mechanical_native_mapping::apply", config=config, server=server
        )
        self._inputs = InputsApplyMechanicalNativeMapping(self)
        self._outputs = OutputsApplyMechanicalNativeMapping(self)
        if source_mesh is not None:
            self.inputs.source_mesh.connect(source_mesh)
        if source_mesh_id is not None:
            self.inputs.source_mesh_id.connect(source_mesh_id)
        if target_mesh is not None:
            self.inputs.target_mesh.connect(target_mesh)
        if target_mesh_id is not None:
            self.inputs.target_mesh_id.connect(target_mesh_id)
        if mapping_manager_data is not None:
            self.inputs.mapping_manager_data.connect(mapping_manager_data)
        if source_data is not None:
            self.inputs.source_data.connect(source_data)
        if target_scoping is not None:
            self.inputs.target_scoping.connect(target_scoping)

    @staticmethod
    def _spec():
        description = """Maps source data from source mesh to target mesh (computes
            interpolation).This operator needs to be used with the
            prepare mechanical native mapping associated one."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="source_mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document="""Source mesh""",
                ),
                1: PinSpecification(
                    name="source_mesh_id",
                    type_names=["int32"],
                    optional=False,
                    document="""Source mesh id""",
                ),
                2: PinSpecification(
                    name="target_mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document="""Target mesh""",
                ),
                3: PinSpecification(
                    name="target_mesh_id",
                    type_names=["int32"],
                    optional=False,
                    document="""Target mesh id""",
                ),
                4: PinSpecification(
                    name="mapping_manager_data",
                    type_names=["any"],
                    optional=False,
                    document="""""",
                ),
                5: PinSpecification(
                    name="source_data",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Source data""",
                ),
                6: PinSpecification(
                    name="target_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document="""Target scoping the result will be scoped on""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="mapped_data",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Mapped data""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="mechanical_native_mapping::apply", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsApplyMechanicalNativeMapping
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsApplyMechanicalNativeMapping
        """
        return super().outputs


class InputsApplyMechanicalNativeMapping(_Inputs):
    """Intermediate class used to connect user inputs to
    apply_mechanical_native_mapping operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
    >>> my_source_mesh = dpf.MeshedRegion()
    >>> op.inputs.source_mesh.connect(my_source_mesh)
    >>> my_source_mesh_id = int()
    >>> op.inputs.source_mesh_id.connect(my_source_mesh_id)
    >>> my_target_mesh = dpf.MeshedRegion()
    >>> op.inputs.target_mesh.connect(my_target_mesh)
    >>> my_target_mesh_id = int()
    >>> op.inputs.target_mesh_id.connect(my_target_mesh_id)
    >>> my_mapping_manager_data = dpf.()
    >>> op.inputs.mapping_manager_data.connect(my_mapping_manager_data)
    >>> my_source_data = dpf.FieldsContainer()
    >>> op.inputs.source_data.connect(my_source_data)
    >>> my_target_scoping = dpf.Scoping()
    >>> op.inputs.target_scoping.connect(my_target_scoping)
    """

    def __init__(self, op: Operator):
        super().__init__(apply_mechanical_native_mapping._spec().inputs, op)
        self._source_mesh = Input(
            apply_mechanical_native_mapping._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._source_mesh)
        self._source_mesh_id = Input(
            apply_mechanical_native_mapping._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._source_mesh_id)
        self._target_mesh = Input(
            apply_mechanical_native_mapping._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._target_mesh)
        self._target_mesh_id = Input(
            apply_mechanical_native_mapping._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._target_mesh_id)
        self._mapping_manager_data = Input(
            apply_mechanical_native_mapping._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._mapping_manager_data)
        self._source_data = Input(
            apply_mechanical_native_mapping._spec().input_pin(5), 5, op, -1
        )
        self._inputs.append(self._source_data)
        self._target_scoping = Input(
            apply_mechanical_native_mapping._spec().input_pin(6), 6, op, -1
        )
        self._inputs.append(self._target_scoping)

    @property
    def source_mesh(self):
        """Allows to connect source_mesh input to the operator.

        Source mesh

        Parameters
        ----------
        my_source_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
        >>> op.inputs.source_mesh.connect(my_source_mesh)
        >>> # or
        >>> op.inputs.source_mesh(my_source_mesh)
        """
        return self._source_mesh

    @property
    def source_mesh_id(self):
        """Allows to connect source_mesh_id input to the operator.

        Source mesh id

        Parameters
        ----------
        my_source_mesh_id : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
        >>> op.inputs.source_mesh_id.connect(my_source_mesh_id)
        >>> # or
        >>> op.inputs.source_mesh_id(my_source_mesh_id)
        """
        return self._source_mesh_id

    @property
    def target_mesh(self):
        """Allows to connect target_mesh input to the operator.

        Target mesh

        Parameters
        ----------
        my_target_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
        >>> op.inputs.target_mesh.connect(my_target_mesh)
        >>> # or
        >>> op.inputs.target_mesh(my_target_mesh)
        """
        return self._target_mesh

    @property
    def target_mesh_id(self):
        """Allows to connect target_mesh_id input to the operator.

        Target mesh id

        Parameters
        ----------
        my_target_mesh_id : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
        >>> op.inputs.target_mesh_id.connect(my_target_mesh_id)
        >>> # or
        >>> op.inputs.target_mesh_id(my_target_mesh_id)
        """
        return self._target_mesh_id

    @property
    def mapping_manager_data(self):
        """Allows to connect mapping_manager_data input to the operator.

        Parameters
        ----------
        my_mapping_manager_data :

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
        >>> op.inputs.mapping_manager_data.connect(my_mapping_manager_data)
        >>> # or
        >>> op.inputs.mapping_manager_data(my_mapping_manager_data)
        """
        return self._mapping_manager_data

    @property
    def source_data(self):
        """Allows to connect source_data input to the operator.

        Source data

        Parameters
        ----------
        my_source_data : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
        >>> op.inputs.source_data.connect(my_source_data)
        >>> # or
        >>> op.inputs.source_data(my_source_data)
        """
        return self._source_data

    @property
    def target_scoping(self):
        """Allows to connect target_scoping input to the operator.

        Target scoping the result will be scoped on

        Parameters
        ----------
        my_target_scoping : Scoping

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
        >>> op.inputs.target_scoping.connect(my_target_scoping)
        >>> # or
        >>> op.inputs.target_scoping(my_target_scoping)
        """
        return self._target_scoping


class OutputsApplyMechanicalNativeMapping(_Outputs):
    """Intermediate class used to get outputs from
    apply_mechanical_native_mapping operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
    >>> # Connect inputs : op.inputs. ...
    >>> result_mapped_data = op.outputs.mapped_data()
    """

    def __init__(self, op: Operator):
        super().__init__(apply_mechanical_native_mapping._spec().outputs, op)
        self._mapped_data = Output(
            apply_mechanical_native_mapping._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._mapped_data)

    @property
    def mapped_data(self):
        """Allows to get mapped_data output of the operator

        Returns
        ----------
        my_mapped_data : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.apply_mechanical_native_mapping()
        >>> # Connect inputs : op.inputs. ...
        >>> result_mapped_data = op.outputs.mapped_data()
        """  # noqa: E501
        return self._mapped_data
