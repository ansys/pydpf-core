"""
create_mech_shape_func_surf_workflow
====================================
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class create_mech_shape_func_surf_workflow(Operator):
    """Prepares a workflow able to map data from an input mesh to a target
    mesh.

    Parameters
    ----------
    source_mesh : MeshedRegion, optional
        Mesh where the source data is defined.
    target_mesh : MeshedRegion, optional
        Mesh the data should be mapped on.
    target_scoping : Scoping, optional
        Scoping that restricts the interpolation to a
        given set of nodes/elements in the
        target mesh.
    options_data_tree : DataTree, optional
        Datatree that contains a 'mapping_options'
        subtree with the mapping options, and
        a 'data_definition' subtree with
        'dimensionality' int and 'location'
        string attributes that are required
        by the 'prepare mechanical native
        mapping' operator (see documentation
        of this operator to know more about
        the supported options).


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow()

    >>> # Make input connections
    >>> my_source_mesh = dpf.MeshedRegion()
    >>> op.inputs.source_mesh.connect(my_source_mesh)
    >>> my_target_mesh = dpf.MeshedRegion()
    >>> op.inputs.target_mesh.connect(my_target_mesh)
    >>> my_target_scoping = dpf.Scoping()
    >>> op.inputs.target_scoping.connect(my_target_scoping)
    >>> my_options_data_tree = dpf.DataTree()
    >>> op.inputs.options_data_tree.connect(my_options_data_tree)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow(
    ...     source_mesh=my_source_mesh,
    ...     target_mesh=my_target_mesh,
    ...     target_scoping=my_target_scoping,
    ...     options_data_tree=my_options_data_tree,
    ... )

    >>> # Get output data
    >>> result_mapping_workflow = op.outputs.mapping_workflow()
    """

    def __init__(
        self,
        source_mesh=None,
        target_mesh=None,
        target_scoping=None,
        options_data_tree=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="mech_shape_function_surf_wf", config=config, server=server
        )
        self._inputs = InputsCreateMechShapeFuncSurfWorkflow(self)
        self._outputs = OutputsCreateMechShapeFuncSurfWorkflow(self)
        if source_mesh is not None:
            self.inputs.source_mesh.connect(source_mesh)
        if target_mesh is not None:
            self.inputs.target_mesh.connect(target_mesh)
        if target_scoping is not None:
            self.inputs.target_scoping.connect(target_scoping)
        if options_data_tree is not None:
            self.inputs.options_data_tree.connect(options_data_tree)

    @staticmethod
    def _spec():
        description = """Prepares a workflow able to map data from an input mesh to a target
            mesh."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="source_mesh",
                    type_names=["abstract_meshed_region"],
                    optional=True,
                    document="""Mesh where the source data is defined.""",
                ),
                1: PinSpecification(
                    name="target_mesh",
                    type_names=["abstract_meshed_region"],
                    optional=True,
                    document="""Mesh the data should be mapped on.""",
                ),
                6: PinSpecification(
                    name="target_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document="""Scoping that restricts the interpolation to a
        given set of nodes/elements in the
        target mesh.""",
                ),
                10: PinSpecification(
                    name="options_data_tree",
                    type_names=["data_tree"],
                    optional=True,
                    document="""Datatree that contains a 'mapping_options'
        subtree with the mapping options, and
        a 'data_definition' subtree with
        'dimensionality' int and 'location'
        string attributes that are required
        by the 'prepare mechanical native
        mapping' operator (see documentation
        of this operator to know more about
        the supported options).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="mapping_workflow",
                    type_names=["workflow"],
                    optional=False,
                    document="""Workflow with input pin 'source_data';
        optionally 'source_mesh',
        'target_mesh', 'target_scoping', and
        'options_data_tree'; and output pin
        'target_data'.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="mech_shape_function_surf_wf", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsCreateMechShapeFuncSurfWorkflow
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsCreateMechShapeFuncSurfWorkflow
        """
        return super().outputs


class InputsCreateMechShapeFuncSurfWorkflow(_Inputs):
    """Intermediate class used to connect user inputs to
    create_mech_shape_func_surf_workflow operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow()
    >>> my_source_mesh = dpf.MeshedRegion()
    >>> op.inputs.source_mesh.connect(my_source_mesh)
    >>> my_target_mesh = dpf.MeshedRegion()
    >>> op.inputs.target_mesh.connect(my_target_mesh)
    >>> my_target_scoping = dpf.Scoping()
    >>> op.inputs.target_scoping.connect(my_target_scoping)
    >>> my_options_data_tree = dpf.DataTree()
    >>> op.inputs.options_data_tree.connect(my_options_data_tree)
    """

    def __init__(self, op: Operator):
        super().__init__(create_mech_shape_func_surf_workflow._spec().inputs, op)
        self._source_mesh = Input(
            create_mech_shape_func_surf_workflow._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._source_mesh)
        self._target_mesh = Input(
            create_mech_shape_func_surf_workflow._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._target_mesh)
        self._target_scoping = Input(
            create_mech_shape_func_surf_workflow._spec().input_pin(6), 6, op, -1
        )
        self._inputs.append(self._target_scoping)
        self._options_data_tree = Input(
            create_mech_shape_func_surf_workflow._spec().input_pin(10), 10, op, -1
        )
        self._inputs.append(self._options_data_tree)

    @property
    def source_mesh(self):
        """Allows to connect source_mesh input to the operator.

        Mesh where the source data is defined.

        Parameters
        ----------
        my_source_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow()
        >>> op.inputs.source_mesh.connect(my_source_mesh)
        >>> # or
        >>> op.inputs.source_mesh(my_source_mesh)
        """
        return self._source_mesh

    @property
    def target_mesh(self):
        """Allows to connect target_mesh input to the operator.

        Mesh the data should be mapped on.

        Parameters
        ----------
        my_target_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow()
        >>> op.inputs.target_mesh.connect(my_target_mesh)
        >>> # or
        >>> op.inputs.target_mesh(my_target_mesh)
        """
        return self._target_mesh

    @property
    def target_scoping(self):
        """Allows to connect target_scoping input to the operator.

        Scoping that restricts the interpolation to a
        given set of nodes/elements in the
        target mesh.

        Parameters
        ----------
        my_target_scoping : Scoping

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow()
        >>> op.inputs.target_scoping.connect(my_target_scoping)
        >>> # or
        >>> op.inputs.target_scoping(my_target_scoping)
        """
        return self._target_scoping

    @property
    def options_data_tree(self):
        """Allows to connect options_data_tree input to the operator.

        Datatree that contains a 'mapping_options'
        subtree with the mapping options, and
        a 'data_definition' subtree with
        'dimensionality' int and 'location'
        string attributes that are required
        by the 'prepare mechanical native
        mapping' operator (see documentation
        of this operator to know more about
        the supported options).

        Parameters
        ----------
        my_options_data_tree : DataTree

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow()
        >>> op.inputs.options_data_tree.connect(my_options_data_tree)
        >>> # or
        >>> op.inputs.options_data_tree(my_options_data_tree)
        """
        return self._options_data_tree


class OutputsCreateMechShapeFuncSurfWorkflow(_Outputs):
    """Intermediate class used to get outputs from
    create_mech_shape_func_surf_workflow operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow()
    >>> # Connect inputs : op.inputs. ...
    >>> result_mapping_workflow = op.outputs.mapping_workflow()
    """

    def __init__(self, op: Operator):
        super().__init__(create_mech_shape_func_surf_workflow._spec().outputs, op)
        self._mapping_workflow = Output(
            create_mech_shape_func_surf_workflow._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._mapping_workflow)

    @property
    def mapping_workflow(self):
        """Allows to get mapping_workflow output of the operator

        Returns
        ----------
        my_mapping_workflow : Workflow

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mapping.create_mech_shape_func_surf_workflow()
        >>> # Connect inputs : op.inputs. ...
        >>> result_mapping_workflow = op.outputs.mapping_workflow()
        """  # noqa: E501
        return self._mapping_workflow
