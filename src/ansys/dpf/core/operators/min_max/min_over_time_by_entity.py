"""
min_over_time_by_entity

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class min_over_time_by_entity(Operator):
    r"""Evaluates minimum over time/frequency.


    Parameters
    ----------
    fields_container: FieldsContainer
    abs_value: bool, optional
        Should use absolute value.
    compute_amplitude: bool, optional
        Do calculate amplitude.

    Returns
    -------
    fields_container: FieldsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.min_max.min_over_time_by_entity()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_abs_value = bool()
    >>> op.inputs.abs_value.connect(my_abs_value)
    >>> my_compute_amplitude = bool()
    >>> op.inputs.compute_amplitude.connect(my_compute_amplitude)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.min_max.min_over_time_by_entity(
    ...     fields_container=my_fields_container,
    ...     abs_value=my_abs_value,
    ...     compute_amplitude=my_compute_amplitude,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        abs_value=None,
        compute_amplitude=None,
        config=None,
        server=None,
    ):
        super().__init__(name="min_over_time_by_entity", config=config, server=server)
        self._inputs = InputsMinOverTimeByEntity(self)
        self._outputs = OutputsMinOverTimeByEntity(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if abs_value is not None:
            self.inputs.abs_value.connect(abs_value)
        if compute_amplitude is not None:
            self.inputs.compute_amplitude.connect(compute_amplitude)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Evaluates minimum over time/frequency.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                3: PinSpecification(
                    name="abs_value",
                    type_names=["bool"],
                    optional=True,
                    document=r"""Should use absolute value.""",
                ),
                4: PinSpecification(
                    name="compute_amplitude",
                    type_names=["bool"],
                    optional=True,
                    document=r"""Do calculate amplitude.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="min_over_time_by_entity", server=server)

    @property
    def inputs(self) -> InputsMinOverTimeByEntity:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsMinOverTimeByEntity.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsMinOverTimeByEntity:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsMinOverTimeByEntity.
        """
        return super().outputs


class InputsMinOverTimeByEntity(_Inputs):
    """Intermediate class used to connect user inputs to
    min_over_time_by_entity operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.min_max.min_over_time_by_entity()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_abs_value = bool()
    >>> op.inputs.abs_value.connect(my_abs_value)
    >>> my_compute_amplitude = bool()
    >>> op.inputs.compute_amplitude.connect(my_compute_amplitude)
    """

    def __init__(self, op: Operator):
        super().__init__(min_over_time_by_entity._spec().inputs, op)
        self._fields_container = Input(
            min_over_time_by_entity._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._abs_value = Input(min_over_time_by_entity._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._abs_value)
        self._compute_amplitude = Input(
            min_over_time_by_entity._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._compute_amplitude)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.min_max.min_over_time_by_entity()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def abs_value(self) -> Input:
        r"""Allows to connect abs_value input to the operator.

        Should use absolute value.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.min_max.min_over_time_by_entity()
        >>> op.inputs.abs_value.connect(my_abs_value)
        >>> # or
        >>> op.inputs.abs_value(my_abs_value)
        """
        return self._abs_value

    @property
    def compute_amplitude(self) -> Input:
        r"""Allows to connect compute_amplitude input to the operator.

        Do calculate amplitude.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.min_max.min_over_time_by_entity()
        >>> op.inputs.compute_amplitude.connect(my_compute_amplitude)
        >>> # or
        >>> op.inputs.compute_amplitude(my_compute_amplitude)
        """
        return self._compute_amplitude


class OutputsMinOverTimeByEntity(_Outputs):
    """Intermediate class used to get outputs from
    min_over_time_by_entity operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.min_max.min_over_time_by_entity()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(min_over_time_by_entity._spec().outputs, op)
        self._fields_container = Output(
            min_over_time_by_entity._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self) -> Output:
        r"""Allows to get fields_container output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.min_max.min_over_time_by_entity()
        >>> # Get the output from op.outputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """
        return self._fields_container
