"""
sketch_matrix

Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class sketch_matrix(Operator):
    """Compress fields container using an orthonormal randomized (Gaussian
    distribution) sketch matrix.

    Parameters
    ----------
    dataIn : FieldsContainer
        Fields container to be compressed. it is
        assumed that all fields have the same
        structure (scoping, num_entities).
    sketch_matrix : Field, optional
        Field containing the sketch matrix.
    rank : int
        Rank of the output matrix fields_container.
    random_generator_seed : int, optional
        Value used as the seed for the random number
        generator. default = 0.
    mean : float, optional
        Mean value of the random numbers matrix.
        default = 0.0.
    standard_deviation : float, optional
        Standard deviation of the random numbers
        matrix. default = 1.0.
    othogonalized : bool, optional
        Orthogonalize matrix. default = true.
    power_iterations : int, optional
        Number of power iterations to perform. a
        larger number of iterations impact
        performance, but increase the
        accuracy. default = 0.

    Returns
    -------
    dataOut : FieldsContainer
        The output matrix is a 'fields_container';
        each field correspond to the
        multiplication of the sketch matrix
        by the original fields.
    sketch_matrix : Field
        Field containing the sketch matrix.
    shell_field : Field
        Empty field containing the shell of the
        original field for future
        reconstruction.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.compression.sketch_matrix()

    >>> # Make input connections
    >>> my_dataIn = dpf.FieldsContainer()
    >>> op.inputs.dataIn.connect(my_dataIn)
    >>> my_sketch_matrix = dpf.Field()
    >>> op.inputs.sketch_matrix.connect(my_sketch_matrix)
    >>> my_rank = int()
    >>> op.inputs.rank.connect(my_rank)
    >>> my_random_generator_seed = int()
    >>> op.inputs.random_generator_seed.connect(my_random_generator_seed)
    >>> my_mean = float()
    >>> op.inputs.mean.connect(my_mean)
    >>> my_standard_deviation = float()
    >>> op.inputs.standard_deviation.connect(my_standard_deviation)
    >>> my_othogonalized = bool()
    >>> op.inputs.othogonalized.connect(my_othogonalized)
    >>> my_power_iterations = int()
    >>> op.inputs.power_iterations.connect(my_power_iterations)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.compression.sketch_matrix(
    ...     dataIn=my_dataIn,
    ...     sketch_matrix=my_sketch_matrix,
    ...     rank=my_rank,
    ...     random_generator_seed=my_random_generator_seed,
    ...     mean=my_mean,
    ...     standard_deviation=my_standard_deviation,
    ...     othogonalized=my_othogonalized,
    ...     power_iterations=my_power_iterations,
    ... )

    >>> # Get output data
    >>> result_dataOut = op.outputs.dataOut()
    >>> result_sketch_matrix = op.outputs.sketch_matrix()
    >>> result_shell_field = op.outputs.shell_field()
    """

    def __init__(
        self,
        dataIn=None,
        sketch_matrix=None,
        rank=None,
        random_generator_seed=None,
        mean=None,
        standard_deviation=None,
        othogonalized=None,
        power_iterations=None,
        config=None,
        server=None,
    ):
        super().__init__(name="sketch_matrix_compress", config=config, server=server)
        self._inputs = InputsSketchMatrix(self)
        self._outputs = OutputsSketchMatrix(self)
        if dataIn is not None:
            self.inputs.dataIn.connect(dataIn)
        if sketch_matrix is not None:
            self.inputs.sketch_matrix.connect(sketch_matrix)
        if rank is not None:
            self.inputs.rank.connect(rank)
        if random_generator_seed is not None:
            self.inputs.random_generator_seed.connect(random_generator_seed)
        if mean is not None:
            self.inputs.mean.connect(mean)
        if standard_deviation is not None:
            self.inputs.standard_deviation.connect(standard_deviation)
        if othogonalized is not None:
            self.inputs.othogonalized.connect(othogonalized)
        if power_iterations is not None:
            self.inputs.power_iterations.connect(power_iterations)

    @staticmethod
    def _spec():
        description = """Compress fields container using an orthonormal randomized (Gaussian
            distribution) sketch matrix."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="dataIn",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fields container to be compressed. it is
        assumed that all fields have the same
        structure (scoping, num_entities).""",
                ),
                1: PinSpecification(
                    name="sketch_matrix",
                    type_names=["field"],
                    optional=True,
                    document="""Field containing the sketch matrix.""",
                ),
                2: PinSpecification(
                    name="rank",
                    type_names=["int32"],
                    optional=False,
                    document="""Rank of the output matrix fields_container.""",
                ),
                3: PinSpecification(
                    name="random_generator_seed",
                    type_names=["int32"],
                    optional=True,
                    document="""Value used as the seed for the random number
        generator. default = 0.""",
                ),
                4: PinSpecification(
                    name="mean",
                    type_names=["double"],
                    optional=True,
                    document="""Mean value of the random numbers matrix.
        default = 0.0.""",
                ),
                5: PinSpecification(
                    name="standard_deviation",
                    type_names=["double"],
                    optional=True,
                    document="""Standard deviation of the random numbers
        matrix. default = 1.0.""",
                ),
                6: PinSpecification(
                    name="othogonalized",
                    type_names=["bool"],
                    optional=True,
                    document="""Orthogonalize matrix. default = true.""",
                ),
                7: PinSpecification(
                    name="power_iterations",
                    type_names=["int32"],
                    optional=True,
                    document="""Number of power iterations to perform. a
        larger number of iterations impact
        performance, but increase the
        accuracy. default = 0.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="dataOut",
                    type_names=["fields_container"],
                    optional=False,
                    document="""The output matrix is a 'fields_container';
        each field correspond to the
        multiplication of the sketch matrix
        by the original fields.""",
                ),
                1: PinSpecification(
                    name="sketch_matrix",
                    type_names=["field"],
                    optional=False,
                    document="""Field containing the sketch matrix.""",
                ),
                2: PinSpecification(
                    name="shell_field",
                    type_names=["field"],
                    optional=False,
                    document="""Empty field containing the shell of the
        original field for future
        reconstruction.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="sketch_matrix_compress", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsSketchMatrix
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsSketchMatrix
        """
        return super().outputs


class InputsSketchMatrix(_Inputs):
    """Intermediate class used to connect user inputs to
    sketch_matrix operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.sketch_matrix()
    >>> my_dataIn = dpf.FieldsContainer()
    >>> op.inputs.dataIn.connect(my_dataIn)
    >>> my_sketch_matrix = dpf.Field()
    >>> op.inputs.sketch_matrix.connect(my_sketch_matrix)
    >>> my_rank = int()
    >>> op.inputs.rank.connect(my_rank)
    >>> my_random_generator_seed = int()
    >>> op.inputs.random_generator_seed.connect(my_random_generator_seed)
    >>> my_mean = float()
    >>> op.inputs.mean.connect(my_mean)
    >>> my_standard_deviation = float()
    >>> op.inputs.standard_deviation.connect(my_standard_deviation)
    >>> my_othogonalized = bool()
    >>> op.inputs.othogonalized.connect(my_othogonalized)
    >>> my_power_iterations = int()
    >>> op.inputs.power_iterations.connect(my_power_iterations)
    """

    def __init__(self, op: Operator):
        super().__init__(sketch_matrix._spec().inputs, op)
        self._dataIn = Input(sketch_matrix._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._dataIn)
        self._sketch_matrix = Input(sketch_matrix._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._sketch_matrix)
        self._rank = Input(sketch_matrix._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._rank)
        self._random_generator_seed = Input(
            sketch_matrix._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._random_generator_seed)
        self._mean = Input(sketch_matrix._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._mean)
        self._standard_deviation = Input(sketch_matrix._spec().input_pin(5), 5, op, -1)
        self._inputs.append(self._standard_deviation)
        self._othogonalized = Input(sketch_matrix._spec().input_pin(6), 6, op, -1)
        self._inputs.append(self._othogonalized)
        self._power_iterations = Input(sketch_matrix._spec().input_pin(7), 7, op, -1)
        self._inputs.append(self._power_iterations)

    @property
    def dataIn(self):
        """Allows to connect dataIn input to the operator.

        Fields container to be compressed. it is
        assumed that all fields have the same
        structure (scoping, num_entities).

        Parameters
        ----------
        my_dataIn : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> op.inputs.dataIn.connect(my_dataIn)
        >>> # or
        >>> op.inputs.dataIn(my_dataIn)
        """
        return self._dataIn

    @property
    def sketch_matrix(self):
        """Allows to connect sketch_matrix input to the operator.

        Field containing the sketch matrix.

        Parameters
        ----------
        my_sketch_matrix : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> op.inputs.sketch_matrix.connect(my_sketch_matrix)
        >>> # or
        >>> op.inputs.sketch_matrix(my_sketch_matrix)
        """
        return self._sketch_matrix

    @property
    def rank(self):
        """Allows to connect rank input to the operator.

        Rank of the output matrix fields_container.

        Parameters
        ----------
        my_rank : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> op.inputs.rank.connect(my_rank)
        >>> # or
        >>> op.inputs.rank(my_rank)
        """
        return self._rank

    @property
    def random_generator_seed(self):
        """Allows to connect random_generator_seed input to the operator.

        Value used as the seed for the random number
        generator. default = 0.

        Parameters
        ----------
        my_random_generator_seed : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> op.inputs.random_generator_seed.connect(my_random_generator_seed)
        >>> # or
        >>> op.inputs.random_generator_seed(my_random_generator_seed)
        """
        return self._random_generator_seed

    @property
    def mean(self):
        """Allows to connect mean input to the operator.

        Mean value of the random numbers matrix.
        default = 0.0.

        Parameters
        ----------
        my_mean : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> op.inputs.mean.connect(my_mean)
        >>> # or
        >>> op.inputs.mean(my_mean)
        """
        return self._mean

    @property
    def standard_deviation(self):
        """Allows to connect standard_deviation input to the operator.

        Standard deviation of the random numbers
        matrix. default = 1.0.

        Parameters
        ----------
        my_standard_deviation : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> op.inputs.standard_deviation.connect(my_standard_deviation)
        >>> # or
        >>> op.inputs.standard_deviation(my_standard_deviation)
        """
        return self._standard_deviation

    @property
    def othogonalized(self):
        """Allows to connect othogonalized input to the operator.

        Orthogonalize matrix. default = true.

        Parameters
        ----------
        my_othogonalized : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> op.inputs.othogonalized.connect(my_othogonalized)
        >>> # or
        >>> op.inputs.othogonalized(my_othogonalized)
        """
        return self._othogonalized

    @property
    def power_iterations(self):
        """Allows to connect power_iterations input to the operator.

        Number of power iterations to perform. a
        larger number of iterations impact
        performance, but increase the
        accuracy. default = 0.

        Parameters
        ----------
        my_power_iterations : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> op.inputs.power_iterations.connect(my_power_iterations)
        >>> # or
        >>> op.inputs.power_iterations(my_power_iterations)
        """
        return self._power_iterations


class OutputsSketchMatrix(_Outputs):
    """Intermediate class used to get outputs from
    sketch_matrix operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.sketch_matrix()
    >>> # Connect inputs : op.inputs. ...
    >>> result_dataOut = op.outputs.dataOut()
    >>> result_sketch_matrix = op.outputs.sketch_matrix()
    >>> result_shell_field = op.outputs.shell_field()
    """

    def __init__(self, op: Operator):
        super().__init__(sketch_matrix._spec().outputs, op)
        self._dataOut = Output(sketch_matrix._spec().output_pin(0), 0, op)
        self._outputs.append(self._dataOut)
        self._sketch_matrix = Output(sketch_matrix._spec().output_pin(1), 1, op)
        self._outputs.append(self._sketch_matrix)
        self._shell_field = Output(sketch_matrix._spec().output_pin(2), 2, op)
        self._outputs.append(self._shell_field)

    @property
    def dataOut(self):
        """Allows to get dataOut output of the operator

        Returns
        ----------
        my_dataOut : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> # Connect inputs : op.inputs. ...
        >>> result_dataOut = op.outputs.dataOut()
        """  # noqa: E501
        return self._dataOut

    @property
    def sketch_matrix(self):
        """Allows to get sketch_matrix output of the operator

        Returns
        ----------
        my_sketch_matrix : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> # Connect inputs : op.inputs. ...
        >>> result_sketch_matrix = op.outputs.sketch_matrix()
        """  # noqa: E501
        return self._sketch_matrix

    @property
    def shell_field(self):
        """Allows to get shell_field output of the operator

        Returns
        ----------
        my_shell_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix()
        >>> # Connect inputs : op.inputs. ...
        >>> result_shell_field = op.outputs.shell_field()
        """  # noqa: E501
        return self._shell_field
