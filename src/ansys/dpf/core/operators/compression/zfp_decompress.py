"""
zfp_decompress

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.outputs import _modify_output_spec_with_one_type
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class zfp_decompress(Operator):
    r"""zfp decompression using the information about compression written into
    the properties of the field(s)


    Parameters
    ----------
    dataIn: CustomTypeFieldsContainer
        custom type field container from zfp_compression operator to decompress

    Returns
    -------
    dataOut: Field or FieldsContainer
        the output entity is a field or a fields container; it contains decompressed data
    decompress_speed: float
        the output entity is a double, containing decompression speed (mb/sec)

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.compression.zfp_decompress()

    >>> # Make input connections
    >>> my_dataIn = dpf.CustomTypeFieldsContainer()
    >>> op.inputs.dataIn.connect(my_dataIn)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.compression.zfp_decompress(
    ...     dataIn=my_dataIn,
    ... )

    >>> # Get output data
    >>> result_dataOut = op.outputs.dataOut()
    >>> result_decompress_speed = op.outputs.decompress_speed()
    """

    def __init__(self, dataIn=None, config=None, server=None):
        super().__init__(name="zfp_decompress", config=config, server=server)
        self._inputs = InputsZfpDecompress(self)
        self._outputs = OutputsZfpDecompress(self)
        if dataIn is not None:
            self.inputs.dataIn.connect(dataIn)

    @staticmethod
    def _spec() -> Specification:
        description = r"""zfp decompression using the information about compression written into
the properties of the field(s)
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="dataIn",
                    type_names=["custom_type_fields_container"],
                    optional=False,
                    document=r"""custom type field container from zfp_compression operator to decompress""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="dataOut",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document=r"""the output entity is a field or a fields container; it contains decompressed data""",
                ),
                1: PinSpecification(
                    name="decompress_speed",
                    type_names=["double"],
                    optional=False,
                    document=r"""the output entity is a double, containing decompression speed (mb/sec)""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="zfp_decompress", server=server)

    @property
    def inputs(self) -> InputsZfpDecompress:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsZfpDecompress.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsZfpDecompress:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsZfpDecompress.
        """
        return super().outputs


class InputsZfpDecompress(_Inputs):
    """Intermediate class used to connect user inputs to
    zfp_decompress operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.zfp_decompress()
    >>> my_dataIn = dpf.CustomTypeFieldsContainer()
    >>> op.inputs.dataIn.connect(my_dataIn)
    """

    def __init__(self, op: Operator):
        super().__init__(zfp_decompress._spec().inputs, op)
        self._dataIn = Input(zfp_decompress._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._dataIn)

    @property
    def dataIn(self) -> Input:
        r"""Allows to connect dataIn input to the operator.

        custom type field container from zfp_compression operator to decompress

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.zfp_decompress()
        >>> op.inputs.dataIn.connect(my_dataIn)
        >>> # or
        >>> op.inputs.dataIn(my_dataIn)
        """
        return self._dataIn


class OutputsZfpDecompress(_Outputs):
    """Intermediate class used to get outputs from
    zfp_decompress operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.zfp_decompress()
    >>> # Connect inputs : op.inputs. ...
    >>> result_dataOut = op.outputs.dataOut()
    >>> result_decompress_speed = op.outputs.decompress_speed()
    """

    def __init__(self, op: Operator):
        super().__init__(zfp_decompress._spec().outputs, op)
        self.dataOut_as_field = Output(
            _modify_output_spec_with_one_type(
                zfp_decompress._spec().output_pin(0), "field"
            ),
            0,
            op,
        )
        self._outputs.append(self.dataOut_as_field)
        self.dataOut_as_fields_container = Output(
            _modify_output_spec_with_one_type(
                zfp_decompress._spec().output_pin(0), "fields_container"
            ),
            0,
            op,
        )
        self._outputs.append(self.dataOut_as_fields_container)
        self._decompress_speed = Output(zfp_decompress._spec().output_pin(1), 1, op)
        self._outputs.append(self._decompress_speed)

    @property
    def decompress_speed(self) -> Output:
        r"""Allows to get decompress_speed output of the operator

        the output entity is a double, containing decompression speed (mb/sec)

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.zfp_decompress()
        >>> # Get the output from op.outputs. ...
        >>> result_decompress_speed = op.outputs.decompress_speed()
        """
        return self._decompress_speed
