"""
apply_zfp
=========
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class apply_zfp(Operator):
    """Compressing input data using one of zfp compression algorithm modes.

    Parameters
    ----------
    dataIn : Field or FieldsContainer
        Field or fields container to be compressed
    mode : str or Char
        Zfp mode: fixed-rate ('r'), fixed-precision
        ('p'), fixed-accuracy ('a')
    mode_parameter : int or float
        Mode-corresponding parameter: rate (double) /
        precision (int) / accuracy (double)
    dim : int, optional
        Dimension (1d/2d/3d) for data organization
        before the compression (int; default:
        2)
    order : int, optional
        Xyz dimensions order, where x (row)
        corresponds to number of elementary
        data, y (col) - number of time steps,
        z - number of components (applicable
        only for 3d data) : 0=xyz, 1=yxz
        (int; default: 0)
    double_absthreshold : float, optional
        Double positive small value. all the values
        smaller than max(small value, max(vi)
        * relative threshold) are considered
        as zero values, (default value:
        1.0e-18).
    double_relthreshold : float, optional
        Double relative threshold. values smaller
        than (v1 - v2) < max(small value, v1
        * relativetol) are considered
        identical (default value: 1.0e-10).


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.compression.apply_zfp()

    >>> # Make input connections
    >>> my_dataIn = dpf.Field()
    >>> op.inputs.dataIn.connect(my_dataIn)
    >>> my_mode = str()
    >>> op.inputs.mode.connect(my_mode)
    >>> my_mode_parameter = int()
    >>> op.inputs.mode_parameter.connect(my_mode_parameter)
    >>> my_dim = int()
    >>> op.inputs.dim.connect(my_dim)
    >>> my_order = int()
    >>> op.inputs.order.connect(my_order)
    >>> my_double_absthreshold = float()
    >>> op.inputs.double_absthreshold.connect(my_double_absthreshold)
    >>> my_double_relthreshold = float()
    >>> op.inputs.double_relthreshold.connect(my_double_relthreshold)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.compression.apply_zfp(
    ...     dataIn=my_dataIn,
    ...     mode=my_mode,
    ...     mode_parameter=my_mode_parameter,
    ...     dim=my_dim,
    ...     order=my_order,
    ...     double_absthreshold=my_double_absthreshold,
    ...     double_relthreshold=my_double_relthreshold,
    ... )

    >>> # Get output data
    >>> result_compress_speed = op.outputs.compress_speed()
    >>> result_compress_ratio = op.outputs.compress_ratio()
    >>> result_dataOut = op.outputs.dataOut()
    """

    def __init__(
        self,
        dataIn=None,
        mode=None,
        mode_parameter=None,
        dim=None,
        order=None,
        double_absthreshold=None,
        double_relthreshold=None,
        config=None,
        server=None,
    ):
        super().__init__(name="zfp", config=config, server=server)
        self._inputs = InputsApplyZfp(self)
        self._outputs = OutputsApplyZfp(self)
        if dataIn is not None:
            self.inputs.dataIn.connect(dataIn)
        if mode is not None:
            self.inputs.mode.connect(mode)
        if mode_parameter is not None:
            self.inputs.mode_parameter.connect(mode_parameter)
        if dim is not None:
            self.inputs.dim.connect(dim)
        if order is not None:
            self.inputs.order.connect(order)
        if double_absthreshold is not None:
            self.inputs.double_absthreshold.connect(double_absthreshold)
        if double_relthreshold is not None:
            self.inputs.double_relthreshold.connect(double_relthreshold)

    @staticmethod
    def _spec():
        description = (
            """Compressing input data using one of zfp compression algorithm modes."""
        )
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="dataIn",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document="""Field or fields container to be compressed""",
                ),
                1: PinSpecification(
                    name="mode",
                    type_names=["string", "char"],
                    optional=False,
                    document="""Zfp mode: fixed-rate ('r'), fixed-precision
        ('p'), fixed-accuracy ('a')""",
                ),
                2: PinSpecification(
                    name="mode_parameter",
                    type_names=["int32", "double"],
                    optional=False,
                    document="""Mode-corresponding parameter: rate (double) /
        precision (int) / accuracy (double)""",
                ),
                3: PinSpecification(
                    name="dim",
                    type_names=["int32"],
                    optional=True,
                    document="""Dimension (1d/2d/3d) for data organization
        before the compression (int; default:
        2)""",
                ),
                4: PinSpecification(
                    name="order",
                    type_names=["int32"],
                    optional=True,
                    document="""Xyz dimensions order, where x (row)
        corresponds to number of elementary
        data, y (col) - number of time steps,
        z - number of components (applicable
        only for 3d data) : 0=xyz, 1=yxz
        (int; default: 0)""",
                ),
                5: PinSpecification(
                    name="double_absthreshold",
                    type_names=["double"],
                    optional=True,
                    document="""Double positive small value. all the values
        smaller than max(small value, max(vi)
        * relative threshold) are considered
        as zero values, (default value:
        1.0e-18).""",
                ),
                6: PinSpecification(
                    name="double_relthreshold",
                    type_names=["double"],
                    optional=True,
                    document="""Double relative threshold. values smaller
        than (v1 - v2) < max(small value, v1
        * relativetol) are considered
        identical (default value: 1.0e-10).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="compress_speed",
                    type_names=["double"],
                    optional=False,
                    document="""The output entity is a double, containing
        compression speed of the input data:
        for elementalnodal location -
        [elements/sec], for nodal location -
        [nodes/sec]""",
                ),
                1: PinSpecification(
                    name="compress_ratio",
                    type_names=["double"],
                    optional=False,
                    document="""The output entity is a double, containing
        compression rate = initial/compressed""",
                ),
                2: PinSpecification(
                    name="dataOut",
                    type_names=["custom_type_fields_container"],
                    optional=False,
                    document="""The output entity is a 'custom type field
        container';                     each
        output field containing compressed
        results corresponding to one
        component data (ie. input vector
        field/fc contains 3 components will
        give 3 output fields), this is not
        the case when input pin3 is set to 3,
        all components will be compressed
        into one field.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="zfp", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsApplyZfp
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsApplyZfp
        """
        return super().outputs


class InputsApplyZfp(_Inputs):
    """Intermediate class used to connect user inputs to
    apply_zfp operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.apply_zfp()
    >>> my_dataIn = dpf.Field()
    >>> op.inputs.dataIn.connect(my_dataIn)
    >>> my_mode = str()
    >>> op.inputs.mode.connect(my_mode)
    >>> my_mode_parameter = int()
    >>> op.inputs.mode_parameter.connect(my_mode_parameter)
    >>> my_dim = int()
    >>> op.inputs.dim.connect(my_dim)
    >>> my_order = int()
    >>> op.inputs.order.connect(my_order)
    >>> my_double_absthreshold = float()
    >>> op.inputs.double_absthreshold.connect(my_double_absthreshold)
    >>> my_double_relthreshold = float()
    >>> op.inputs.double_relthreshold.connect(my_double_relthreshold)
    """

    def __init__(self, op: Operator):
        super().__init__(apply_zfp._spec().inputs, op)
        self._dataIn = Input(apply_zfp._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._dataIn)
        self._mode = Input(apply_zfp._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._mode)
        self._mode_parameter = Input(apply_zfp._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._mode_parameter)
        self._dim = Input(apply_zfp._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._dim)
        self._order = Input(apply_zfp._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._order)
        self._double_absthreshold = Input(apply_zfp._spec().input_pin(5), 5, op, -1)
        self._inputs.append(self._double_absthreshold)
        self._double_relthreshold = Input(apply_zfp._spec().input_pin(6), 6, op, -1)
        self._inputs.append(self._double_relthreshold)

    @property
    def dataIn(self):
        """Allows to connect dataIn input to the operator.

        Field or fields container to be compressed

        Parameters
        ----------
        my_dataIn : Field or FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> op.inputs.dataIn.connect(my_dataIn)
        >>> # or
        >>> op.inputs.dataIn(my_dataIn)
        """
        return self._dataIn

    @property
    def mode(self):
        """Allows to connect mode input to the operator.

        Zfp mode: fixed-rate ('r'), fixed-precision
        ('p'), fixed-accuracy ('a')

        Parameters
        ----------
        my_mode : str or Char

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> op.inputs.mode.connect(my_mode)
        >>> # or
        >>> op.inputs.mode(my_mode)
        """
        return self._mode

    @property
    def mode_parameter(self):
        """Allows to connect mode_parameter input to the operator.

        Mode-corresponding parameter: rate (double) /
        precision (int) / accuracy (double)

        Parameters
        ----------
        my_mode_parameter : int or float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> op.inputs.mode_parameter.connect(my_mode_parameter)
        >>> # or
        >>> op.inputs.mode_parameter(my_mode_parameter)
        """
        return self._mode_parameter

    @property
    def dim(self):
        """Allows to connect dim input to the operator.

        Dimension (1d/2d/3d) for data organization
        before the compression (int; default:
        2)

        Parameters
        ----------
        my_dim : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> op.inputs.dim.connect(my_dim)
        >>> # or
        >>> op.inputs.dim(my_dim)
        """
        return self._dim

    @property
    def order(self):
        """Allows to connect order input to the operator.

        Xyz dimensions order, where x (row)
        corresponds to number of elementary
        data, y (col) - number of time steps,
        z - number of components (applicable
        only for 3d data) : 0=xyz, 1=yxz
        (int; default: 0)

        Parameters
        ----------
        my_order : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> op.inputs.order.connect(my_order)
        >>> # or
        >>> op.inputs.order(my_order)
        """
        return self._order

    @property
    def double_absthreshold(self):
        """Allows to connect double_absthreshold input to the operator.

        Double positive small value. all the values
        smaller than max(small value, max(vi)
        * relative threshold) are considered
        as zero values, (default value:
        1.0e-18).

        Parameters
        ----------
        my_double_absthreshold : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> op.inputs.double_absthreshold.connect(my_double_absthreshold)
        >>> # or
        >>> op.inputs.double_absthreshold(my_double_absthreshold)
        """
        return self._double_absthreshold

    @property
    def double_relthreshold(self):
        """Allows to connect double_relthreshold input to the operator.

        Double relative threshold. values smaller
        than (v1 - v2) < max(small value, v1
        * relativetol) are considered
        identical (default value: 1.0e-10).

        Parameters
        ----------
        my_double_relthreshold : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> op.inputs.double_relthreshold.connect(my_double_relthreshold)
        >>> # or
        >>> op.inputs.double_relthreshold(my_double_relthreshold)
        """
        return self._double_relthreshold


class OutputsApplyZfp(_Outputs):
    """Intermediate class used to get outputs from
    apply_zfp operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.apply_zfp()
    >>> # Connect inputs : op.inputs. ...
    >>> result_compress_speed = op.outputs.compress_speed()
    >>> result_compress_ratio = op.outputs.compress_ratio()
    >>> result_dataOut = op.outputs.dataOut()
    """

    def __init__(self, op: Operator):
        super().__init__(apply_zfp._spec().outputs, op)
        self._compress_speed = Output(apply_zfp._spec().output_pin(0), 0, op)
        self._outputs.append(self._compress_speed)
        self._compress_ratio = Output(apply_zfp._spec().output_pin(1), 1, op)
        self._outputs.append(self._compress_ratio)
        self._dataOut = Output(apply_zfp._spec().output_pin(2), 2, op)
        self._outputs.append(self._dataOut)

    @property
    def compress_speed(self):
        """Allows to get compress_speed output of the operator

        Returns
        ----------
        my_compress_speed : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> # Connect inputs : op.inputs. ...
        >>> result_compress_speed = op.outputs.compress_speed()
        """  # noqa: E501
        return self._compress_speed

    @property
    def compress_ratio(self):
        """Allows to get compress_ratio output of the operator

        Returns
        ----------
        my_compress_ratio : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> # Connect inputs : op.inputs. ...
        >>> result_compress_ratio = op.outputs.compress_ratio()
        """  # noqa: E501
        return self._compress_ratio

    @property
    def dataOut(self):
        """Allows to get dataOut output of the operator

        Returns
        ----------
        my_dataOut : CustomTypeFieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.apply_zfp()
        >>> # Connect inputs : op.inputs. ...
        >>> result_dataOut = op.outputs.dataOut()
        """  # noqa: E501
        return self._dataOut
