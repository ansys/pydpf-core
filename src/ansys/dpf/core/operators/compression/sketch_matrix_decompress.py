"""
sketch_matrix_decompress

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class sketch_matrix_decompress(Operator):
    r"""Decompress fields container using an orthonormal randomized (Gaussian
    distribution) sketch matrix.


    Parameters
    ----------
    dataIn: FieldsContainer
        Fields container to be decompressed. It is assumed that all fields have the same structure (scoping, num_entities).
    sketch_matrix: Field
        Field containing the sketch matrix.
    shell_field: Field
        Empty field containing the shell of the field of decompressed data.

    Returns
    -------
    dataOut: FieldsContainer
        the output matrix is a 'fields_container';                     each field correspond to the multiplication of the sketch matrix by the original fields.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.compression.sketch_matrix_decompress()

    >>> # Make input connections
    >>> my_dataIn = dpf.FieldsContainer()
    >>> op.inputs.dataIn.connect(my_dataIn)
    >>> my_sketch_matrix = dpf.Field()
    >>> op.inputs.sketch_matrix.connect(my_sketch_matrix)
    >>> my_shell_field = dpf.Field()
    >>> op.inputs.shell_field.connect(my_shell_field)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.compression.sketch_matrix_decompress(
    ...     dataIn=my_dataIn,
    ...     sketch_matrix=my_sketch_matrix,
    ...     shell_field=my_shell_field,
    ... )

    >>> # Get output data
    >>> result_dataOut = op.outputs.dataOut()
    """

    def __init__(
        self,
        dataIn=None,
        sketch_matrix=None,
        shell_field=None,
        config=None,
        server=None,
    ):
        super().__init__(name="sketch_matrix_decompress", config=config, server=server)
        self._inputs = InputsSketchMatrixDecompress(self)
        self._outputs = OutputsSketchMatrixDecompress(self)
        if dataIn is not None:
            self.inputs.dataIn.connect(dataIn)
        if sketch_matrix is not None:
            self.inputs.sketch_matrix.connect(sketch_matrix)
        if shell_field is not None:
            self.inputs.shell_field.connect(shell_field)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Decompress fields container using an orthonormal randomized (Gaussian
distribution) sketch matrix.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="dataIn",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Fields container to be decompressed. It is assumed that all fields have the same structure (scoping, num_entities).""",
                ),
                1: PinSpecification(
                    name="sketch_matrix",
                    type_names=["field"],
                    optional=False,
                    document=r"""Field containing the sketch matrix.""",
                ),
                2: PinSpecification(
                    name="shell_field",
                    type_names=["field"],
                    optional=False,
                    document=r"""Empty field containing the shell of the field of decompressed data.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="dataOut",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""the output matrix is a 'fields_container';                     each field correspond to the multiplication of the sketch matrix by the original fields.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="sketch_matrix_decompress", server=server)

    @property
    def inputs(self) -> InputsSketchMatrixDecompress:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsSketchMatrixDecompress.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsSketchMatrixDecompress:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsSketchMatrixDecompress.
        """
        return super().outputs


class InputsSketchMatrixDecompress(_Inputs):
    """Intermediate class used to connect user inputs to
    sketch_matrix_decompress operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.sketch_matrix_decompress()
    >>> my_dataIn = dpf.FieldsContainer()
    >>> op.inputs.dataIn.connect(my_dataIn)
    >>> my_sketch_matrix = dpf.Field()
    >>> op.inputs.sketch_matrix.connect(my_sketch_matrix)
    >>> my_shell_field = dpf.Field()
    >>> op.inputs.shell_field.connect(my_shell_field)
    """

    def __init__(self, op: Operator):
        super().__init__(sketch_matrix_decompress._spec().inputs, op)
        self._dataIn = Input(sketch_matrix_decompress._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._dataIn)
        self._sketch_matrix = Input(
            sketch_matrix_decompress._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._sketch_matrix)
        self._shell_field = Input(
            sketch_matrix_decompress._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._shell_field)

    @property
    def dataIn(self) -> Input:
        r"""Allows to connect dataIn input to the operator.

        Fields container to be decompressed. It is assumed that all fields have the same structure (scoping, num_entities).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix_decompress()
        >>> op.inputs.dataIn.connect(my_dataIn)
        >>> # or
        >>> op.inputs.dataIn(my_dataIn)
        """
        return self._dataIn

    @property
    def sketch_matrix(self) -> Input:
        r"""Allows to connect sketch_matrix input to the operator.

        Field containing the sketch matrix.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix_decompress()
        >>> op.inputs.sketch_matrix.connect(my_sketch_matrix)
        >>> # or
        >>> op.inputs.sketch_matrix(my_sketch_matrix)
        """
        return self._sketch_matrix

    @property
    def shell_field(self) -> Input:
        r"""Allows to connect shell_field input to the operator.

        Empty field containing the shell of the field of decompressed data.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix_decompress()
        >>> op.inputs.shell_field.connect(my_shell_field)
        >>> # or
        >>> op.inputs.shell_field(my_shell_field)
        """
        return self._shell_field


class OutputsSketchMatrixDecompress(_Outputs):
    """Intermediate class used to get outputs from
    sketch_matrix_decompress operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.sketch_matrix_decompress()
    >>> # Connect inputs : op.inputs. ...
    >>> result_dataOut = op.outputs.dataOut()
    """

    def __init__(self, op: Operator):
        super().__init__(sketch_matrix_decompress._spec().outputs, op)
        self._dataOut = Output(sketch_matrix_decompress._spec().output_pin(0), 0, op)
        self._outputs.append(self._dataOut)

    @property
    def dataOut(self) -> Output:
        r"""Allows to get dataOut output of the operator

        the output matrix is a 'fields_container';                     each field correspond to the multiplication of the sketch matrix by the original fields.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.sketch_matrix_decompress()
        >>> # Get the output from op.outputs. ...
        >>> result_dataOut = op.outputs.dataOut()
        """
        return self._dataOut
