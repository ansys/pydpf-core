"""
quantization_fc

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class quantization_fc(Operator):
    r"""Scales all the fields of a fields container to a given precision
    threshold, then rounds all the values to the unit.


    Parameters
    ----------
    input_fc: FieldsContainer
        Fields container to be quantized.
    threshold: float or Field or FieldsContainer
        Precision threshold desired.
        Case double : the threshold is applied on all the fields of the input fields container.
        Case field with one, numComp or input size values : the threshold is used for each field of the input fields container.
        Case fields container : the corresponding threshold field is found by matching label.


    Returns
    -------
    output_fc: FieldsContainer
        Quantized fields container.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.compression.quantization_fc()

    >>> # Make input connections
    >>> my_input_fc = dpf.FieldsContainer()
    >>> op.inputs.input_fc.connect(my_input_fc)
    >>> my_threshold = float()
    >>> op.inputs.threshold.connect(my_threshold)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.compression.quantization_fc(
    ...     input_fc=my_input_fc,
    ...     threshold=my_threshold,
    ... )

    >>> # Get output data
    >>> result_output_fc = op.outputs.output_fc()
    """

    def __init__(self, input_fc=None, threshold=None, config=None, server=None):
        super().__init__(name="quantization_fc", config=config, server=server)
        self._inputs = InputsQuantizationFc(self)
        self._outputs = OutputsQuantizationFc(self)
        if input_fc is not None:
            self.inputs.input_fc.connect(input_fc)
        if threshold is not None:
            self.inputs.threshold.connect(threshold)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Scales all the fields of a fields container to a given precision
threshold, then rounds all the values to the unit.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="input_fc",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Fields container to be quantized.""",
                ),
                1: PinSpecification(
                    name="threshold",
                    type_names=["double", "field", "fields_container"],
                    optional=False,
                    document=r"""Precision threshold desired.
Case double : the threshold is applied on all the fields of the input fields container.
Case field with one, numComp or input size values : the threshold is used for each field of the input fields container.
Case fields container : the corresponding threshold field is found by matching label.
""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="output_fc",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Quantized fields container.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="quantization_fc", server=server)

    @property
    def inputs(self) -> InputsQuantizationFc:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsQuantizationFc.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsQuantizationFc:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsQuantizationFc.
        """
        return super().outputs


class InputsQuantizationFc(_Inputs):
    """Intermediate class used to connect user inputs to
    quantization_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.quantization_fc()
    >>> my_input_fc = dpf.FieldsContainer()
    >>> op.inputs.input_fc.connect(my_input_fc)
    >>> my_threshold = float()
    >>> op.inputs.threshold.connect(my_threshold)
    """

    def __init__(self, op: Operator):
        super().__init__(quantization_fc._spec().inputs, op)
        self._input_fc = Input(quantization_fc._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._input_fc)
        self._threshold = Input(quantization_fc._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._threshold)

    @property
    def input_fc(self) -> Input:
        r"""Allows to connect input_fc input to the operator.

        Fields container to be quantized.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.quantization_fc()
        >>> op.inputs.input_fc.connect(my_input_fc)
        >>> # or
        >>> op.inputs.input_fc(my_input_fc)
        """
        return self._input_fc

    @property
    def threshold(self) -> Input:
        r"""Allows to connect threshold input to the operator.

        Precision threshold desired.
        Case double : the threshold is applied on all the fields of the input fields container.
        Case field with one, numComp or input size values : the threshold is used for each field of the input fields container.
        Case fields container : the corresponding threshold field is found by matching label.


        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.quantization_fc()
        >>> op.inputs.threshold.connect(my_threshold)
        >>> # or
        >>> op.inputs.threshold(my_threshold)
        """
        return self._threshold


class OutputsQuantizationFc(_Outputs):
    """Intermediate class used to get outputs from
    quantization_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.compression.quantization_fc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_output_fc = op.outputs.output_fc()
    """

    def __init__(self, op: Operator):
        super().__init__(quantization_fc._spec().outputs, op)
        self._output_fc = Output(quantization_fc._spec().output_pin(0), 0, op)
        self._outputs.append(self._output_fc)

    @property
    def output_fc(self) -> Output:
        r"""Allows to get output_fc output of the operator

        Quantized fields container.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.compression.quantization_fc()
        >>> # Get the output from op.outputs. ...
        >>> result_output_fc = op.outputs.output_fc()
        """
        return self._output_fc
