"""
change_shell_layers

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.outputs import _modify_output_spec_with_one_type
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class change_shell_layers(Operator):
    r"""Extract the requested shell layers from the input fields. If the fields
    contain only one layer and the permissive configuration input is set to
    true then it returns the input fields. If permissive configuration input
    is set to false, any change which should not be permitted wonâ€™t be
    achieved and the corresponding field in the output will be empty. If
    permissive configuration input is set to true (default), carefully check
    the result.


    Parameters
    ----------
    fields_container: FieldsContainer or Field
    e_shell_layer: int
        0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid.
    mesh: MeshedRegion or MeshesContainer, optional
        Mesh support of the input fields_container, in case it does not have one defined. If the fields_container contains mixed shell/solid results, the mesh is required (either by connecting this pin or in the support).
    merge: bool, optional
        For shell/solid mixed fields, group in the same field all solids and shells (false by default).

    Returns
    -------
    fields_container: FieldsContainer or Field

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.change_shell_layers()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_e_shell_layer = int()
    >>> op.inputs.e_shell_layer.connect(my_e_shell_layer)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_merge = bool()
    >>> op.inputs.merge.connect(my_merge)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.change_shell_layers(
    ...     fields_container=my_fields_container,
    ...     e_shell_layer=my_e_shell_layer,
    ...     mesh=my_mesh,
    ...     merge=my_merge,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        e_shell_layer=None,
        mesh=None,
        merge=None,
        config=None,
        server=None,
    ):
        super().__init__(name="change_shellLayers", config=config, server=server)
        self._inputs = InputsChangeShellLayers(self)
        self._outputs = OutputsChangeShellLayers(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if e_shell_layer is not None:
            self.inputs.e_shell_layer.connect(e_shell_layer)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)
        if merge is not None:
            self.inputs.merge.connect(merge)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Extract the requested shell layers from the input fields. If the fields
contain only one layer and the permissive configuration input is set to
true then it returns the input fields. If permissive configuration input
is set to false, any change which should not be permitted wonâ€™t be
achieved and the corresponding field in the output will be empty. If
permissive configuration input is set to true (default), carefully check
the result.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container", "field"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="e_shell_layer",
                    type_names=["int32", "enum dataProcessing::EShellLayers"],
                    optional=False,
                    document=r"""0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid.""",
                ),
                2: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region", "meshes_container"],
                    optional=True,
                    document=r"""Mesh support of the input fields_container, in case it does not have one defined. If the fields_container contains mixed shell/solid results, the mesh is required (either by connecting this pin or in the support).""",
                ),
                26: PinSpecification(
                    name="merge",
                    type_names=["bool"],
                    optional=True,
                    document=r"""For shell/solid mixed fields, group in the same field all solids and shells (false by default).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container", "field"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="change_shellLayers", server=server)

    @property
    def inputs(self) -> InputsChangeShellLayers:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsChangeShellLayers.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsChangeShellLayers:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsChangeShellLayers.
        """
        return super().outputs


class InputsChangeShellLayers(_Inputs):
    """Intermediate class used to connect user inputs to
    change_shell_layers operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.change_shell_layers()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_e_shell_layer = int()
    >>> op.inputs.e_shell_layer.connect(my_e_shell_layer)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_merge = bool()
    >>> op.inputs.merge.connect(my_merge)
    """

    def __init__(self, op: Operator):
        super().__init__(change_shell_layers._spec().inputs, op)
        self._fields_container = Input(
            change_shell_layers._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._e_shell_layer = Input(change_shell_layers._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._e_shell_layer)
        self._mesh = Input(change_shell_layers._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._mesh)
        self._merge = Input(change_shell_layers._spec().input_pin(26), 26, op, -1)
        self._inputs.append(self._merge)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.change_shell_layers()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def e_shell_layer(self) -> Input:
        r"""Allows to connect e_shell_layer input to the operator.

        0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.change_shell_layers()
        >>> op.inputs.e_shell_layer.connect(my_e_shell_layer)
        >>> # or
        >>> op.inputs.e_shell_layer(my_e_shell_layer)
        """
        return self._e_shell_layer

    @property
    def mesh(self) -> Input:
        r"""Allows to connect mesh input to the operator.

        Mesh support of the input fields_container, in case it does not have one defined. If the fields_container contains mixed shell/solid results, the mesh is required (either by connecting this pin or in the support).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.change_shell_layers()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh

    @property
    def merge(self) -> Input:
        r"""Allows to connect merge input to the operator.

        For shell/solid mixed fields, group in the same field all solids and shells (false by default).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.change_shell_layers()
        >>> op.inputs.merge.connect(my_merge)
        >>> # or
        >>> op.inputs.merge(my_merge)
        """
        return self._merge


class OutputsChangeShellLayers(_Outputs):
    """Intermediate class used to get outputs from
    change_shell_layers operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.change_shell_layers()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(change_shell_layers._spec().outputs, op)
        self.fields_container_as_fields_container = Output(
            _modify_output_spec_with_one_type(
                change_shell_layers._spec().output_pin(0), "fields_container"
            ),
            0,
            op,
        )
        self._outputs.append(self.fields_container_as_fields_container)
        self.fields_container_as_field = Output(
            _modify_output_spec_with_one_type(
                change_shell_layers._spec().output_pin(0), "field"
            ),
            0,
            op,
        )
        self._outputs.append(self.fields_container_as_field)
