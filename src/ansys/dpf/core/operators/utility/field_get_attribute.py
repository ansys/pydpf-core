"""
field_get_attribute
===================
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class field_get_attribute(Operator):
    """A Field in pin 0 and a property name (string) in pin 1 are expected in
    input.

    Parameters
    ----------
    field : Field
    property_name : str
        Accepted inputs are: 'time_freq_support'.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.field_get_attribute()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_property_name = str()
    >>> op.inputs.property_name.connect(my_property_name)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.field_get_attribute(
    ...     field=my_field,
    ...     property_name=my_property_name,
    ... )

    >>> # Get output data
    >>> result_property = op.outputs.property()
    """

    def __init__(self, field=None, property_name=None, config=None, server=None):
        super().__init__(name="field::get_attribute", config=config, server=server)
        self._inputs = InputsFieldGetAttribute(self)
        self._outputs = OutputsFieldGetAttribute(self)
        if field is not None:
            self.inputs.field.connect(field)
        if property_name is not None:
            self.inputs.property_name.connect(property_name)

    @staticmethod
    def _spec():
        description = """A Field in pin 0 and a property name (string) in pin 1 are expected in
            input."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="property_name",
                    type_names=["string"],
                    optional=False,
                    document="""Accepted inputs are: 'time_freq_support'.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="property",
                    type_names=["time_freq_support"],
                    optional=False,
                    document="""Property value.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="field::get_attribute", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsFieldGetAttribute
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsFieldGetAttribute
        """
        return super().outputs


class InputsFieldGetAttribute(_Inputs):
    """Intermediate class used to connect user inputs to
    field_get_attribute operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.field_get_attribute()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_property_name = str()
    >>> op.inputs.property_name.connect(my_property_name)
    """

    def __init__(self, op: Operator):
        super().__init__(field_get_attribute._spec().inputs, op)
        self._field = Input(field_get_attribute._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._property_name = Input(field_get_attribute._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._property_name)

    @property
    def field(self):
        """Allows to connect field input to the operator.

        Parameters
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.field_get_attribute()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def property_name(self):
        """Allows to connect property_name input to the operator.

        Accepted inputs are: 'time_freq_support'.

        Parameters
        ----------
        my_property_name : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.field_get_attribute()
        >>> op.inputs.property_name.connect(my_property_name)
        >>> # or
        >>> op.inputs.property_name(my_property_name)
        """
        return self._property_name


class OutputsFieldGetAttribute(_Outputs):
    """Intermediate class used to get outputs from
    field_get_attribute operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.field_get_attribute()
    >>> # Connect inputs : op.inputs. ...
    >>> result_property = op.outputs.property()
    """

    def __init__(self, op: Operator):
        super().__init__(field_get_attribute._spec().outputs, op)
        self._property = Output(field_get_attribute._spec().output_pin(0), 0, op)
        self._outputs.append(self._property)

    @property
    def property(self):
        """Allows to get property output of the operator

        Returns
        ----------
        my_property : TimeFreqSupport

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.field_get_attribute()
        >>> # Connect inputs : op.inputs. ...
        >>> result_property = op.outputs.property()
        """  # noqa: E501
        return self._property
