"""
merge_string_fields
===================
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class merge_string_fields(Operator):
    """Assembles a set of string fields into a unique one.

    Parameters
    ----------
    string_fields1 : StringField
        Either a a vector of string fields to merge
        or string fields from pin 0 to ...
    string_fields2 : StringField
        Either a a vector of string fields to merge
        or string fields from pin 0 to ...

    Returns
    -------
    string_field : StringField

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.merge_string_fields()

    >>> # Make input connections
    >>> my_string_fields1 = dpf.StringField()
    >>> op.inputs.string_fields1.connect(my_string_fields1)
    >>> my_string_fields2 = dpf.StringField()
    >>> op.inputs.string_fields2.connect(my_string_fields2)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.merge_string_fields(
    ...     string_fields1=my_string_fields1,
    ...     string_fields2=my_string_fields2,
    ... )

    >>> # Get output data
    >>> result_string_field = op.outputs.string_field()
    """

    def __init__(
        self, string_fields1=None, string_fields2=None, config=None, server=None
    ):
        super().__init__(name="merge::string_field", config=config, server=server)
        self._inputs = InputsMergeStringFields(self)
        self._outputs = OutputsMergeStringFields(self)
        if string_fields1 is not None:
            self.inputs.string_fields1.connect(string_fields1)
        if string_fields2 is not None:
            self.inputs.string_fields2.connect(string_fields2)

    @staticmethod
    def _spec():
        description = """Assembles a set of string fields into a unique one."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="string_fields",
                    type_names=["string_field"],
                    optional=False,
                    document="""Either a a vector of string fields to merge
        or string fields from pin 0 to ...""",
                ),
                1: PinSpecification(
                    name="string_fields",
                    type_names=["string_field"],
                    optional=False,
                    document="""Either a a vector of string fields to merge
        or string fields from pin 0 to ...""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="string_field",
                    type_names=["string_field"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="merge::string_field", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsMergeStringFields
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsMergeStringFields
        """
        return super().outputs


class InputsMergeStringFields(_Inputs):
    """Intermediate class used to connect user inputs to
    merge_string_fields operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.merge_string_fields()
    >>> my_string_fields1 = dpf.StringField()
    >>> op.inputs.string_fields1.connect(my_string_fields1)
    >>> my_string_fields2 = dpf.StringField()
    >>> op.inputs.string_fields2.connect(my_string_fields2)
    """

    def __init__(self, op: Operator):
        super().__init__(merge_string_fields._spec().inputs, op)
        self._string_fields1 = Input(merge_string_fields._spec().input_pin(0), 0, op, 0)
        self._inputs.append(self._string_fields1)
        self._string_fields2 = Input(merge_string_fields._spec().input_pin(1), 1, op, 1)
        self._inputs.append(self._string_fields2)

    @property
    def string_fields1(self):
        """Allows to connect string_fields1 input to the operator.

        Either a a vector of string fields to merge
        or string fields from pin 0 to ...

        Parameters
        ----------
        my_string_fields1 : StringField

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_string_fields()
        >>> op.inputs.string_fields1.connect(my_string_fields1)
        >>> # or
        >>> op.inputs.string_fields1(my_string_fields1)
        """
        return self._string_fields1

    @property
    def string_fields2(self):
        """Allows to connect string_fields2 input to the operator.

        Either a a vector of string fields to merge
        or string fields from pin 0 to ...

        Parameters
        ----------
        my_string_fields2 : StringField

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_string_fields()
        >>> op.inputs.string_fields2.connect(my_string_fields2)
        >>> # or
        >>> op.inputs.string_fields2(my_string_fields2)
        """
        return self._string_fields2


class OutputsMergeStringFields(_Outputs):
    """Intermediate class used to get outputs from
    merge_string_fields operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.merge_string_fields()
    >>> # Connect inputs : op.inputs. ...
    >>> result_string_field = op.outputs.string_field()
    """

    def __init__(self, op: Operator):
        super().__init__(merge_string_fields._spec().outputs, op)
        self._string_field = Output(merge_string_fields._spec().output_pin(0), 0, op)
        self._outputs.append(self._string_field)

    @property
    def string_field(self):
        """Allows to get string_field output of the operator

        Returns
        ----------
        my_string_field : StringField

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_string_fields()
        >>> # Connect inputs : op.inputs. ...
        >>> result_string_field = op.outputs.string_field()
        """  # noqa: E501
        return self._string_field
