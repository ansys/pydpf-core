"""
compute_time_scoping

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class compute_time_scoping(Operator):
    r"""Computes the time frequency scoping (made of set IDs) necessary to
    interpolate on a list of time or frequencies.


    Parameters
    ----------
    time_freq_values: float or Field or TimeFreqSupport
        List of frequencies or times needed. To specify load steps, put a field (and not a list) in input with a scoping located on "TimeFreq_steps".
    step: int, optional
    interpolation_type: int, optional
        1:ramped' or 2:stepped', default is ramped
    time_freq_support: TimeFreqSupport

    Returns
    -------
    scoping: Scoping
        time_scoping
    field: Field
        time_freq_values

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.compute_time_scoping()

    >>> # Make input connections
    >>> my_time_freq_values = float()
    >>> op.inputs.time_freq_values.connect(my_time_freq_values)
    >>> my_step = int()
    >>> op.inputs.step.connect(my_step)
    >>> my_interpolation_type = int()
    >>> op.inputs.interpolation_type.connect(my_interpolation_type)
    >>> my_time_freq_support = dpf.TimeFreqSupport()
    >>> op.inputs.time_freq_support.connect(my_time_freq_support)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.compute_time_scoping(
    ...     time_freq_values=my_time_freq_values,
    ...     step=my_step,
    ...     interpolation_type=my_interpolation_type,
    ...     time_freq_support=my_time_freq_support,
    ... )

    >>> # Get output data
    >>> result_scoping = op.outputs.scoping()
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self,
        time_freq_values=None,
        step=None,
        interpolation_type=None,
        time_freq_support=None,
        config=None,
        server=None,
    ):
        super().__init__(name="compute_time_scoping", config=config, server=server)
        self._inputs = InputsComputeTimeScoping(self)
        self._outputs = OutputsComputeTimeScoping(self)
        if time_freq_values is not None:
            self.inputs.time_freq_values.connect(time_freq_values)
        if step is not None:
            self.inputs.step.connect(step)
        if interpolation_type is not None:
            self.inputs.interpolation_type.connect(interpolation_type)
        if time_freq_support is not None:
            self.inputs.time_freq_support.connect(time_freq_support)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Computes the time frequency scoping (made of set IDs) necessary to
interpolate on a list of time or frequencies.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="time_freq_values",
                    type_names=[
                        "double",
                        "vector<double>",
                        "field",
                        "time_freq_support",
                    ],
                    optional=False,
                    document=r"""List of frequencies or times needed. To specify load steps, put a field (and not a list) in input with a scoping located on "TimeFreq_steps".""",
                ),
                2: PinSpecification(
                    name="step",
                    type_names=["int32"],
                    optional=True,
                    document=r"""""",
                ),
                4: PinSpecification(
                    name="interpolation_type",
                    type_names=["int32"],
                    optional=True,
                    document=r"""1:ramped' or 2:stepped', default is ramped""",
                ),
                8: PinSpecification(
                    name="time_freq_support",
                    type_names=["time_freq_support"],
                    optional=False,
                    document=r"""""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="scoping",
                    type_names=["scoping"],
                    optional=False,
                    document=r"""time_scoping""",
                ),
                1: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document=r"""time_freq_values""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="compute_time_scoping", server=server)

    @property
    def inputs(self) -> InputsComputeTimeScoping:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsComputeTimeScoping.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsComputeTimeScoping:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsComputeTimeScoping.
        """
        return super().outputs


class InputsComputeTimeScoping(_Inputs):
    """Intermediate class used to connect user inputs to
    compute_time_scoping operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.compute_time_scoping()
    >>> my_time_freq_values = float()
    >>> op.inputs.time_freq_values.connect(my_time_freq_values)
    >>> my_step = int()
    >>> op.inputs.step.connect(my_step)
    >>> my_interpolation_type = int()
    >>> op.inputs.interpolation_type.connect(my_interpolation_type)
    >>> my_time_freq_support = dpf.TimeFreqSupport()
    >>> op.inputs.time_freq_support.connect(my_time_freq_support)
    """

    def __init__(self, op: Operator):
        super().__init__(compute_time_scoping._spec().inputs, op)
        self._time_freq_values = Input(
            compute_time_scoping._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._time_freq_values)
        self._step = Input(compute_time_scoping._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._step)
        self._interpolation_type = Input(
            compute_time_scoping._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._interpolation_type)
        self._time_freq_support = Input(
            compute_time_scoping._spec().input_pin(8), 8, op, -1
        )
        self._inputs.append(self._time_freq_support)

    @property
    def time_freq_values(self) -> Input:
        r"""Allows to connect time_freq_values input to the operator.

        List of frequencies or times needed. To specify load steps, put a field (and not a list) in input with a scoping located on "TimeFreq_steps".

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.compute_time_scoping()
        >>> op.inputs.time_freq_values.connect(my_time_freq_values)
        >>> # or
        >>> op.inputs.time_freq_values(my_time_freq_values)
        """
        return self._time_freq_values

    @property
    def step(self) -> Input:
        r"""Allows to connect step input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.compute_time_scoping()
        >>> op.inputs.step.connect(my_step)
        >>> # or
        >>> op.inputs.step(my_step)
        """
        return self._step

    @property
    def interpolation_type(self) -> Input:
        r"""Allows to connect interpolation_type input to the operator.

        1:ramped' or 2:stepped', default is ramped

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.compute_time_scoping()
        >>> op.inputs.interpolation_type.connect(my_interpolation_type)
        >>> # or
        >>> op.inputs.interpolation_type(my_interpolation_type)
        """
        return self._interpolation_type

    @property
    def time_freq_support(self) -> Input:
        r"""Allows to connect time_freq_support input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.compute_time_scoping()
        >>> op.inputs.time_freq_support.connect(my_time_freq_support)
        >>> # or
        >>> op.inputs.time_freq_support(my_time_freq_support)
        """
        return self._time_freq_support


class OutputsComputeTimeScoping(_Outputs):
    """Intermediate class used to get outputs from
    compute_time_scoping operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.compute_time_scoping()
    >>> # Connect inputs : op.inputs. ...
    >>> result_scoping = op.outputs.scoping()
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(compute_time_scoping._spec().outputs, op)
        self._scoping = Output(compute_time_scoping._spec().output_pin(0), 0, op)
        self._outputs.append(self._scoping)
        self._field = Output(compute_time_scoping._spec().output_pin(1), 1, op)
        self._outputs.append(self._field)

    @property
    def scoping(self) -> Output:
        r"""Allows to get scoping output of the operator

        time_scoping

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.compute_time_scoping()
        >>> # Get the output from op.outputs. ...
        >>> result_scoping = op.outputs.scoping()
        """
        return self._scoping

    @property
    def field(self) -> Output:
        r"""Allows to get field output of the operator

        time_freq_values

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.compute_time_scoping()
        >>> # Get the output from op.outputs. ...
        >>> result_field = op.outputs.field()
        """
        return self._field
