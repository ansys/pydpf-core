"""
operator_changelog

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class operator_changelog(Operator):
    r"""Return a GenericDataContainer used to instantiate the Changelog of an
    operator based on its name.


    Parameters
    ----------
    operator_name: str
        Operator internal name.

    Returns
    -------
    changelog_gdc: GenericDataContainer
        GenericDataContainer used to instantiate a Changelog.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.operator_changelog()

    >>> # Make input connections
    >>> my_operator_name = str()
    >>> op.inputs.operator_name.connect(my_operator_name)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.operator_changelog(
    ...     operator_name=my_operator_name,
    ... )

    >>> # Get output data
    >>> result_changelog_gdc = op.outputs.changelog_gdc()
    """

    def __init__(self, operator_name=None, config=None, server=None):
        super().__init__(name="operator_changelog", config=config, server=server)
        self._inputs = InputsOperatorChangelog(self)
        self._outputs = OutputsOperatorChangelog(self)
        if operator_name is not None:
            self.inputs.operator_name.connect(operator_name)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Return a GenericDataContainer used to instantiate the Changelog of an
operator based on its name.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="operator_name",
                    type_names=["string"],
                    optional=False,
                    document=r"""Operator internal name.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="changelog_gdc",
                    type_names=["generic_data_container"],
                    optional=False,
                    document=r"""GenericDataContainer used to instantiate a Changelog.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="operator_changelog", server=server)

    @property
    def inputs(self) -> InputsOperatorChangelog:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsOperatorChangelog.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsOperatorChangelog:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsOperatorChangelog.
        """
        return super().outputs


class InputsOperatorChangelog(_Inputs):
    """Intermediate class used to connect user inputs to
    operator_changelog operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.operator_changelog()
    >>> my_operator_name = str()
    >>> op.inputs.operator_name.connect(my_operator_name)
    """

    def __init__(self, op: Operator):
        super().__init__(operator_changelog._spec().inputs, op)
        self._operator_name = Input(operator_changelog._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._operator_name)

    @property
    def operator_name(self) -> Input:
        r"""Allows to connect operator_name input to the operator.

        Operator internal name.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.operator_changelog()
        >>> op.inputs.operator_name.connect(my_operator_name)
        >>> # or
        >>> op.inputs.operator_name(my_operator_name)
        """
        return self._operator_name


class OutputsOperatorChangelog(_Outputs):
    """Intermediate class used to get outputs from
    operator_changelog operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.operator_changelog()
    >>> # Connect inputs : op.inputs. ...
    >>> result_changelog_gdc = op.outputs.changelog_gdc()
    """

    def __init__(self, op: Operator):
        super().__init__(operator_changelog._spec().outputs, op)
        self._changelog_gdc = Output(operator_changelog._spec().output_pin(0), 0, op)
        self._outputs.append(self._changelog_gdc)

    @property
    def changelog_gdc(self) -> Output:
        r"""Allows to get changelog_gdc output of the operator

        GenericDataContainer used to instantiate a Changelog.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.operator_changelog()
        >>> # Get the output from op.outputs. ...
        >>> result_changelog_gdc = op.outputs.changelog_gdc()
        """
        return self._changelog_gdc
