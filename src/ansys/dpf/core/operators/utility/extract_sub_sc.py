"""
extract_sub_sc

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class extract_sub_sc(Operator):
    r"""Creates a new scopings container with all the scopings corresponding to
    the label space in input 1. If pin 1 is not defined, pin 0 input will be
    copied to the output.


    Parameters
    ----------
    scopings_container: ScopingsContainer
        scopings_container
    label_space: dict or Scoping, optional
        Label space, or scoping defining the label space (scoping location), values to keep (scoping IDs)
    collapse_labels: bool, optional
        If set to true (default) the input label space (scoping location) is suppressed from the output scopings container, otherwise, label space is kept.

    Returns
    -------
    scopings_container: ScopingsContainer
        scopings_container

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.extract_sub_sc()

    >>> # Make input connections
    >>> my_scopings_container = dpf.ScopingsContainer()
    >>> op.inputs.scopings_container.connect(my_scopings_container)
    >>> my_label_space = dict()
    >>> op.inputs.label_space.connect(my_label_space)
    >>> my_collapse_labels = bool()
    >>> op.inputs.collapse_labels.connect(my_collapse_labels)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.extract_sub_sc(
    ...     scopings_container=my_scopings_container,
    ...     label_space=my_label_space,
    ...     collapse_labels=my_collapse_labels,
    ... )

    >>> # Get output data
    >>> result_scopings_container = op.outputs.scopings_container()
    """

    def __init__(
        self,
        scopings_container=None,
        label_space=None,
        collapse_labels=None,
        config=None,
        server=None,
    ):
        super().__init__(name="extract_sub_sc", config=config, server=server)
        self._inputs = InputsExtractSubSc(self)
        self._outputs = OutputsExtractSubSc(self)
        if scopings_container is not None:
            self.inputs.scopings_container.connect(scopings_container)
        if label_space is not None:
            self.inputs.label_space.connect(label_space)
        if collapse_labels is not None:
            self.inputs.collapse_labels.connect(collapse_labels)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Creates a new scopings container with all the scopings corresponding to
the label space in input 1. If pin 1 is not defined, pin 0 input will be
copied to the output.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="scopings_container",
                    type_names=["scopings_container"],
                    optional=False,
                    document=r"""scopings_container""",
                ),
                1: PinSpecification(
                    name="label_space",
                    type_names=["label_space", "scoping"],
                    optional=True,
                    document=r"""Label space, or scoping defining the label space (scoping location), values to keep (scoping IDs)""",
                ),
                2: PinSpecification(
                    name="collapse_labels",
                    type_names=["bool"],
                    optional=True,
                    document=r"""If set to true (default) the input label space (scoping location) is suppressed from the output scopings container, otherwise, label space is kept.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="scopings_container",
                    type_names=["scopings_container"],
                    optional=False,
                    document=r"""scopings_container""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="extract_sub_sc", server=server)

    @property
    def inputs(self) -> InputsExtractSubSc:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsExtractSubSc.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsExtractSubSc:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsExtractSubSc.
        """
        return super().outputs


class InputsExtractSubSc(_Inputs):
    """Intermediate class used to connect user inputs to
    extract_sub_sc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.extract_sub_sc()
    >>> my_scopings_container = dpf.ScopingsContainer()
    >>> op.inputs.scopings_container.connect(my_scopings_container)
    >>> my_label_space = dict()
    >>> op.inputs.label_space.connect(my_label_space)
    >>> my_collapse_labels = bool()
    >>> op.inputs.collapse_labels.connect(my_collapse_labels)
    """

    def __init__(self, op: Operator):
        super().__init__(extract_sub_sc._spec().inputs, op)
        self._scopings_container = Input(extract_sub_sc._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._scopings_container)
        self._label_space = Input(extract_sub_sc._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._label_space)
        self._collapse_labels = Input(extract_sub_sc._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._collapse_labels)

    @property
    def scopings_container(self) -> Input:
        r"""Allows to connect scopings_container input to the operator.

        scopings_container

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.extract_sub_sc()
        >>> op.inputs.scopings_container.connect(my_scopings_container)
        >>> # or
        >>> op.inputs.scopings_container(my_scopings_container)
        """
        return self._scopings_container

    @property
    def label_space(self) -> Input:
        r"""Allows to connect label_space input to the operator.

        Label space, or scoping defining the label space (scoping location), values to keep (scoping IDs)

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.extract_sub_sc()
        >>> op.inputs.label_space.connect(my_label_space)
        >>> # or
        >>> op.inputs.label_space(my_label_space)
        """
        return self._label_space

    @property
    def collapse_labels(self) -> Input:
        r"""Allows to connect collapse_labels input to the operator.

        If set to true (default) the input label space (scoping location) is suppressed from the output scopings container, otherwise, label space is kept.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.extract_sub_sc()
        >>> op.inputs.collapse_labels.connect(my_collapse_labels)
        >>> # or
        >>> op.inputs.collapse_labels(my_collapse_labels)
        """
        return self._collapse_labels


class OutputsExtractSubSc(_Outputs):
    """Intermediate class used to get outputs from
    extract_sub_sc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.extract_sub_sc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_scopings_container = op.outputs.scopings_container()
    """

    def __init__(self, op: Operator):
        super().__init__(extract_sub_sc._spec().outputs, op)
        self._scopings_container = Output(extract_sub_sc._spec().output_pin(0), 0, op)
        self._outputs.append(self._scopings_container)

    @property
    def scopings_container(self) -> Output:
        r"""Allows to get scopings_container output of the operator

        scopings_container

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.extract_sub_sc()
        >>> # Get the output from op.outputs. ...
        >>> result_scopings_container = op.outputs.scopings_container()
        """
        return self._scopings_container
