"""
multiply_fields_containers

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class multiply_fields_containers(Operator):
    r"""Multiply two fields containers with only labels as time and/or complex
    using dgemm() for real, and zgeem for complex: fcC=fcA*fcB.Matrices for
    both fcA and fcB represents rows as data and columns as a time step


    Parameters
    ----------
    is_output_custom: bool
        If true, output will be a a custom container, otherwise a reconstructed fields_container. Default is false.
    container_A: FieldsContainer
        It is assumed that the first container (fcA).
    column_label_A: str, optional
        label to use as combined columns from the container A (combined column fields must have the same scoping). Default is none.
    container_B: FieldsContainer
        It is assumed that the second container (fcB).
    column_label_B: str, optional
        label to use as combined columns from the container B (combined column fields must have the same scoping). Default is none.
    container_incremental: FieldsContainer, optional
        If a non empty fields container is introduced, it will be modified inplace (and sent to the output) to add the contributionof the requested expansion.It is required that the label spaces produced from the multiplication are the same as the incremental ones.

    Returns
    -------
    output: FieldsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.multiply_fields_containers()

    >>> # Make input connections
    >>> my_is_output_custom = bool()
    >>> op.inputs.is_output_custom.connect(my_is_output_custom)
    >>> my_container_A = dpf.FieldsContainer()
    >>> op.inputs.container_A.connect(my_container_A)
    >>> my_column_label_A = str()
    >>> op.inputs.column_label_A.connect(my_column_label_A)
    >>> my_container_B = dpf.FieldsContainer()
    >>> op.inputs.container_B.connect(my_container_B)
    >>> my_column_label_B = str()
    >>> op.inputs.column_label_B.connect(my_column_label_B)
    >>> my_container_incremental = dpf.FieldsContainer()
    >>> op.inputs.container_incremental.connect(my_container_incremental)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.multiply_fields_containers(
    ...     is_output_custom=my_is_output_custom,
    ...     container_A=my_container_A,
    ...     column_label_A=my_column_label_A,
    ...     container_B=my_container_B,
    ...     column_label_B=my_column_label_B,
    ...     container_incremental=my_container_incremental,
    ... )

    >>> # Get output data
    >>> result_output = op.outputs.output()
    """

    def __init__(
        self,
        is_output_custom=None,
        container_A=None,
        column_label_A=None,
        container_B=None,
        column_label_B=None,
        container_incremental=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="multiply_fields_containers", config=config, server=server
        )
        self._inputs = InputsMultiplyFieldsContainers(self)
        self._outputs = OutputsMultiplyFieldsContainers(self)
        if is_output_custom is not None:
            self.inputs.is_output_custom.connect(is_output_custom)
        if container_A is not None:
            self.inputs.container_A.connect(container_A)
        if column_label_A is not None:
            self.inputs.column_label_A.connect(column_label_A)
        if container_B is not None:
            self.inputs.container_B.connect(container_B)
        if column_label_B is not None:
            self.inputs.column_label_B.connect(column_label_B)
        if container_incremental is not None:
            self.inputs.container_incremental.connect(container_incremental)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Multiply two fields containers with only labels as time and/or complex
using dgemm() for real, and zgeem for complex: fcC=fcA*fcB.Matrices for
both fcA and fcB represents rows as data and columns as a time step
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                -1: PinSpecification(
                    name="is_output_custom",
                    type_names=["bool"],
                    optional=False,
                    document=r"""If true, output will be a a custom container, otherwise a reconstructed fields_container. Default is false.""",
                ),
                0: PinSpecification(
                    name="container_A",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""It is assumed that the first container (fcA).""",
                ),
                1: PinSpecification(
                    name="column_label_A",
                    type_names=["string"],
                    optional=True,
                    document=r"""label to use as combined columns from the container A (combined column fields must have the same scoping). Default is none.""",
                ),
                2: PinSpecification(
                    name="container_B",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""It is assumed that the second container (fcB).""",
                ),
                3: PinSpecification(
                    name="column_label_B",
                    type_names=["string"],
                    optional=True,
                    document=r"""label to use as combined columns from the container B (combined column fields must have the same scoping). Default is none.""",
                ),
                4: PinSpecification(
                    name="container_incremental",
                    type_names=["fields_container"],
                    optional=True,
                    document=r"""If a non empty fields container is introduced, it will be modified inplace (and sent to the output) to add the contributionof the requested expansion.It is required that the label spaces produced from the multiplication are the same as the incremental ones.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="output",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="multiply_fields_containers", server=server)

    @property
    def inputs(self) -> InputsMultiplyFieldsContainers:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsMultiplyFieldsContainers.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsMultiplyFieldsContainers:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsMultiplyFieldsContainers.
        """
        return super().outputs


class InputsMultiplyFieldsContainers(_Inputs):
    """Intermediate class used to connect user inputs to
    multiply_fields_containers operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.multiply_fields_containers()
    >>> my_is_output_custom = bool()
    >>> op.inputs.is_output_custom.connect(my_is_output_custom)
    >>> my_container_A = dpf.FieldsContainer()
    >>> op.inputs.container_A.connect(my_container_A)
    >>> my_column_label_A = str()
    >>> op.inputs.column_label_A.connect(my_column_label_A)
    >>> my_container_B = dpf.FieldsContainer()
    >>> op.inputs.container_B.connect(my_container_B)
    >>> my_column_label_B = str()
    >>> op.inputs.column_label_B.connect(my_column_label_B)
    >>> my_container_incremental = dpf.FieldsContainer()
    >>> op.inputs.container_incremental.connect(my_container_incremental)
    """

    def __init__(self, op: Operator):
        super().__init__(multiply_fields_containers._spec().inputs, op)
        self._is_output_custom = Input(
            multiply_fields_containers._spec().input_pin(-1), -1, op, -1
        )
        self._inputs.append(self._is_output_custom)
        self._container_A = Input(
            multiply_fields_containers._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._container_A)
        self._column_label_A = Input(
            multiply_fields_containers._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._column_label_A)
        self._container_B = Input(
            multiply_fields_containers._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._container_B)
        self._column_label_B = Input(
            multiply_fields_containers._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._column_label_B)
        self._container_incremental = Input(
            multiply_fields_containers._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._container_incremental)

    @property
    def is_output_custom(self) -> Input:
        r"""Allows to connect is_output_custom input to the operator.

        If true, output will be a a custom container, otherwise a reconstructed fields_container. Default is false.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.multiply_fields_containers()
        >>> op.inputs.is_output_custom.connect(my_is_output_custom)
        >>> # or
        >>> op.inputs.is_output_custom(my_is_output_custom)
        """
        return self._is_output_custom

    @property
    def container_A(self) -> Input:
        r"""Allows to connect container_A input to the operator.

        It is assumed that the first container (fcA).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.multiply_fields_containers()
        >>> op.inputs.container_A.connect(my_container_A)
        >>> # or
        >>> op.inputs.container_A(my_container_A)
        """
        return self._container_A

    @property
    def column_label_A(self) -> Input:
        r"""Allows to connect column_label_A input to the operator.

        label to use as combined columns from the container A (combined column fields must have the same scoping). Default is none.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.multiply_fields_containers()
        >>> op.inputs.column_label_A.connect(my_column_label_A)
        >>> # or
        >>> op.inputs.column_label_A(my_column_label_A)
        """
        return self._column_label_A

    @property
    def container_B(self) -> Input:
        r"""Allows to connect container_B input to the operator.

        It is assumed that the second container (fcB).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.multiply_fields_containers()
        >>> op.inputs.container_B.connect(my_container_B)
        >>> # or
        >>> op.inputs.container_B(my_container_B)
        """
        return self._container_B

    @property
    def column_label_B(self) -> Input:
        r"""Allows to connect column_label_B input to the operator.

        label to use as combined columns from the container B (combined column fields must have the same scoping). Default is none.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.multiply_fields_containers()
        >>> op.inputs.column_label_B.connect(my_column_label_B)
        >>> # or
        >>> op.inputs.column_label_B(my_column_label_B)
        """
        return self._column_label_B

    @property
    def container_incremental(self) -> Input:
        r"""Allows to connect container_incremental input to the operator.

        If a non empty fields container is introduced, it will be modified inplace (and sent to the output) to add the contributionof the requested expansion.It is required that the label spaces produced from the multiplication are the same as the incremental ones.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.multiply_fields_containers()
        >>> op.inputs.container_incremental.connect(my_container_incremental)
        >>> # or
        >>> op.inputs.container_incremental(my_container_incremental)
        """
        return self._container_incremental


class OutputsMultiplyFieldsContainers(_Outputs):
    """Intermediate class used to get outputs from
    multiply_fields_containers operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.multiply_fields_containers()
    >>> # Connect inputs : op.inputs. ...
    >>> result_output = op.outputs.output()
    """

    def __init__(self, op: Operator):
        super().__init__(multiply_fields_containers._spec().outputs, op)
        self._output = Output(multiply_fields_containers._spec().output_pin(0), 0, op)
        self._outputs.append(self._output)

    @property
    def output(self) -> Output:
        r"""Allows to get output output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.multiply_fields_containers()
        >>> # Get the output from op.outputs. ...
        >>> result_output = op.outputs.output()
        """
        return self._output
