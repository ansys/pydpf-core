"""
ints_to_scoping

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class ints_to_scoping(Operator):
    r"""take a int or a vector of int and transform it in a one entity field of
    location “numeric”.


    Parameters
    ----------
    int_or_vector_int: int or Scoping
        int or single value scoping or vector of int
    location: str, optional
    upper_bound: int or Scoping, optional
        Define the upper bound to create a scoping that will contain a range from the single value input in pin 0 to the upper bound defined in this pin.

    Returns
    -------
    scoping: Scoping

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.ints_to_scoping()

    >>> # Make input connections
    >>> my_int_or_vector_int = int()
    >>> op.inputs.int_or_vector_int.connect(my_int_or_vector_int)
    >>> my_location = str()
    >>> op.inputs.location.connect(my_location)
    >>> my_upper_bound = int()
    >>> op.inputs.upper_bound.connect(my_upper_bound)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.ints_to_scoping(
    ...     int_or_vector_int=my_int_or_vector_int,
    ...     location=my_location,
    ...     upper_bound=my_upper_bound,
    ... )

    >>> # Get output data
    >>> result_scoping = op.outputs.scoping()
    """

    def __init__(
        self,
        int_or_vector_int=None,
        location=None,
        upper_bound=None,
        config=None,
        server=None,
    ):
        super().__init__(name="scopingify", config=config, server=server)
        self._inputs = InputsIntsToScoping(self)
        self._outputs = OutputsIntsToScoping(self)
        if int_or_vector_int is not None:
            self.inputs.int_or_vector_int.connect(int_or_vector_int)
        if location is not None:
            self.inputs.location.connect(location)
        if upper_bound is not None:
            self.inputs.upper_bound.connect(upper_bound)

    @staticmethod
    def _spec() -> Specification:
        description = r"""take a int or a vector of int and transform it in a one entity field of
location “numeric”.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="int_or_vector_int",
                    type_names=["int32", "vector<int32>", "scoping"],
                    optional=False,
                    document=r"""int or single value scoping or vector of int""",
                ),
                1: PinSpecification(
                    name="location",
                    type_names=["string"],
                    optional=True,
                    document=r"""""",
                ),
                2: PinSpecification(
                    name="upper_bound",
                    type_names=["int32", "scoping"],
                    optional=True,
                    document=r"""Define the upper bound to create a scoping that will contain a range from the single value input in pin 0 to the upper bound defined in this pin.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="scoping",
                    type_names=["scoping"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="scopingify", server=server)

    @property
    def inputs(self) -> InputsIntsToScoping:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsIntsToScoping.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsIntsToScoping:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsIntsToScoping.
        """
        return super().outputs


class InputsIntsToScoping(_Inputs):
    """Intermediate class used to connect user inputs to
    ints_to_scoping operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.ints_to_scoping()
    >>> my_int_or_vector_int = int()
    >>> op.inputs.int_or_vector_int.connect(my_int_or_vector_int)
    >>> my_location = str()
    >>> op.inputs.location.connect(my_location)
    >>> my_upper_bound = int()
    >>> op.inputs.upper_bound.connect(my_upper_bound)
    """

    def __init__(self, op: Operator):
        super().__init__(ints_to_scoping._spec().inputs, op)
        self._int_or_vector_int = Input(ints_to_scoping._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._int_or_vector_int)
        self._location = Input(ints_to_scoping._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._location)
        self._upper_bound = Input(ints_to_scoping._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._upper_bound)

    @property
    def int_or_vector_int(self) -> Input:
        r"""Allows to connect int_or_vector_int input to the operator.

        int or single value scoping or vector of int

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.ints_to_scoping()
        >>> op.inputs.int_or_vector_int.connect(my_int_or_vector_int)
        >>> # or
        >>> op.inputs.int_or_vector_int(my_int_or_vector_int)
        """
        return self._int_or_vector_int

    @property
    def location(self) -> Input:
        r"""Allows to connect location input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.ints_to_scoping()
        >>> op.inputs.location.connect(my_location)
        >>> # or
        >>> op.inputs.location(my_location)
        """
        return self._location

    @property
    def upper_bound(self) -> Input:
        r"""Allows to connect upper_bound input to the operator.

        Define the upper bound to create a scoping that will contain a range from the single value input in pin 0 to the upper bound defined in this pin.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.ints_to_scoping()
        >>> op.inputs.upper_bound.connect(my_upper_bound)
        >>> # or
        >>> op.inputs.upper_bound(my_upper_bound)
        """
        return self._upper_bound


class OutputsIntsToScoping(_Outputs):
    """Intermediate class used to get outputs from
    ints_to_scoping operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.ints_to_scoping()
    >>> # Connect inputs : op.inputs. ...
    >>> result_scoping = op.outputs.scoping()
    """

    def __init__(self, op: Operator):
        super().__init__(ints_to_scoping._spec().outputs, op)
        self._scoping = Output(ints_to_scoping._spec().output_pin(0), 0, op)
        self._outputs.append(self._scoping)

    @property
    def scoping(self) -> Output:
        r"""Allows to get scoping output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.ints_to_scoping()
        >>> # Get the output from op.outputs. ...
        >>> result_scoping = op.outputs.scoping()
        """
        return self._scoping
