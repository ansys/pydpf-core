"""
merge_fields_by_label

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class merge_fields_by_label(Operator):
    r"""Merges the fields of a fields container that share the same label value.


    Parameters
    ----------
    fields_container: FieldsContainer
    label: str
        Label identifier that should be merged.
    merged_field_support: AbstractFieldSupport, optional
        The FieldsContainer's support that has already been merged.
    sum_merge: bool, optional
        Default is false. If true, redundant quantities are summed instead of being ignored.

    Returns
    -------
    fields_container: FieldsContainer
    merged_field_support: AbstractFieldSupport

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.merge_fields_by_label()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_label = str()
    >>> op.inputs.label.connect(my_label)
    >>> my_merged_field_support = dpf.AbstractFieldSupport()
    >>> op.inputs.merged_field_support.connect(my_merged_field_support)
    >>> my_sum_merge = bool()
    >>> op.inputs.sum_merge.connect(my_sum_merge)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.merge_fields_by_label(
    ...     fields_container=my_fields_container,
    ...     label=my_label,
    ...     merged_field_support=my_merged_field_support,
    ...     sum_merge=my_sum_merge,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    >>> result_merged_field_support = op.outputs.merged_field_support()
    """

    def __init__(
        self,
        fields_container=None,
        label=None,
        merged_field_support=None,
        sum_merge=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="merge::fields_container_label", config=config, server=server
        )
        self._inputs = InputsMergeFieldsByLabel(self)
        self._outputs = OutputsMergeFieldsByLabel(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if label is not None:
            self.inputs.label.connect(label)
        if merged_field_support is not None:
            self.inputs.merged_field_support.connect(merged_field_support)
        if sum_merge is not None:
            self.inputs.sum_merge.connect(sum_merge)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Merges the fields of a fields container that share the same label value.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="label",
                    type_names=["string"],
                    optional=False,
                    document=r"""Label identifier that should be merged.""",
                ),
                2: PinSpecification(
                    name="merged_field_support",
                    type_names=["abstract_field_support"],
                    optional=True,
                    document=r"""The FieldsContainer's support that has already been merged.""",
                ),
                3: PinSpecification(
                    name="sum_merge",
                    type_names=["bool"],
                    optional=True,
                    document=r"""Default is false. If true, redundant quantities are summed instead of being ignored.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="merged_field_support",
                    type_names=["abstract_field_support"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(
            name="merge::fields_container_label", server=server
        )

    @property
    def inputs(self) -> InputsMergeFieldsByLabel:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsMergeFieldsByLabel.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsMergeFieldsByLabel:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsMergeFieldsByLabel.
        """
        return super().outputs


class InputsMergeFieldsByLabel(_Inputs):
    """Intermediate class used to connect user inputs to
    merge_fields_by_label operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.merge_fields_by_label()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_label = str()
    >>> op.inputs.label.connect(my_label)
    >>> my_merged_field_support = dpf.AbstractFieldSupport()
    >>> op.inputs.merged_field_support.connect(my_merged_field_support)
    >>> my_sum_merge = bool()
    >>> op.inputs.sum_merge.connect(my_sum_merge)
    """

    def __init__(self, op: Operator):
        super().__init__(merge_fields_by_label._spec().inputs, op)
        self._fields_container = Input(
            merge_fields_by_label._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._label = Input(merge_fields_by_label._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._label)
        self._merged_field_support = Input(
            merge_fields_by_label._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._merged_field_support)
        self._sum_merge = Input(merge_fields_by_label._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._sum_merge)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_fields_by_label()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def label(self) -> Input:
        r"""Allows to connect label input to the operator.

        Label identifier that should be merged.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_fields_by_label()
        >>> op.inputs.label.connect(my_label)
        >>> # or
        >>> op.inputs.label(my_label)
        """
        return self._label

    @property
    def merged_field_support(self) -> Input:
        r"""Allows to connect merged_field_support input to the operator.

        The FieldsContainer's support that has already been merged.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_fields_by_label()
        >>> op.inputs.merged_field_support.connect(my_merged_field_support)
        >>> # or
        >>> op.inputs.merged_field_support(my_merged_field_support)
        """
        return self._merged_field_support

    @property
    def sum_merge(self) -> Input:
        r"""Allows to connect sum_merge input to the operator.

        Default is false. If true, redundant quantities are summed instead of being ignored.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_fields_by_label()
        >>> op.inputs.sum_merge.connect(my_sum_merge)
        >>> # or
        >>> op.inputs.sum_merge(my_sum_merge)
        """
        return self._sum_merge


class OutputsMergeFieldsByLabel(_Outputs):
    """Intermediate class used to get outputs from
    merge_fields_by_label operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.merge_fields_by_label()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    >>> result_merged_field_support = op.outputs.merged_field_support()
    """

    def __init__(self, op: Operator):
        super().__init__(merge_fields_by_label._spec().outputs, op)
        self._fields_container = Output(
            merge_fields_by_label._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._fields_container)
        self._merged_field_support = Output(
            merge_fields_by_label._spec().output_pin(1), 1, op
        )
        self._outputs.append(self._merged_field_support)

    @property
    def fields_container(self) -> Output:
        r"""Allows to get fields_container output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_fields_by_label()
        >>> # Get the output from op.outputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """
        return self._fields_container

    @property
    def merged_field_support(self) -> Output:
        r"""Allows to get merged_field_support output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.merge_fields_by_label()
        >>> # Get the output from op.outputs. ...
        >>> result_merged_field_support = op.outputs.merged_field_support()
        """
        return self._merged_field_support
