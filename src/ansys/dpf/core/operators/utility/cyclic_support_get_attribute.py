"""
cyclic_support_get_attribute

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.outputs import _modify_output_spec_with_one_type
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class cyclic_support_get_attribute(Operator):
    r"""A CyclicSupport in pin 0 and a property name (string) in pin 1 are
    expected in input.


    Parameters
    ----------
    cyclic_support: CyclicSupport
    property_name: str
        Accepted inputs are: 'element_duplicate_offset' and 'node_duplicate_offset' (returns int).

    Returns
    -------
    property: str or int
        Property value.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.cyclic_support_get_attribute()

    >>> # Make input connections
    >>> my_cyclic_support = dpf.CyclicSupport()
    >>> op.inputs.cyclic_support.connect(my_cyclic_support)
    >>> my_property_name = str()
    >>> op.inputs.property_name.connect(my_property_name)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.cyclic_support_get_attribute(
    ...     cyclic_support=my_cyclic_support,
    ...     property_name=my_property_name,
    ... )

    >>> # Get output data
    >>> result_property = op.outputs.property()
    """

    def __init__(
        self, cyclic_support=None, property_name=None, config=None, server=None
    ):
        super().__init__(
            name="cyclic_support::get_attribute", config=config, server=server
        )
        self._inputs = InputsCyclicSupportGetAttribute(self)
        self._outputs = OutputsCyclicSupportGetAttribute(self)
        if cyclic_support is not None:
            self.inputs.cyclic_support.connect(cyclic_support)
        if property_name is not None:
            self.inputs.property_name.connect(property_name)

    @staticmethod
    def _spec() -> Specification:
        description = r"""A CyclicSupport in pin 0 and a property name (string) in pin 1 are
expected in input.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="cyclic_support",
                    type_names=["cyclic_support"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="property_name",
                    type_names=["string"],
                    optional=False,
                    document=r"""Accepted inputs are: 'element_duplicate_offset' and 'node_duplicate_offset' (returns int).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="property",
                    type_names=["string", "int32"],
                    optional=False,
                    document=r"""Property value.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(
            name="cyclic_support::get_attribute", server=server
        )

    @property
    def inputs(self) -> InputsCyclicSupportGetAttribute:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsCyclicSupportGetAttribute.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsCyclicSupportGetAttribute:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsCyclicSupportGetAttribute.
        """
        return super().outputs


class InputsCyclicSupportGetAttribute(_Inputs):
    """Intermediate class used to connect user inputs to
    cyclic_support_get_attribute operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.cyclic_support_get_attribute()
    >>> my_cyclic_support = dpf.CyclicSupport()
    >>> op.inputs.cyclic_support.connect(my_cyclic_support)
    >>> my_property_name = str()
    >>> op.inputs.property_name.connect(my_property_name)
    """

    def __init__(self, op: Operator):
        super().__init__(cyclic_support_get_attribute._spec().inputs, op)
        self._cyclic_support = Input(
            cyclic_support_get_attribute._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._cyclic_support)
        self._property_name = Input(
            cyclic_support_get_attribute._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._property_name)

    @property
    def cyclic_support(self) -> Input:
        r"""Allows to connect cyclic_support input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.cyclic_support_get_attribute()
        >>> op.inputs.cyclic_support.connect(my_cyclic_support)
        >>> # or
        >>> op.inputs.cyclic_support(my_cyclic_support)
        """
        return self._cyclic_support

    @property
    def property_name(self) -> Input:
        r"""Allows to connect property_name input to the operator.

        Accepted inputs are: 'element_duplicate_offset' and 'node_duplicate_offset' (returns int).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.cyclic_support_get_attribute()
        >>> op.inputs.property_name.connect(my_property_name)
        >>> # or
        >>> op.inputs.property_name(my_property_name)
        """
        return self._property_name


class OutputsCyclicSupportGetAttribute(_Outputs):
    """Intermediate class used to get outputs from
    cyclic_support_get_attribute operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.cyclic_support_get_attribute()
    >>> # Connect inputs : op.inputs. ...
    >>> result_property = op.outputs.property()
    """

    def __init__(self, op: Operator):
        super().__init__(cyclic_support_get_attribute._spec().outputs, op)
        self.property_as_string = Output(
            _modify_output_spec_with_one_type(
                cyclic_support_get_attribute._spec().output_pin(0), "string"
            ),
            0,
            op,
        )
        self._outputs.append(self.property_as_string)
        self.property_as_int32 = Output(
            _modify_output_spec_with_one_type(
                cyclic_support_get_attribute._spec().output_pin(0), "int32"
            ),
            0,
            op,
        )
        self._outputs.append(self.property_as_int32)
