"""
set_property

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.outputs import _modify_output_spec_with_one_type
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class set_property(Operator):
    r"""Sets a property to an input field/field container. A Fieldin pin 0, a
    property name (string) in pin 1 and a valid property value in pin 2 are
    expected as inputs


    Parameters
    ----------
    field: Field or FieldsContainer
    property_name: str
        Property to set. Accepted inputs are specific strings namely: 'unit', 'name', 'time_freq_support', 'scoping', 'header'.
    property: str or TimeFreqSupport or Scoping or DataTree or int or
        float
        Property Value to set. Accepted inputs on this pin are: CTimeFreqSupport, CScoping, DataTree, int, double, string.

    Returns
    -------
    field: Field or FieldsContainer
        Accepted Outputs are: Field, PropertyField, CustomTypeField or their containers.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.set_property()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_property_name = str()
    >>> op.inputs.property_name.connect(my_property_name)
    >>> my_property = str()
    >>> op.inputs.property.connect(my_property)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.set_property(
    ...     field=my_field,
    ...     property_name=my_property_name,
    ...     property=my_property,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self, field=None, property_name=None, property=None, config=None, server=None
    ):
        super().__init__(name="field::set_property", config=config, server=server)
        self._inputs = InputsSetProperty(self)
        self._outputs = OutputsSetProperty(self)
        if field is not None:
            self.inputs.field.connect(field)
        if property_name is not None:
            self.inputs.property_name.connect(property_name)
        if property is not None:
            self.inputs.property.connect(property)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Sets a property to an input field/field container. A Fieldin pin 0, a
property name (string) in pin 1 and a valid property value in pin 2 are
expected as inputs
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="property_name",
                    type_names=["string"],
                    optional=False,
                    document=r"""Property to set. Accepted inputs are specific strings namely: 'unit', 'name', 'time_freq_support', 'scoping', 'header'.""",
                ),
                2: PinSpecification(
                    name="property",
                    type_names=[
                        "string",
                        "time_freq_support",
                        "scoping",
                        "abstract_data_tree",
                        "int32",
                        "double",
                    ],
                    optional=False,
                    document=r"""Property Value to set. Accepted inputs on this pin are: CTimeFreqSupport, CScoping, DataTree, int, double, string.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document=r"""Accepted Outputs are: Field, PropertyField, CustomTypeField or their containers.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="field::set_property", server=server)

    @property
    def inputs(self) -> InputsSetProperty:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsSetProperty.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsSetProperty:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsSetProperty.
        """
        return super().outputs


class InputsSetProperty(_Inputs):
    """Intermediate class used to connect user inputs to
    set_property operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.set_property()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_property_name = str()
    >>> op.inputs.property_name.connect(my_property_name)
    >>> my_property = str()
    >>> op.inputs.property.connect(my_property)
    """

    def __init__(self, op: Operator):
        super().__init__(set_property._spec().inputs, op)
        self._field = Input(set_property._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._property_name = Input(set_property._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._property_name)
        self._property = Input(set_property._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._property)

    @property
    def field(self) -> Input:
        r"""Allows to connect field input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.set_property()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def property_name(self) -> Input:
        r"""Allows to connect property_name input to the operator.

        Property to set. Accepted inputs are specific strings namely: 'unit', 'name', 'time_freq_support', 'scoping', 'header'.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.set_property()
        >>> op.inputs.property_name.connect(my_property_name)
        >>> # or
        >>> op.inputs.property_name(my_property_name)
        """
        return self._property_name

    @property
    def property(self) -> Input:
        r"""Allows to connect property input to the operator.

        Property Value to set. Accepted inputs on this pin are: CTimeFreqSupport, CScoping, DataTree, int, double, string.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.set_property()
        >>> op.inputs.property.connect(my_property)
        >>> # or
        >>> op.inputs.property(my_property)
        """
        return self._property


class OutputsSetProperty(_Outputs):
    """Intermediate class used to get outputs from
    set_property operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.set_property()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(set_property._spec().outputs, op)
        self.field_as_field = Output(
            _modify_output_spec_with_one_type(
                set_property._spec().output_pin(0), "field"
            ),
            0,
            op,
        )
        self._outputs.append(self.field_as_field)
        self.field_as_fields_container = Output(
            _modify_output_spec_with_one_type(
                set_property._spec().output_pin(0), "fields_container"
            ),
            0,
            op,
        )
        self._outputs.append(self.field_as_fields_container)
