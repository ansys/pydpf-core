"""
Workflow_to_PyDPF_Generator
===========================
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class Workflow_to_PyDPF_Generator(Operator):
    """Generates .py python file that contains the PyDPF script of a Workflow
    object.

    Parameters
    ----------
    workflow : Workflow
    output_path : str, optional
    output_file_name : str, optional

    Returns
    -------
    pydpf_code : str

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator()

    >>> # Make input connections
    >>> my_workflow = dpf.Workflow()
    >>> op.inputs.workflow.connect(my_workflow)
    >>> my_output_path = str()
    >>> op.inputs.output_path.connect(my_output_path)
    >>> my_output_file_name = str()
    >>> op.inputs.output_file_name.connect(my_output_file_name)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator(
    ...     workflow=my_workflow,
    ...     output_path=my_output_path,
    ...     output_file_name=my_output_file_name,
    ... )

    >>> # Get output data
    >>> result_pydpf_code = op.outputs.pydpf_code()
    """

    def __init__(
        self,
        workflow=None,
        output_path=None,
        output_file_name=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="Workflow_to_PyDPF_Generator", config=config, server=server
        )
        self._inputs = InputsWorkflowToPydpfGenerator(self)
        self._outputs = OutputsWorkflowToPydpfGenerator(self)
        if workflow is not None:
            self.inputs.workflow.connect(workflow)
        if output_path is not None:
            self.inputs.output_path.connect(output_path)
        if output_file_name is not None:
            self.inputs.output_file_name.connect(output_file_name)

    @staticmethod
    def _spec():
        description = """Generates .py python file that contains the PyDPF script of a Workflow
            object."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="workflow",
                    type_names=["workflow"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="output_path",
                    type_names=["string"],
                    optional=True,
                    document="""""",
                ),
                2: PinSpecification(
                    name="output_file_name",
                    type_names=["string"],
                    optional=True,
                    document="""""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="pydpf_code",
                    type_names=["string"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="Workflow_to_PyDPF_Generator", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsWorkflowToPydpfGenerator
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsWorkflowToPydpfGenerator
        """
        return super().outputs


class InputsWorkflowToPydpfGenerator(_Inputs):
    """Intermediate class used to connect user inputs to
    Workflow_to_PyDPF_Generator operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator()
    >>> my_workflow = dpf.Workflow()
    >>> op.inputs.workflow.connect(my_workflow)
    >>> my_output_path = str()
    >>> op.inputs.output_path.connect(my_output_path)
    >>> my_output_file_name = str()
    >>> op.inputs.output_file_name.connect(my_output_file_name)
    """

    def __init__(self, op: Operator):
        super().__init__(Workflow_to_PyDPF_Generator._spec().inputs, op)
        self._workflow = Input(
            Workflow_to_PyDPF_Generator._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._workflow)
        self._output_path = Input(
            Workflow_to_PyDPF_Generator._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._output_path)
        self._output_file_name = Input(
            Workflow_to_PyDPF_Generator._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._output_file_name)

    @property
    def workflow(self):
        """Allows to connect workflow input to the operator.

        Parameters
        ----------
        my_workflow : Workflow

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator()
        >>> op.inputs.workflow.connect(my_workflow)
        >>> # or
        >>> op.inputs.workflow(my_workflow)
        """
        return self._workflow

    @property
    def output_path(self):
        """Allows to connect output_path input to the operator.

        Parameters
        ----------
        my_output_path : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator()
        >>> op.inputs.output_path.connect(my_output_path)
        >>> # or
        >>> op.inputs.output_path(my_output_path)
        """
        return self._output_path

    @property
    def output_file_name(self):
        """Allows to connect output_file_name input to the operator.

        Parameters
        ----------
        my_output_file_name : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator()
        >>> op.inputs.output_file_name.connect(my_output_file_name)
        >>> # or
        >>> op.inputs.output_file_name(my_output_file_name)
        """
        return self._output_file_name


class OutputsWorkflowToPydpfGenerator(_Outputs):
    """Intermediate class used to get outputs from
    Workflow_to_PyDPF_Generator operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator()
    >>> # Connect inputs : op.inputs. ...
    >>> result_pydpf_code = op.outputs.pydpf_code()
    """

    def __init__(self, op: Operator):
        super().__init__(Workflow_to_PyDPF_Generator._spec().outputs, op)
        self._pydpf_code = Output(
            Workflow_to_PyDPF_Generator._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._pydpf_code)

    @property
    def pydpf_code(self):
        """Allows to get pydpf_code output of the operator

        Returns
        ----------
        my_pydpf_code : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator()
        >>> # Connect inputs : op.inputs. ...
        >>> result_pydpf_code = op.outputs.pydpf_code()
        """  # noqa: E501
        return self._pydpf_code
