"""
extract_scoping

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.outputs import _modify_output_spec_with_one_type
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class extract_scoping(Operator):
    r"""Takes a field type object, mesh or a collection of them and extracts its
    scoping or scopings container.


    Parameters
    ----------
    field_or_fields_container: Field or FieldsContainer or PropertyField or
        PropertyFieldsContainer or CustomTypeField or
        CustomTypeFieldsContainer or StringField or Scoping
        or ScopingsContainer or MeshedRegion or
        MeshesContainer, optional
    requested_location: int, optional
        If input 0 is a mesh or a meshes_container, the operator returns the nodes scoping, possible locations are: Nodal(default) or Elemental

    Returns
    -------
    mesh_scoping: Scoping or ScopingsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.extract_scoping()

    >>> # Make input connections
    >>> my_field_or_fields_container = dpf.Field()
    >>> op.inputs.field_or_fields_container.connect(my_field_or_fields_container)
    >>> my_requested_location = int()
    >>> op.inputs.requested_location.connect(my_requested_location)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.extract_scoping(
    ...     field_or_fields_container=my_field_or_fields_container,
    ...     requested_location=my_requested_location,
    ... )

    >>> # Get output data
    >>> result_mesh_scoping = op.outputs.mesh_scoping()
    """

    def __init__(
        self,
        field_or_fields_container=None,
        requested_location=None,
        config=None,
        server=None,
    ):
        super().__init__(name="extract_scoping", config=config, server=server)
        self._inputs = InputsExtractScoping(self)
        self._outputs = OutputsExtractScoping(self)
        if field_or_fields_container is not None:
            self.inputs.field_or_fields_container.connect(field_or_fields_container)
        if requested_location is not None:
            self.inputs.requested_location.connect(requested_location)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Takes a field type object, mesh or a collection of them and extracts its
scoping or scopings container.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field_or_fields_container",
                    type_names=[
                        "field",
                        "fields_container",
                        "property_field",
                        "property_fields_container",
                        "custom_type_field",
                        "custom_type_fields_container",
                        "string_field",
                        "scoping",
                        "scopings_container",
                        "meshed_region",
                        "meshes_container",
                    ],
                    optional=True,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="requested_location",
                    type_names=["int32"],
                    optional=True,
                    document=r"""If input 0 is a mesh or a meshes_container, the operator returns the nodes scoping, possible locations are: Nodal(default) or Elemental""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="mesh_scoping",
                    type_names=["scoping", "scopings_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="extract_scoping", server=server)

    @property
    def inputs(self) -> InputsExtractScoping:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsExtractScoping.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsExtractScoping:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsExtractScoping.
        """
        return super().outputs


class InputsExtractScoping(_Inputs):
    """Intermediate class used to connect user inputs to
    extract_scoping operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.extract_scoping()
    >>> my_field_or_fields_container = dpf.Field()
    >>> op.inputs.field_or_fields_container.connect(my_field_or_fields_container)
    >>> my_requested_location = int()
    >>> op.inputs.requested_location.connect(my_requested_location)
    """

    def __init__(self, op: Operator):
        super().__init__(extract_scoping._spec().inputs, op)
        self._field_or_fields_container = Input(
            extract_scoping._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._field_or_fields_container)
        self._requested_location = Input(
            extract_scoping._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._requested_location)

    @property
    def field_or_fields_container(self) -> Input:
        r"""Allows to connect field_or_fields_container input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.extract_scoping()
        >>> op.inputs.field_or_fields_container.connect(my_field_or_fields_container)
        >>> # or
        >>> op.inputs.field_or_fields_container(my_field_or_fields_container)
        """
        return self._field_or_fields_container

    @property
    def requested_location(self) -> Input:
        r"""Allows to connect requested_location input to the operator.

        If input 0 is a mesh or a meshes_container, the operator returns the nodes scoping, possible locations are: Nodal(default) or Elemental

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.extract_scoping()
        >>> op.inputs.requested_location.connect(my_requested_location)
        >>> # or
        >>> op.inputs.requested_location(my_requested_location)
        """
        return self._requested_location


class OutputsExtractScoping(_Outputs):
    """Intermediate class used to get outputs from
    extract_scoping operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.extract_scoping()
    >>> # Connect inputs : op.inputs. ...
    >>> result_mesh_scoping = op.outputs.mesh_scoping()
    """

    def __init__(self, op: Operator):
        super().__init__(extract_scoping._spec().outputs, op)
        self.mesh_scoping_as_scoping = Output(
            _modify_output_spec_with_one_type(
                extract_scoping._spec().output_pin(0), "scoping"
            ),
            0,
            op,
        )
        self._outputs.append(self.mesh_scoping_as_scoping)
        self.mesh_scoping_as_scopings_container = Output(
            _modify_output_spec_with_one_type(
                extract_scoping._spec().output_pin(0), "scopings_container"
            ),
            0,
            op,
        )
        self._outputs.append(self.mesh_scoping_as_scopings_container)
