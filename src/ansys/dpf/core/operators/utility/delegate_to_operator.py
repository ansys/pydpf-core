"""
delegate_to_operator

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class delegate_to_operator(Operator):
    r"""Delegate the run to an Operator instantiated by the name in input
    (forwards all the input of this Operator to the sub Operator).


    Parameters
    ----------
    operator_name: str

    Returns
    -------
    any1: Any
        inputs
    any2: Any
        inputs

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.utility.delegate_to_operator()

    >>> # Make input connections
    >>> my_operator_name = str()
    >>> op.inputs.operator_name.connect(my_operator_name)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.utility.delegate_to_operator(
    ...     operator_name=my_operator_name,
    ... )

    >>> # Get output data
    >>> result_any1 = op.outputs.any1()
    >>> result_any2 = op.outputs.any2()
    """

    def __init__(self, operator_name=None, config=None, server=None):
        super().__init__(name="delegate_to_operator", config=config, server=server)
        self._inputs = InputsDelegateToOperator(self)
        self._outputs = OutputsDelegateToOperator(self)
        if operator_name is not None:
            self.inputs.operator_name.connect(operator_name)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Delegate the run to an Operator instantiated by the name in input
(forwards all the input of this Operator to the sub Operator).
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                -1: PinSpecification(
                    name="operator_name",
                    type_names=["string"],
                    optional=False,
                    document=r"""""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="any1",
                    type_names=["any"],
                    optional=False,
                    document=r"""inputs""",
                ),
                1: PinSpecification(
                    name="any2",
                    type_names=["any"],
                    optional=False,
                    document=r"""inputs""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="delegate_to_operator", server=server)

    @property
    def inputs(self) -> InputsDelegateToOperator:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsDelegateToOperator.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsDelegateToOperator:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsDelegateToOperator.
        """
        return super().outputs


class InputsDelegateToOperator(_Inputs):
    """Intermediate class used to connect user inputs to
    delegate_to_operator operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.delegate_to_operator()
    >>> my_operator_name = str()
    >>> op.inputs.operator_name.connect(my_operator_name)
    """

    def __init__(self, op: Operator):
        super().__init__(delegate_to_operator._spec().inputs, op)
        self._operator_name = Input(
            delegate_to_operator._spec().input_pin(-1), -1, op, -1
        )
        self._inputs.append(self._operator_name)

    @property
    def operator_name(self) -> Input:
        r"""Allows to connect operator_name input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.delegate_to_operator()
        >>> op.inputs.operator_name.connect(my_operator_name)
        >>> # or
        >>> op.inputs.operator_name(my_operator_name)
        """
        return self._operator_name


class OutputsDelegateToOperator(_Outputs):
    """Intermediate class used to get outputs from
    delegate_to_operator operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.utility.delegate_to_operator()
    >>> # Connect inputs : op.inputs. ...
    >>> result_any1 = op.outputs.any1()
    >>> result_any2 = op.outputs.any2()
    """

    def __init__(self, op: Operator):
        super().__init__(delegate_to_operator._spec().outputs, op)
        self._any1 = Output(delegate_to_operator._spec().output_pin(0), 0, op)
        self._outputs.append(self._any1)
        self._any2 = Output(delegate_to_operator._spec().output_pin(1), 1, op)
        self._outputs.append(self._any2)

    @property
    def any1(self) -> Output:
        r"""Allows to get any1 output of the operator

        inputs

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.delegate_to_operator()
        >>> # Get the output from op.outputs. ...
        >>> result_any1 = op.outputs.any1()
        """
        return self._any1

    @property
    def any2(self) -> Output:
        r"""Allows to get any2 output of the operator

        inputs

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.utility.delegate_to_operator()
        >>> # Get the output from op.outputs. ...
        >>> result_any2 = op.outputs.any2()
        """
        return self._any2
