"""
timescoping_band_pass
=====================
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class timescoping_band_pass(Operator):
    """The band pass filter returns all the values above (but not equal to)
    the minimum threshold value and below (but not equal to) the
    maximum threshold value in input.

    Parameters
    ----------
    time_freq_support : TimeFreqSupport
    min_threshold : float or Field
        A minimum threshold scalar or a field
        containing one value is expected.
    max_threshold : float or Field, optional
        A maximum threshold scalar or a field
        containing one value is expected.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.filter.timescoping_band_pass()

    >>> # Make input connections
    >>> my_time_freq_support = dpf.TimeFreqSupport()
    >>> op.inputs.time_freq_support.connect(my_time_freq_support)
    >>> my_min_threshold = float()
    >>> op.inputs.min_threshold.connect(my_min_threshold)
    >>> my_max_threshold = float()
    >>> op.inputs.max_threshold.connect(my_max_threshold)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.filter.timescoping_band_pass(
    ...     time_freq_support=my_time_freq_support,
    ...     min_threshold=my_min_threshold,
    ...     max_threshold=my_max_threshold,
    ... )

    >>> # Get output data
    >>> result_scoping = op.outputs.scoping()
    """

    def __init__(
        self,
        time_freq_support=None,
        min_threshold=None,
        max_threshold=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="core::timescoping::band_pass", config=config, server=server
        )
        self._inputs = InputsTimescopingBandPass(self)
        self._outputs = OutputsTimescopingBandPass(self)
        if time_freq_support is not None:
            self.inputs.time_freq_support.connect(time_freq_support)
        if min_threshold is not None:
            self.inputs.min_threshold.connect(min_threshold)
        if max_threshold is not None:
            self.inputs.max_threshold.connect(max_threshold)

    @staticmethod
    def _spec():
        description = """The band pass filter returns all the values above (but not equal to)
            the minimum threshold value and below (but not equal to)
            the maximum threshold value in input."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="time_freq_support",
                    type_names=["time_freq_support"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="min_threshold",
                    type_names=["double", "field"],
                    optional=False,
                    document="""A minimum threshold scalar or a field
        containing one value is expected.""",
                ),
                2: PinSpecification(
                    name="max_threshold",
                    type_names=["double", "field"],
                    optional=True,
                    document="""A maximum threshold scalar or a field
        containing one value is expected.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="scoping",
                    type_names=["scoping"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="core::timescoping::band_pass", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsTimescopingBandPass
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsTimescopingBandPass
        """
        return super().outputs


class InputsTimescopingBandPass(_Inputs):
    """Intermediate class used to connect user inputs to
    timescoping_band_pass operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.filter.timescoping_band_pass()
    >>> my_time_freq_support = dpf.TimeFreqSupport()
    >>> op.inputs.time_freq_support.connect(my_time_freq_support)
    >>> my_min_threshold = float()
    >>> op.inputs.min_threshold.connect(my_min_threshold)
    >>> my_max_threshold = float()
    >>> op.inputs.max_threshold.connect(my_max_threshold)
    """

    def __init__(self, op: Operator):
        super().__init__(timescoping_band_pass._spec().inputs, op)
        self._time_freq_support = Input(
            timescoping_band_pass._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._time_freq_support)
        self._min_threshold = Input(
            timescoping_band_pass._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._min_threshold)
        self._max_threshold = Input(
            timescoping_band_pass._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._max_threshold)

    @property
    def time_freq_support(self):
        """Allows to connect time_freq_support input to the operator.

        Parameters
        ----------
        my_time_freq_support : TimeFreqSupport

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.timescoping_band_pass()
        >>> op.inputs.time_freq_support.connect(my_time_freq_support)
        >>> # or
        >>> op.inputs.time_freq_support(my_time_freq_support)
        """
        return self._time_freq_support

    @property
    def min_threshold(self):
        """Allows to connect min_threshold input to the operator.

        A minimum threshold scalar or a field
        containing one value is expected.

        Parameters
        ----------
        my_min_threshold : float or Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.timescoping_band_pass()
        >>> op.inputs.min_threshold.connect(my_min_threshold)
        >>> # or
        >>> op.inputs.min_threshold(my_min_threshold)
        """
        return self._min_threshold

    @property
    def max_threshold(self):
        """Allows to connect max_threshold input to the operator.

        A maximum threshold scalar or a field
        containing one value is expected.

        Parameters
        ----------
        my_max_threshold : float or Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.timescoping_band_pass()
        >>> op.inputs.max_threshold.connect(my_max_threshold)
        >>> # or
        >>> op.inputs.max_threshold(my_max_threshold)
        """
        return self._max_threshold


class OutputsTimescopingBandPass(_Outputs):
    """Intermediate class used to get outputs from
    timescoping_band_pass operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.filter.timescoping_band_pass()
    >>> # Connect inputs : op.inputs. ...
    >>> result_scoping = op.outputs.scoping()
    """

    def __init__(self, op: Operator):
        super().__init__(timescoping_band_pass._spec().outputs, op)
        self._scoping = Output(timescoping_band_pass._spec().output_pin(0), 0, op)
        self._outputs.append(self._scoping)

    @property
    def scoping(self):
        """Allows to get scoping output of the operator

        Returns
        ----------
        my_scoping : Scoping

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.timescoping_band_pass()
        >>> # Connect inputs : op.inputs. ...
        >>> result_scoping = op.outputs.scoping()
        """  # noqa: E501
        return self._scoping
