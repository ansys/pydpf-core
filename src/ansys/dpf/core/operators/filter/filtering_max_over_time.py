"""
filtering_max_over_time
=======================
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class filtering_max_over_time(Operator):
    """Creates a filtering workflow that will filter results based on a
    threshold of a selected invariant.

    Parameters
    ----------
    invariant_fc_operator : str
        Name of the invariant operator to be used to
        calculate filter (available: eqv_fc,
        invariants_deriv_fc, invariants_fc).
    output_pin : int, optional
        Output pin of the invariant operator. default
        = 0.
    list_of_results : str, optional
        If no result is given, filter will be applied
        on stresses and strains
    threshold : float, optional
        Threshold from which the operator will
        filter.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.filter.filtering_max_over_time()

    >>> # Make input connections
    >>> my_invariant_fc_operator = str()
    >>> op.inputs.invariant_fc_operator.connect(my_invariant_fc_operator)
    >>> my_output_pin = int()
    >>> op.inputs.output_pin.connect(my_output_pin)
    >>> my_list_of_results = str()
    >>> op.inputs.list_of_results.connect(my_list_of_results)
    >>> my_threshold = float()
    >>> op.inputs.threshold.connect(my_threshold)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.filter.filtering_max_over_time(
    ...     invariant_fc_operator=my_invariant_fc_operator,
    ...     output_pin=my_output_pin,
    ...     list_of_results=my_list_of_results,
    ...     threshold=my_threshold,
    ... )

    >>> # Get output data
    >>> result_workflow = op.outputs.workflow()
    """

    def __init__(
        self,
        invariant_fc_operator=None,
        output_pin=None,
        list_of_results=None,
        threshold=None,
        config=None,
        server=None,
    ):
        super().__init__(name="filtering_max_over_time", config=config, server=server)
        self._inputs = InputsFilteringMaxOverTime(self)
        self._outputs = OutputsFilteringMaxOverTime(self)
        if invariant_fc_operator is not None:
            self.inputs.invariant_fc_operator.connect(invariant_fc_operator)
        if output_pin is not None:
            self.inputs.output_pin.connect(output_pin)
        if list_of_results is not None:
            self.inputs.list_of_results.connect(list_of_results)
        if threshold is not None:
            self.inputs.threshold.connect(threshold)

    @staticmethod
    def _spec():
        description = """Creates a filtering workflow that will filter results based on a
            threshold of a selected invariant."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="invariant_fc_operator",
                    type_names=["string"],
                    optional=False,
                    document="""Name of the invariant operator to be used to
        calculate filter (available: eqv_fc,
        invariants_deriv_fc, invariants_fc).""",
                ),
                1: PinSpecification(
                    name="output_pin",
                    type_names=["int32"],
                    optional=True,
                    document="""Output pin of the invariant operator. default
        = 0.""",
                ),
                2: PinSpecification(
                    name="list_of_results",
                    type_names=["vector<string>", "string"],
                    optional=True,
                    document="""If no result is given, filter will be applied
        on stresses and strains""",
                ),
                3: PinSpecification(
                    name="threshold",
                    type_names=["double"],
                    optional=True,
                    document="""Threshold from which the operator will
        filter.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="workflow",
                    type_names=["workflow"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="filtering_max_over_time", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsFilteringMaxOverTime
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsFilteringMaxOverTime
        """
        return super().outputs


class InputsFilteringMaxOverTime(_Inputs):
    """Intermediate class used to connect user inputs to
    filtering_max_over_time operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.filter.filtering_max_over_time()
    >>> my_invariant_fc_operator = str()
    >>> op.inputs.invariant_fc_operator.connect(my_invariant_fc_operator)
    >>> my_output_pin = int()
    >>> op.inputs.output_pin.connect(my_output_pin)
    >>> my_list_of_results = str()
    >>> op.inputs.list_of_results.connect(my_list_of_results)
    >>> my_threshold = float()
    >>> op.inputs.threshold.connect(my_threshold)
    """

    def __init__(self, op: Operator):
        super().__init__(filtering_max_over_time._spec().inputs, op)
        self._invariant_fc_operator = Input(
            filtering_max_over_time._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._invariant_fc_operator)
        self._output_pin = Input(
            filtering_max_over_time._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._output_pin)
        self._list_of_results = Input(
            filtering_max_over_time._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._list_of_results)
        self._threshold = Input(filtering_max_over_time._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._threshold)

    @property
    def invariant_fc_operator(self):
        """Allows to connect invariant_fc_operator input to the operator.

        Name of the invariant operator to be used to
        calculate filter (available: eqv_fc,
        invariants_deriv_fc, invariants_fc).

        Parameters
        ----------
        my_invariant_fc_operator : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.filtering_max_over_time()
        >>> op.inputs.invariant_fc_operator.connect(my_invariant_fc_operator)
        >>> # or
        >>> op.inputs.invariant_fc_operator(my_invariant_fc_operator)
        """
        return self._invariant_fc_operator

    @property
    def output_pin(self):
        """Allows to connect output_pin input to the operator.

        Output pin of the invariant operator. default
        = 0.

        Parameters
        ----------
        my_output_pin : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.filtering_max_over_time()
        >>> op.inputs.output_pin.connect(my_output_pin)
        >>> # or
        >>> op.inputs.output_pin(my_output_pin)
        """
        return self._output_pin

    @property
    def list_of_results(self):
        """Allows to connect list_of_results input to the operator.

        If no result is given, filter will be applied
        on stresses and strains

        Parameters
        ----------
        my_list_of_results : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.filtering_max_over_time()
        >>> op.inputs.list_of_results.connect(my_list_of_results)
        >>> # or
        >>> op.inputs.list_of_results(my_list_of_results)
        """
        return self._list_of_results

    @property
    def threshold(self):
        """Allows to connect threshold input to the operator.

        Threshold from which the operator will
        filter.

        Parameters
        ----------
        my_threshold : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.filtering_max_over_time()
        >>> op.inputs.threshold.connect(my_threshold)
        >>> # or
        >>> op.inputs.threshold(my_threshold)
        """
        return self._threshold


class OutputsFilteringMaxOverTime(_Outputs):
    """Intermediate class used to get outputs from
    filtering_max_over_time operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.filter.filtering_max_over_time()
    >>> # Connect inputs : op.inputs. ...
    >>> result_workflow = op.outputs.workflow()
    """

    def __init__(self, op: Operator):
        super().__init__(filtering_max_over_time._spec().outputs, op)
        self._workflow = Output(filtering_max_over_time._spec().output_pin(0), 0, op)
        self._outputs.append(self._workflow)

    @property
    def workflow(self):
        """Allows to get workflow output of the operator

        Returns
        ----------
        my_workflow : Workflow

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.filter.filtering_max_over_time()
        >>> # Connect inputs : op.inputs. ...
        >>> result_workflow = op.outputs.workflow()
        """  # noqa: E501
        return self._workflow
