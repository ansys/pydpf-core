"""
mapdl_split_on_facet_indices
============================
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class mapdl_split_on_facet_indices(Operator):
    """Splits each Field in a FieldsContainer defined on the skin elements of
    a mesh according to the local facets indices of its corresponding
    solid element. The output FieldsContainer retains the original
    labels and adds a 'facet' label, which indicates at which facet of
    the solid mesh was the original skin element located. The facet
    ids are according to MAPDL convention. The scoping of the output
    Fields reflects the element indices in the solid mesh.

    Parameters
    ----------
    fields_container : FieldsContainer
        Fields container to split, with generic
        number of labels (e.g. time, zone,
        complex...), and the fields of the
        fieldscontainer will have location
        elemental and the scoping ids will be
        the element ids on the skin mesh.
    property_field_new_elements_to_old : PropertyField
        This property field provides, for each new
        face element id (in the scoping), the
        corresponding 3d volume element index
        (in the data) it has been extracted
        from. the 3d volume element id can be
        found with the element scoping of the
        input mesh.
    facet_indices : PropertyField
        This property field gives, for each new face
        element id (in the scoping), the
        corresponding face index on the
        source 3d volume element. the 3d
        volume element can be extracted from
        the previous output.
    volume_mesh : MeshedRegion
        The solid support.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.result.mapdl_split_on_facet_indices()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_property_field_new_elements_to_old = dpf.PropertyField()
    >>> op.inputs.property_field_new_elements_to_old.connect(my_property_field_new_elements_to_old)
    >>> my_facet_indices = dpf.PropertyField()
    >>> op.inputs.facet_indices.connect(my_facet_indices)
    >>> my_volume_mesh = dpf.MeshedRegion()
    >>> op.inputs.volume_mesh.connect(my_volume_mesh)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.result.mapdl_split_on_facet_indices(
    ...     fields_container=my_fields_container,
    ...     property_field_new_elements_to_old=my_property_field_new_elements_to_old,
    ...     facet_indices=my_facet_indices,
    ...     volume_mesh=my_volume_mesh,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        property_field_new_elements_to_old=None,
        facet_indices=None,
        volume_mesh=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="mapdl::split_on_facet_indices", config=config, server=server
        )
        self._inputs = InputsMapdlSplitOnFacetIndices(self)
        self._outputs = OutputsMapdlSplitOnFacetIndices(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if property_field_new_elements_to_old is not None:
            self.inputs.property_field_new_elements_to_old.connect(
                property_field_new_elements_to_old
            )
        if facet_indices is not None:
            self.inputs.facet_indices.connect(facet_indices)
        if volume_mesh is not None:
            self.inputs.volume_mesh.connect(volume_mesh)

    @staticmethod
    def _spec():
        description = """Splits each Field in a FieldsContainer defined on the skin elements of
            a mesh according to the local facets indices of its
            corresponding solid element. The output FieldsContainer
            retains the original labels and adds a 'facet' label,
            which indicates at which facet of the solid mesh was the
            original skin element located. The facet ids are according
            to MAPDL convention. The scoping of the output Fields
            reflects the element indices in the solid mesh."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fields container to split, with generic
        number of labels (e.g. time, zone,
        complex...), and the fields of the
        fieldscontainer will have location
        elemental and the scoping ids will be
        the element ids on the skin mesh.""",
                ),
                1: PinSpecification(
                    name="property_field_new_elements_to_old",
                    type_names=["property_field"],
                    optional=False,
                    document="""This property field provides, for each new
        face element id (in the scoping), the
        corresponding 3d volume element index
        (in the data) it has been extracted
        from. the 3d volume element id can be
        found with the element scoping of the
        input mesh.""",
                ),
                2: PinSpecification(
                    name="facet_indices",
                    type_names=["property_field"],
                    optional=False,
                    document="""This property field gives, for each new face
        element id (in the scoping), the
        corresponding face index on the
        source 3d volume element. the 3d
        volume element can be extracted from
        the previous output.""",
                ),
                3: PinSpecification(
                    name="volume_mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document="""The solid support.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Output splitted fields containter""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="mapdl::split_on_facet_indices", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsMapdlSplitOnFacetIndices
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsMapdlSplitOnFacetIndices
        """
        return super().outputs


class InputsMapdlSplitOnFacetIndices(_Inputs):
    """Intermediate class used to connect user inputs to
    mapdl_split_on_facet_indices operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.mapdl_split_on_facet_indices()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_property_field_new_elements_to_old = dpf.PropertyField()
    >>> op.inputs.property_field_new_elements_to_old.connect(my_property_field_new_elements_to_old)
    >>> my_facet_indices = dpf.PropertyField()
    >>> op.inputs.facet_indices.connect(my_facet_indices)
    >>> my_volume_mesh = dpf.MeshedRegion()
    >>> op.inputs.volume_mesh.connect(my_volume_mesh)
    """

    def __init__(self, op: Operator):
        super().__init__(mapdl_split_on_facet_indices._spec().inputs, op)
        self._fields_container = Input(
            mapdl_split_on_facet_indices._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._property_field_new_elements_to_old = Input(
            mapdl_split_on_facet_indices._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._property_field_new_elements_to_old)
        self._facet_indices = Input(
            mapdl_split_on_facet_indices._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._facet_indices)
        self._volume_mesh = Input(
            mapdl_split_on_facet_indices._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._volume_mesh)

    @property
    def fields_container(self):
        """Allows to connect fields_container input to the operator.

        Fields container to split, with generic
        number of labels (e.g. time, zone,
        complex...), and the fields of the
        fieldscontainer will have location
        elemental and the scoping ids will be
        the element ids on the skin mesh.

        Parameters
        ----------
        my_fields_container : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.mapdl_split_on_facet_indices()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def property_field_new_elements_to_old(self):
        """Allows to connect property_field_new_elements_to_old input to the operator.

        This property field provides, for each new
        face element id (in the scoping), the
        corresponding 3d volume element index
        (in the data) it has been extracted
        from. the 3d volume element id can be
        found with the element scoping of the
        input mesh.

        Parameters
        ----------
        my_property_field_new_elements_to_old : PropertyField

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.mapdl_split_on_facet_indices()
        >>> op.inputs.property_field_new_elements_to_old.connect(my_property_field_new_elements_to_old)
        >>> # or
        >>> op.inputs.property_field_new_elements_to_old(my_property_field_new_elements_to_old)
        """
        return self._property_field_new_elements_to_old

    @property
    def facet_indices(self):
        """Allows to connect facet_indices input to the operator.

        This property field gives, for each new face
        element id (in the scoping), the
        corresponding face index on the
        source 3d volume element. the 3d
        volume element can be extracted from
        the previous output.

        Parameters
        ----------
        my_facet_indices : PropertyField

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.mapdl_split_on_facet_indices()
        >>> op.inputs.facet_indices.connect(my_facet_indices)
        >>> # or
        >>> op.inputs.facet_indices(my_facet_indices)
        """
        return self._facet_indices

    @property
    def volume_mesh(self):
        """Allows to connect volume_mesh input to the operator.

        The solid support.

        Parameters
        ----------
        my_volume_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.mapdl_split_on_facet_indices()
        >>> op.inputs.volume_mesh.connect(my_volume_mesh)
        >>> # or
        >>> op.inputs.volume_mesh(my_volume_mesh)
        """
        return self._volume_mesh


class OutputsMapdlSplitOnFacetIndices(_Outputs):
    """Intermediate class used to get outputs from
    mapdl_split_on_facet_indices operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.mapdl_split_on_facet_indices()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(mapdl_split_on_facet_indices._spec().outputs, op)
        self._fields_container = Output(
            mapdl_split_on_facet_indices._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self):
        """Allows to get fields_container output of the operator

        Returns
        ----------
        my_fields_container : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.mapdl_split_on_facet_indices()
        >>> # Connect inputs : op.inputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """  # noqa: E501
        return self._fields_container
