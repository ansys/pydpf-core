"""
strain_eqv_as_mechanical_workflow

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class strain_eqv_as_mechanical_workflow(Operator):
    r"""Generates a workflow that computes the equivalent (Von Mises) elastic
    strains and averages it to the nodes (by default). For multibody
    simulations, averaging across bodies can either be activated or
    deactivated.


    Parameters
    ----------
    time_scoping: Scoping, optional
        time/freq (use doubles or field), time/freq set ids (use ints or scoping) or time/freq step ids use scoping with TimeFreq_steps location) required in output.
    mesh_scoping: Scoping or ScopingsContainer, optional
        nodes or elements scoping required in output.
    streams_container: StreamsContainer, optional
        result file container allowed to be kept open to cache data.
    data_sources: DataSources
        result file path container.
    mesh: MeshedRegion or MeshesContainer, optional
        prevents from reading the mesh in the results file.
    requested_location: str, optional
        average the elemental nodal result to the requested location (default is nodal).
    read_cyclic: bool, optional
        if true, cyclic expansion is done. If false, it's ignored..
    average_across_bodies: bool, optional
        for multibody simulations, the stresses are averaged across bodies if true or not if false (default).

    Returns
    -------
    workflow: Workflow

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()

    >>> # Make input connections
    >>> my_time_scoping = dpf.Scoping()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_mesh_scoping = dpf.Scoping()
    >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
    >>> my_streams_container = dpf.StreamsContainer()
    >>> op.inputs.streams_container.connect(my_streams_container)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_requested_location = str()
    >>> op.inputs.requested_location.connect(my_requested_location)
    >>> my_read_cyclic = bool()
    >>> op.inputs.read_cyclic.connect(my_read_cyclic)
    >>> my_average_across_bodies = bool()
    >>> op.inputs.average_across_bodies.connect(my_average_across_bodies)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow(
    ...     time_scoping=my_time_scoping,
    ...     mesh_scoping=my_mesh_scoping,
    ...     streams_container=my_streams_container,
    ...     data_sources=my_data_sources,
    ...     mesh=my_mesh,
    ...     requested_location=my_requested_location,
    ...     read_cyclic=my_read_cyclic,
    ...     average_across_bodies=my_average_across_bodies,
    ... )

    >>> # Get output data
    >>> result_workflow = op.outputs.workflow()
    """

    def __init__(
        self,
        time_scoping=None,
        mesh_scoping=None,
        streams_container=None,
        data_sources=None,
        mesh=None,
        requested_location=None,
        read_cyclic=None,
        average_across_bodies=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="strain_eqv_as_mechanical_workflow", config=config, server=server
        )
        self._inputs = InputsStrainEqvAsMechanicalWorkflow(self)
        self._outputs = OutputsStrainEqvAsMechanicalWorkflow(self)
        if time_scoping is not None:
            self.inputs.time_scoping.connect(time_scoping)
        if mesh_scoping is not None:
            self.inputs.mesh_scoping.connect(mesh_scoping)
        if streams_container is not None:
            self.inputs.streams_container.connect(streams_container)
        if data_sources is not None:
            self.inputs.data_sources.connect(data_sources)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)
        if requested_location is not None:
            self.inputs.requested_location.connect(requested_location)
        if read_cyclic is not None:
            self.inputs.read_cyclic.connect(read_cyclic)
        if average_across_bodies is not None:
            self.inputs.average_across_bodies.connect(average_across_bodies)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Generates a workflow that computes the equivalent (Von Mises) elastic
strains and averages it to the nodes (by default). For multibody
simulations, averaging across bodies can either be activated or
deactivated.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="time_scoping",
                    type_names=["scoping", "vector<int32>"],
                    optional=True,
                    document=r"""time/freq (use doubles or field), time/freq set ids (use ints or scoping) or time/freq step ids use scoping with TimeFreq_steps location) required in output.""",
                ),
                1: PinSpecification(
                    name="mesh_scoping",
                    type_names=["scoping", "scopings_container"],
                    optional=True,
                    document=r"""nodes or elements scoping required in output.""",
                ),
                3: PinSpecification(
                    name="streams_container",
                    type_names=["streams_container"],
                    optional=True,
                    document=r"""result file container allowed to be kept open to cache data.""",
                ),
                4: PinSpecification(
                    name="data_sources",
                    type_names=["data_sources"],
                    optional=False,
                    document=r"""result file path container.""",
                ),
                7: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region", "meshes_container"],
                    optional=True,
                    document=r"""prevents from reading the mesh in the results file.""",
                ),
                9: PinSpecification(
                    name="requested_location",
                    type_names=["string"],
                    optional=True,
                    document=r"""average the elemental nodal result to the requested location (default is nodal).""",
                ),
                14: PinSpecification(
                    name="read_cyclic",
                    type_names=["bool"],
                    optional=True,
                    document=r"""if true, cyclic expansion is done. If false, it's ignored..""",
                ),
                200: PinSpecification(
                    name="average_across_bodies",
                    type_names=["bool"],
                    optional=True,
                    document=r"""for multibody simulations, the stresses are averaged across bodies if true or not if false (default).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="workflow",
                    type_names=["workflow"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(
            name="strain_eqv_as_mechanical_workflow", server=server
        )

    @property
    def inputs(self) -> InputsStrainEqvAsMechanicalWorkflow:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsStrainEqvAsMechanicalWorkflow.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsStrainEqvAsMechanicalWorkflow:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsStrainEqvAsMechanicalWorkflow.
        """
        return super().outputs


class InputsStrainEqvAsMechanicalWorkflow(_Inputs):
    """Intermediate class used to connect user inputs to
    strain_eqv_as_mechanical_workflow operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
    >>> my_time_scoping = dpf.Scoping()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_mesh_scoping = dpf.Scoping()
    >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
    >>> my_streams_container = dpf.StreamsContainer()
    >>> op.inputs.streams_container.connect(my_streams_container)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_requested_location = str()
    >>> op.inputs.requested_location.connect(my_requested_location)
    >>> my_read_cyclic = bool()
    >>> op.inputs.read_cyclic.connect(my_read_cyclic)
    >>> my_average_across_bodies = bool()
    >>> op.inputs.average_across_bodies.connect(my_average_across_bodies)
    """

    def __init__(self, op: Operator):
        super().__init__(strain_eqv_as_mechanical_workflow._spec().inputs, op)
        self._time_scoping = Input(
            strain_eqv_as_mechanical_workflow._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._time_scoping)
        self._mesh_scoping = Input(
            strain_eqv_as_mechanical_workflow._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._mesh_scoping)
        self._streams_container = Input(
            strain_eqv_as_mechanical_workflow._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._streams_container)
        self._data_sources = Input(
            strain_eqv_as_mechanical_workflow._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._data_sources)
        self._mesh = Input(
            strain_eqv_as_mechanical_workflow._spec().input_pin(7), 7, op, -1
        )
        self._inputs.append(self._mesh)
        self._requested_location = Input(
            strain_eqv_as_mechanical_workflow._spec().input_pin(9), 9, op, -1
        )
        self._inputs.append(self._requested_location)
        self._read_cyclic = Input(
            strain_eqv_as_mechanical_workflow._spec().input_pin(14), 14, op, -1
        )
        self._inputs.append(self._read_cyclic)
        self._average_across_bodies = Input(
            strain_eqv_as_mechanical_workflow._spec().input_pin(200), 200, op, -1
        )
        self._inputs.append(self._average_across_bodies)

    @property
    def time_scoping(self) -> Input:
        r"""Allows to connect time_scoping input to the operator.

        time/freq (use doubles or field), time/freq set ids (use ints or scoping) or time/freq step ids use scoping with TimeFreq_steps location) required in output.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> op.inputs.time_scoping.connect(my_time_scoping)
        >>> # or
        >>> op.inputs.time_scoping(my_time_scoping)
        """
        return self._time_scoping

    @property
    def mesh_scoping(self) -> Input:
        r"""Allows to connect mesh_scoping input to the operator.

        nodes or elements scoping required in output.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
        >>> # or
        >>> op.inputs.mesh_scoping(my_mesh_scoping)
        """
        return self._mesh_scoping

    @property
    def streams_container(self) -> Input:
        r"""Allows to connect streams_container input to the operator.

        result file container allowed to be kept open to cache data.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> op.inputs.streams_container.connect(my_streams_container)
        >>> # or
        >>> op.inputs.streams_container(my_streams_container)
        """
        return self._streams_container

    @property
    def data_sources(self) -> Input:
        r"""Allows to connect data_sources input to the operator.

        result file path container.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> op.inputs.data_sources.connect(my_data_sources)
        >>> # or
        >>> op.inputs.data_sources(my_data_sources)
        """
        return self._data_sources

    @property
    def mesh(self) -> Input:
        r"""Allows to connect mesh input to the operator.

        prevents from reading the mesh in the results file.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh

    @property
    def requested_location(self) -> Input:
        r"""Allows to connect requested_location input to the operator.

        average the elemental nodal result to the requested location (default is nodal).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> op.inputs.requested_location.connect(my_requested_location)
        >>> # or
        >>> op.inputs.requested_location(my_requested_location)
        """
        return self._requested_location

    @property
    def read_cyclic(self) -> Input:
        r"""Allows to connect read_cyclic input to the operator.

        if true, cyclic expansion is done. If false, it's ignored..

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> op.inputs.read_cyclic.connect(my_read_cyclic)
        >>> # or
        >>> op.inputs.read_cyclic(my_read_cyclic)
        """
        return self._read_cyclic

    @property
    def average_across_bodies(self) -> Input:
        r"""Allows to connect average_across_bodies input to the operator.

        for multibody simulations, the stresses are averaged across bodies if true or not if false (default).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> op.inputs.average_across_bodies.connect(my_average_across_bodies)
        >>> # or
        >>> op.inputs.average_across_bodies(my_average_across_bodies)
        """
        return self._average_across_bodies


class OutputsStrainEqvAsMechanicalWorkflow(_Outputs):
    """Intermediate class used to get outputs from
    strain_eqv_as_mechanical_workflow operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
    >>> # Connect inputs : op.inputs. ...
    >>> result_workflow = op.outputs.workflow()
    """

    def __init__(self, op: Operator):
        super().__init__(strain_eqv_as_mechanical_workflow._spec().outputs, op)
        self._workflow = Output(
            strain_eqv_as_mechanical_workflow._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._workflow)

    @property
    def workflow(self) -> Output:
        r"""Allows to get workflow output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.strain_eqv_as_mechanical_workflow()
        >>> # Get the output from op.outputs. ...
        >>> result_workflow = op.outputs.workflow()
        """
        return self._workflow
