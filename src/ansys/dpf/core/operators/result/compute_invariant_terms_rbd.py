"""
compute_invariant_terms_rbd

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class compute_invariant_terms_rbd(Operator):
    r"""Set the required data for the invariant terms computation (reduced
    matrices, lumped mass matrix, modes …)


    Parameters
    ----------
    rom_matrices: FieldsContainer
        FieldsContainers containing the reduced matrices
    mode_shapes: FieldsContainer
        FieldsContainers containing the mode shapes, which are CST and NOR for the cms method
    lumped_mass: FieldsContainer
        FieldsContainers containing the lumped mass
    model_data: FieldsContainer
        data describing the finite element model
    center_of_mass: FieldsContainer
    inertia_relief: FieldsContainer
        inertia matrix
    model_size: float
        model size
    field_coordinates: Field
        coordinates of all nodes
    nod:
    constraint_mode_check: bool, optional
        if true, the orthogonality of the constraint modes are checked. Default is false.

    Returns
    -------
    model_data: PropertyField
        data describing the finite element model
    center_of_mass: Field
        center of mass of the body
    inertia_relief: Field
        inertia matrix
    model_size: PropertyField
    master_node_coordinates:
    v_trsf:
        translational and rotational shape functions
    k_mat: Field
    mass_mat: Field
    c_mat: Field
    rhs: Field
    dn:
    dr_cross_n:
    drn:
    dn_cross_n:
    dnx_y:
    dny_y:
    dnz_y:
    dyx_n:
    dyy_n:
    dyz_n:
    dnxn:
    dnyn:
    dnzn:

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.result.compute_invariant_terms_rbd()

    >>> # Make input connections
    >>> my_rom_matrices = dpf.FieldsContainer()
    >>> op.inputs.rom_matrices.connect(my_rom_matrices)
    >>> my_mode_shapes = dpf.FieldsContainer()
    >>> op.inputs.mode_shapes.connect(my_mode_shapes)
    >>> my_lumped_mass = dpf.FieldsContainer()
    >>> op.inputs.lumped_mass.connect(my_lumped_mass)
    >>> my_model_data = dpf.FieldsContainer()
    >>> op.inputs.model_data.connect(my_model_data)
    >>> my_center_of_mass = dpf.FieldsContainer()
    >>> op.inputs.center_of_mass.connect(my_center_of_mass)
    >>> my_inertia_relief = dpf.FieldsContainer()
    >>> op.inputs.inertia_relief.connect(my_inertia_relief)
    >>> my_model_size = float()
    >>> op.inputs.model_size.connect(my_model_size)
    >>> my_field_coordinates = dpf.Field()
    >>> op.inputs.field_coordinates.connect(my_field_coordinates)
    >>> my_nod = dpf.()
    >>> op.inputs.nod.connect(my_nod)
    >>> my_constraint_mode_check = bool()
    >>> op.inputs.constraint_mode_check.connect(my_constraint_mode_check)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.result.compute_invariant_terms_rbd(
    ...     rom_matrices=my_rom_matrices,
    ...     mode_shapes=my_mode_shapes,
    ...     lumped_mass=my_lumped_mass,
    ...     model_data=my_model_data,
    ...     center_of_mass=my_center_of_mass,
    ...     inertia_relief=my_inertia_relief,
    ...     model_size=my_model_size,
    ...     field_coordinates=my_field_coordinates,
    ...     nod=my_nod,
    ...     constraint_mode_check=my_constraint_mode_check,
    ... )

    >>> # Get output data
    >>> result_model_data = op.outputs.model_data()
    >>> result_center_of_mass = op.outputs.center_of_mass()
    >>> result_inertia_relief = op.outputs.inertia_relief()
    >>> result_model_size = op.outputs.model_size()
    >>> result_master_node_coordinates = op.outputs.master_node_coordinates()
    >>> result_v_trsf = op.outputs.v_trsf()
    >>> result_k_mat = op.outputs.k_mat()
    >>> result_mass_mat = op.outputs.mass_mat()
    >>> result_c_mat = op.outputs.c_mat()
    >>> result_rhs = op.outputs.rhs()
    >>> result_dn = op.outputs.dn()
    >>> result_dr_cross_n = op.outputs.dr_cross_n()
    >>> result_drn = op.outputs.drn()
    >>> result_dn_cross_n = op.outputs.dn_cross_n()
    >>> result_dnx_y = op.outputs.dnx_y()
    >>> result_dny_y = op.outputs.dny_y()
    >>> result_dnz_y = op.outputs.dnz_y()
    >>> result_dyx_n = op.outputs.dyx_n()
    >>> result_dyy_n = op.outputs.dyy_n()
    >>> result_dyz_n = op.outputs.dyz_n()
    >>> result_dnxn = op.outputs.dnxn()
    >>> result_dnyn = op.outputs.dnyn()
    >>> result_dnzn = op.outputs.dnzn()
    """

    def __init__(
        self,
        rom_matrices=None,
        mode_shapes=None,
        lumped_mass=None,
        model_data=None,
        center_of_mass=None,
        inertia_relief=None,
        model_size=None,
        field_coordinates=None,
        nod=None,
        constraint_mode_check=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="compute_invariant_terms_rbd", config=config, server=server
        )
        self._inputs = InputsComputeInvariantTermsRbd(self)
        self._outputs = OutputsComputeInvariantTermsRbd(self)
        if rom_matrices is not None:
            self.inputs.rom_matrices.connect(rom_matrices)
        if mode_shapes is not None:
            self.inputs.mode_shapes.connect(mode_shapes)
        if lumped_mass is not None:
            self.inputs.lumped_mass.connect(lumped_mass)
        if model_data is not None:
            self.inputs.model_data.connect(model_data)
        if center_of_mass is not None:
            self.inputs.center_of_mass.connect(center_of_mass)
        if inertia_relief is not None:
            self.inputs.inertia_relief.connect(inertia_relief)
        if model_size is not None:
            self.inputs.model_size.connect(model_size)
        if field_coordinates is not None:
            self.inputs.field_coordinates.connect(field_coordinates)
        if nod is not None:
            self.inputs.nod.connect(nod)
        if constraint_mode_check is not None:
            self.inputs.constraint_mode_check.connect(constraint_mode_check)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Set the required data for the invariant terms computation (reduced
matrices, lumped mass matrix, modes …)
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="rom_matrices",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""FieldsContainers containing the reduced matrices""",
                ),
                1: PinSpecification(
                    name="mode_shapes",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""FieldsContainers containing the mode shapes, which are CST and NOR for the cms method""",
                ),
                2: PinSpecification(
                    name="lumped_mass",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""FieldsContainers containing the lumped mass""",
                ),
                3: PinSpecification(
                    name="model_data",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""data describing the finite element model""",
                ),
                4: PinSpecification(
                    name="center_of_mass",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                5: PinSpecification(
                    name="inertia_relief",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""inertia matrix""",
                ),
                6: PinSpecification(
                    name="model_size",
                    type_names=["double"],
                    optional=False,
                    document=r"""model size""",
                ),
                7: PinSpecification(
                    name="field_coordinates",
                    type_names=["field"],
                    optional=False,
                    document=r"""coordinates of all nodes""",
                ),
                8: PinSpecification(
                    name="nod",
                    type_names=["vector<int32>"],
                    optional=False,
                    document=r"""""",
                ),
                9: PinSpecification(
                    name="constraint_mode_check",
                    type_names=["bool"],
                    optional=True,
                    document=r"""if true, the orthogonality of the constraint modes are checked. Default is false.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="model_data",
                    type_names=["property_field"],
                    optional=False,
                    document=r"""data describing the finite element model""",
                ),
                1: PinSpecification(
                    name="center_of_mass",
                    type_names=["field"],
                    optional=False,
                    document=r"""center of mass of the body""",
                ),
                2: PinSpecification(
                    name="inertia_relief",
                    type_names=["field"],
                    optional=False,
                    document=r"""inertia matrix""",
                ),
                3: PinSpecification(
                    name="model_size",
                    type_names=["property_field"],
                    optional=False,
                    document=r"""""",
                ),
                4: PinSpecification(
                    name="master_node_coordinates",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                5: PinSpecification(
                    name="v_trsf",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""translational and rotational shape functions""",
                ),
                6: PinSpecification(
                    name="k_mat",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                7: PinSpecification(
                    name="mass_mat",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                8: PinSpecification(
                    name="c_mat",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                9: PinSpecification(
                    name="rhs",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                10: PinSpecification(
                    name="dn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                11: PinSpecification(
                    name="dr_cross_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                12: PinSpecification(
                    name="drn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                13: PinSpecification(
                    name="dn_cross_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                14: PinSpecification(
                    name="dnx_y",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                15: PinSpecification(
                    name="dny_y",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                16: PinSpecification(
                    name="dnz_y",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                17: PinSpecification(
                    name="dyx_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                18: PinSpecification(
                    name="dyy_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                19: PinSpecification(
                    name="dyz_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                20: PinSpecification(
                    name="dnxn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                21: PinSpecification(
                    name="dnyn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                22: PinSpecification(
                    name="dnzn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(
            name="compute_invariant_terms_rbd", server=server
        )

    @property
    def inputs(self) -> InputsComputeInvariantTermsRbd:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsComputeInvariantTermsRbd.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsComputeInvariantTermsRbd:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsComputeInvariantTermsRbd.
        """
        return super().outputs


class InputsComputeInvariantTermsRbd(_Inputs):
    """Intermediate class used to connect user inputs to
    compute_invariant_terms_rbd operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.compute_invariant_terms_rbd()
    >>> my_rom_matrices = dpf.FieldsContainer()
    >>> op.inputs.rom_matrices.connect(my_rom_matrices)
    >>> my_mode_shapes = dpf.FieldsContainer()
    >>> op.inputs.mode_shapes.connect(my_mode_shapes)
    >>> my_lumped_mass = dpf.FieldsContainer()
    >>> op.inputs.lumped_mass.connect(my_lumped_mass)
    >>> my_model_data = dpf.FieldsContainer()
    >>> op.inputs.model_data.connect(my_model_data)
    >>> my_center_of_mass = dpf.FieldsContainer()
    >>> op.inputs.center_of_mass.connect(my_center_of_mass)
    >>> my_inertia_relief = dpf.FieldsContainer()
    >>> op.inputs.inertia_relief.connect(my_inertia_relief)
    >>> my_model_size = float()
    >>> op.inputs.model_size.connect(my_model_size)
    >>> my_field_coordinates = dpf.Field()
    >>> op.inputs.field_coordinates.connect(my_field_coordinates)
    >>> my_nod = dpf.()
    >>> op.inputs.nod.connect(my_nod)
    >>> my_constraint_mode_check = bool()
    >>> op.inputs.constraint_mode_check.connect(my_constraint_mode_check)
    """

    def __init__(self, op: Operator):
        super().__init__(compute_invariant_terms_rbd._spec().inputs, op)
        self._rom_matrices = Input(
            compute_invariant_terms_rbd._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._rom_matrices)
        self._mode_shapes = Input(
            compute_invariant_terms_rbd._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._mode_shapes)
        self._lumped_mass = Input(
            compute_invariant_terms_rbd._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._lumped_mass)
        self._model_data = Input(
            compute_invariant_terms_rbd._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._model_data)
        self._center_of_mass = Input(
            compute_invariant_terms_rbd._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._center_of_mass)
        self._inertia_relief = Input(
            compute_invariant_terms_rbd._spec().input_pin(5), 5, op, -1
        )
        self._inputs.append(self._inertia_relief)
        self._model_size = Input(
            compute_invariant_terms_rbd._spec().input_pin(6), 6, op, -1
        )
        self._inputs.append(self._model_size)
        self._field_coordinates = Input(
            compute_invariant_terms_rbd._spec().input_pin(7), 7, op, -1
        )
        self._inputs.append(self._field_coordinates)
        self._nod = Input(compute_invariant_terms_rbd._spec().input_pin(8), 8, op, -1)
        self._inputs.append(self._nod)
        self._constraint_mode_check = Input(
            compute_invariant_terms_rbd._spec().input_pin(9), 9, op, -1
        )
        self._inputs.append(self._constraint_mode_check)

    @property
    def rom_matrices(self) -> Input:
        r"""Allows to connect rom_matrices input to the operator.

        FieldsContainers containing the reduced matrices

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.rom_matrices.connect(my_rom_matrices)
        >>> # or
        >>> op.inputs.rom_matrices(my_rom_matrices)
        """
        return self._rom_matrices

    @property
    def mode_shapes(self) -> Input:
        r"""Allows to connect mode_shapes input to the operator.

        FieldsContainers containing the mode shapes, which are CST and NOR for the cms method

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.mode_shapes.connect(my_mode_shapes)
        >>> # or
        >>> op.inputs.mode_shapes(my_mode_shapes)
        """
        return self._mode_shapes

    @property
    def lumped_mass(self) -> Input:
        r"""Allows to connect lumped_mass input to the operator.

        FieldsContainers containing the lumped mass

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.lumped_mass.connect(my_lumped_mass)
        >>> # or
        >>> op.inputs.lumped_mass(my_lumped_mass)
        """
        return self._lumped_mass

    @property
    def model_data(self) -> Input:
        r"""Allows to connect model_data input to the operator.

        data describing the finite element model

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.model_data.connect(my_model_data)
        >>> # or
        >>> op.inputs.model_data(my_model_data)
        """
        return self._model_data

    @property
    def center_of_mass(self) -> Input:
        r"""Allows to connect center_of_mass input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.center_of_mass.connect(my_center_of_mass)
        >>> # or
        >>> op.inputs.center_of_mass(my_center_of_mass)
        """
        return self._center_of_mass

    @property
    def inertia_relief(self) -> Input:
        r"""Allows to connect inertia_relief input to the operator.

        inertia matrix

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.inertia_relief.connect(my_inertia_relief)
        >>> # or
        >>> op.inputs.inertia_relief(my_inertia_relief)
        """
        return self._inertia_relief

    @property
    def model_size(self) -> Input:
        r"""Allows to connect model_size input to the operator.

        model size

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.model_size.connect(my_model_size)
        >>> # or
        >>> op.inputs.model_size(my_model_size)
        """
        return self._model_size

    @property
    def field_coordinates(self) -> Input:
        r"""Allows to connect field_coordinates input to the operator.

        coordinates of all nodes

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.field_coordinates.connect(my_field_coordinates)
        >>> # or
        >>> op.inputs.field_coordinates(my_field_coordinates)
        """
        return self._field_coordinates

    @property
    def nod(self) -> Input:
        r"""Allows to connect nod input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.nod.connect(my_nod)
        >>> # or
        >>> op.inputs.nod(my_nod)
        """
        return self._nod

    @property
    def constraint_mode_check(self) -> Input:
        r"""Allows to connect constraint_mode_check input to the operator.

        if true, the orthogonality of the constraint modes are checked. Default is false.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> op.inputs.constraint_mode_check.connect(my_constraint_mode_check)
        >>> # or
        >>> op.inputs.constraint_mode_check(my_constraint_mode_check)
        """
        return self._constraint_mode_check


class OutputsComputeInvariantTermsRbd(_Outputs):
    """Intermediate class used to get outputs from
    compute_invariant_terms_rbd operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.compute_invariant_terms_rbd()
    >>> # Connect inputs : op.inputs. ...
    >>> result_model_data = op.outputs.model_data()
    >>> result_center_of_mass = op.outputs.center_of_mass()
    >>> result_inertia_relief = op.outputs.inertia_relief()
    >>> result_model_size = op.outputs.model_size()
    >>> result_master_node_coordinates = op.outputs.master_node_coordinates()
    >>> result_v_trsf = op.outputs.v_trsf()
    >>> result_k_mat = op.outputs.k_mat()
    >>> result_mass_mat = op.outputs.mass_mat()
    >>> result_c_mat = op.outputs.c_mat()
    >>> result_rhs = op.outputs.rhs()
    >>> result_dn = op.outputs.dn()
    >>> result_dr_cross_n = op.outputs.dr_cross_n()
    >>> result_drn = op.outputs.drn()
    >>> result_dn_cross_n = op.outputs.dn_cross_n()
    >>> result_dnx_y = op.outputs.dnx_y()
    >>> result_dny_y = op.outputs.dny_y()
    >>> result_dnz_y = op.outputs.dnz_y()
    >>> result_dyx_n = op.outputs.dyx_n()
    >>> result_dyy_n = op.outputs.dyy_n()
    >>> result_dyz_n = op.outputs.dyz_n()
    >>> result_dnxn = op.outputs.dnxn()
    >>> result_dnyn = op.outputs.dnyn()
    >>> result_dnzn = op.outputs.dnzn()
    """

    def __init__(self, op: Operator):
        super().__init__(compute_invariant_terms_rbd._spec().outputs, op)
        self._model_data = Output(
            compute_invariant_terms_rbd._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._model_data)
        self._center_of_mass = Output(
            compute_invariant_terms_rbd._spec().output_pin(1), 1, op
        )
        self._outputs.append(self._center_of_mass)
        self._inertia_relief = Output(
            compute_invariant_terms_rbd._spec().output_pin(2), 2, op
        )
        self._outputs.append(self._inertia_relief)
        self._model_size = Output(
            compute_invariant_terms_rbd._spec().output_pin(3), 3, op
        )
        self._outputs.append(self._model_size)
        self._master_node_coordinates = Output(
            compute_invariant_terms_rbd._spec().output_pin(4), 4, op
        )
        self._outputs.append(self._master_node_coordinates)
        self._v_trsf = Output(compute_invariant_terms_rbd._spec().output_pin(5), 5, op)
        self._outputs.append(self._v_trsf)
        self._k_mat = Output(compute_invariant_terms_rbd._spec().output_pin(6), 6, op)
        self._outputs.append(self._k_mat)
        self._mass_mat = Output(
            compute_invariant_terms_rbd._spec().output_pin(7), 7, op
        )
        self._outputs.append(self._mass_mat)
        self._c_mat = Output(compute_invariant_terms_rbd._spec().output_pin(8), 8, op)
        self._outputs.append(self._c_mat)
        self._rhs = Output(compute_invariant_terms_rbd._spec().output_pin(9), 9, op)
        self._outputs.append(self._rhs)
        self._dn = Output(compute_invariant_terms_rbd._spec().output_pin(10), 10, op)
        self._outputs.append(self._dn)
        self._dr_cross_n = Output(
            compute_invariant_terms_rbd._spec().output_pin(11), 11, op
        )
        self._outputs.append(self._dr_cross_n)
        self._drn = Output(compute_invariant_terms_rbd._spec().output_pin(12), 12, op)
        self._outputs.append(self._drn)
        self._dn_cross_n = Output(
            compute_invariant_terms_rbd._spec().output_pin(13), 13, op
        )
        self._outputs.append(self._dn_cross_n)
        self._dnx_y = Output(compute_invariant_terms_rbd._spec().output_pin(14), 14, op)
        self._outputs.append(self._dnx_y)
        self._dny_y = Output(compute_invariant_terms_rbd._spec().output_pin(15), 15, op)
        self._outputs.append(self._dny_y)
        self._dnz_y = Output(compute_invariant_terms_rbd._spec().output_pin(16), 16, op)
        self._outputs.append(self._dnz_y)
        self._dyx_n = Output(compute_invariant_terms_rbd._spec().output_pin(17), 17, op)
        self._outputs.append(self._dyx_n)
        self._dyy_n = Output(compute_invariant_terms_rbd._spec().output_pin(18), 18, op)
        self._outputs.append(self._dyy_n)
        self._dyz_n = Output(compute_invariant_terms_rbd._spec().output_pin(19), 19, op)
        self._outputs.append(self._dyz_n)
        self._dnxn = Output(compute_invariant_terms_rbd._spec().output_pin(20), 20, op)
        self._outputs.append(self._dnxn)
        self._dnyn = Output(compute_invariant_terms_rbd._spec().output_pin(21), 21, op)
        self._outputs.append(self._dnyn)
        self._dnzn = Output(compute_invariant_terms_rbd._spec().output_pin(22), 22, op)
        self._outputs.append(self._dnzn)

    @property
    def model_data(self) -> Output:
        r"""Allows to get model_data output of the operator

        data describing the finite element model

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_model_data = op.outputs.model_data()
        """
        return self._model_data

    @property
    def center_of_mass(self) -> Output:
        r"""Allows to get center_of_mass output of the operator

        center of mass of the body

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_center_of_mass = op.outputs.center_of_mass()
        """
        return self._center_of_mass

    @property
    def inertia_relief(self) -> Output:
        r"""Allows to get inertia_relief output of the operator

        inertia matrix

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_inertia_relief = op.outputs.inertia_relief()
        """
        return self._inertia_relief

    @property
    def model_size(self) -> Output:
        r"""Allows to get model_size output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_model_size = op.outputs.model_size()
        """
        return self._model_size

    @property
    def master_node_coordinates(self) -> Output:
        r"""Allows to get master_node_coordinates output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_master_node_coordinates = op.outputs.master_node_coordinates()
        """
        return self._master_node_coordinates

    @property
    def v_trsf(self) -> Output:
        r"""Allows to get v_trsf output of the operator

        translational and rotational shape functions

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_v_trsf = op.outputs.v_trsf()
        """
        return self._v_trsf

    @property
    def k_mat(self) -> Output:
        r"""Allows to get k_mat output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_k_mat = op.outputs.k_mat()
        """
        return self._k_mat

    @property
    def mass_mat(self) -> Output:
        r"""Allows to get mass_mat output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_mass_mat = op.outputs.mass_mat()
        """
        return self._mass_mat

    @property
    def c_mat(self) -> Output:
        r"""Allows to get c_mat output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_c_mat = op.outputs.c_mat()
        """
        return self._c_mat

    @property
    def rhs(self) -> Output:
        r"""Allows to get rhs output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_rhs = op.outputs.rhs()
        """
        return self._rhs

    @property
    def dn(self) -> Output:
        r"""Allows to get dn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dn = op.outputs.dn()
        """
        return self._dn

    @property
    def dr_cross_n(self) -> Output:
        r"""Allows to get dr_cross_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dr_cross_n = op.outputs.dr_cross_n()
        """
        return self._dr_cross_n

    @property
    def drn(self) -> Output:
        r"""Allows to get drn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_drn = op.outputs.drn()
        """
        return self._drn

    @property
    def dn_cross_n(self) -> Output:
        r"""Allows to get dn_cross_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dn_cross_n = op.outputs.dn_cross_n()
        """
        return self._dn_cross_n

    @property
    def dnx_y(self) -> Output:
        r"""Allows to get dnx_y output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dnx_y = op.outputs.dnx_y()
        """
        return self._dnx_y

    @property
    def dny_y(self) -> Output:
        r"""Allows to get dny_y output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dny_y = op.outputs.dny_y()
        """
        return self._dny_y

    @property
    def dnz_y(self) -> Output:
        r"""Allows to get dnz_y output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dnz_y = op.outputs.dnz_y()
        """
        return self._dnz_y

    @property
    def dyx_n(self) -> Output:
        r"""Allows to get dyx_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dyx_n = op.outputs.dyx_n()
        """
        return self._dyx_n

    @property
    def dyy_n(self) -> Output:
        r"""Allows to get dyy_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dyy_n = op.outputs.dyy_n()
        """
        return self._dyy_n

    @property
    def dyz_n(self) -> Output:
        r"""Allows to get dyz_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dyz_n = op.outputs.dyz_n()
        """
        return self._dyz_n

    @property
    def dnxn(self) -> Output:
        r"""Allows to get dnxn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dnxn = op.outputs.dnxn()
        """
        return self._dnxn

    @property
    def dnyn(self) -> Output:
        r"""Allows to get dnyn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dnyn = op.outputs.dnyn()
        """
        return self._dnyn

    @property
    def dnzn(self) -> Output:
        r"""Allows to get dnzn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_invariant_terms_rbd()
        >>> # Get the output from op.outputs. ...
        >>> result_dnzn = op.outputs.dnzn()
        """
        return self._dnzn
