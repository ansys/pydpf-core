"""
equivalent_radiated_power

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class equivalent_radiated_power(Operator):
    r"""Compute the Equivalent Radiated Power (ERP)


    Parameters
    ----------
    fields_container: FieldsContainer
        the input field container expects displacements fields
    mesh: MeshedRegion or MeshesContainer
        the mesh region in this pin has to be boundary or skin mesh
    time_scoping: int or Scoping
        load step number (if it's specified, the ERP is computed only on the substeps of this step) or time scoping
    mass_density: float
        mass density (if it's not specified, default value of the air is applied).
    speed_of_sound: float
        speed of sound (if it's not specified, default value of the speed of sound in the air is applied).
    erp_type: int
        if this pin is set to 0, the classical ERP is computed, 1 the corrected ERP is computed (a mesh of one face has to be given in the pin 1) and 2 the enhanced ERP is computed. Default is 0.
    boolean: bool
        if this pin is set to true, the ERP level in dB is computed
    factor: float
        erp reference value. Default is 1E-12

    Returns
    -------
    fields_container: FieldsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.result.equivalent_radiated_power()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_time_scoping = int()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_mass_density = float()
    >>> op.inputs.mass_density.connect(my_mass_density)
    >>> my_speed_of_sound = float()
    >>> op.inputs.speed_of_sound.connect(my_speed_of_sound)
    >>> my_erp_type = int()
    >>> op.inputs.erp_type.connect(my_erp_type)
    >>> my_boolean = bool()
    >>> op.inputs.boolean.connect(my_boolean)
    >>> my_factor = float()
    >>> op.inputs.factor.connect(my_factor)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.result.equivalent_radiated_power(
    ...     fields_container=my_fields_container,
    ...     mesh=my_mesh,
    ...     time_scoping=my_time_scoping,
    ...     mass_density=my_mass_density,
    ...     speed_of_sound=my_speed_of_sound,
    ...     erp_type=my_erp_type,
    ...     boolean=my_boolean,
    ...     factor=my_factor,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        mesh=None,
        time_scoping=None,
        mass_density=None,
        speed_of_sound=None,
        erp_type=None,
        boolean=None,
        factor=None,
        config=None,
        server=None,
    ):
        super().__init__(name="ERP", config=config, server=server)
        self._inputs = InputsEquivalentRadiatedPower(self)
        self._outputs = OutputsEquivalentRadiatedPower(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)
        if time_scoping is not None:
            self.inputs.time_scoping.connect(time_scoping)
        if mass_density is not None:
            self.inputs.mass_density.connect(mass_density)
        if speed_of_sound is not None:
            self.inputs.speed_of_sound.connect(speed_of_sound)
        if erp_type is not None:
            self.inputs.erp_type.connect(erp_type)
        if boolean is not None:
            self.inputs.boolean.connect(boolean)
        if factor is not None:
            self.inputs.factor.connect(factor)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Compute the Equivalent Radiated Power (ERP)
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""the input field container expects displacements fields""",
                ),
                1: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region", "meshes_container"],
                    optional=False,
                    document=r"""the mesh region in this pin has to be boundary or skin mesh""",
                ),
                2: PinSpecification(
                    name="time_scoping",
                    type_names=["int32", "vector<int32>", "scoping"],
                    optional=False,
                    document=r"""load step number (if it's specified, the ERP is computed only on the substeps of this step) or time scoping""",
                ),
                3: PinSpecification(
                    name="mass_density",
                    type_names=["double"],
                    optional=False,
                    document=r"""mass density (if it's not specified, default value of the air is applied).""",
                ),
                4: PinSpecification(
                    name="speed_of_sound",
                    type_names=["double"],
                    optional=False,
                    document=r"""speed of sound (if it's not specified, default value of the speed of sound in the air is applied).""",
                ),
                5: PinSpecification(
                    name="erp_type",
                    type_names=["int32"],
                    optional=False,
                    document=r"""if this pin is set to 0, the classical ERP is computed, 1 the corrected ERP is computed (a mesh of one face has to be given in the pin 1) and 2 the enhanced ERP is computed. Default is 0.""",
                ),
                6: PinSpecification(
                    name="boolean",
                    type_names=["bool"],
                    optional=False,
                    document=r"""if this pin is set to true, the ERP level in dB is computed""",
                ),
                7: PinSpecification(
                    name="factor",
                    type_names=["double"],
                    optional=False,
                    document=r"""erp reference value. Default is 1E-12""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="ERP", server=server)

    @property
    def inputs(self) -> InputsEquivalentRadiatedPower:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsEquivalentRadiatedPower.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsEquivalentRadiatedPower:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsEquivalentRadiatedPower.
        """
        return super().outputs


class InputsEquivalentRadiatedPower(_Inputs):
    """Intermediate class used to connect user inputs to
    equivalent_radiated_power operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.equivalent_radiated_power()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_time_scoping = int()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_mass_density = float()
    >>> op.inputs.mass_density.connect(my_mass_density)
    >>> my_speed_of_sound = float()
    >>> op.inputs.speed_of_sound.connect(my_speed_of_sound)
    >>> my_erp_type = int()
    >>> op.inputs.erp_type.connect(my_erp_type)
    >>> my_boolean = bool()
    >>> op.inputs.boolean.connect(my_boolean)
    >>> my_factor = float()
    >>> op.inputs.factor.connect(my_factor)
    """

    def __init__(self, op: Operator):
        super().__init__(equivalent_radiated_power._spec().inputs, op)
        self._fields_container = Input(
            equivalent_radiated_power._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._mesh = Input(equivalent_radiated_power._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._mesh)
        self._time_scoping = Input(
            equivalent_radiated_power._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._time_scoping)
        self._mass_density = Input(
            equivalent_radiated_power._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._mass_density)
        self._speed_of_sound = Input(
            equivalent_radiated_power._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._speed_of_sound)
        self._erp_type = Input(
            equivalent_radiated_power._spec().input_pin(5), 5, op, -1
        )
        self._inputs.append(self._erp_type)
        self._boolean = Input(equivalent_radiated_power._spec().input_pin(6), 6, op, -1)
        self._inputs.append(self._boolean)
        self._factor = Input(equivalent_radiated_power._spec().input_pin(7), 7, op, -1)
        self._inputs.append(self._factor)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        the input field container expects displacements fields

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def mesh(self) -> Input:
        r"""Allows to connect mesh input to the operator.

        the mesh region in this pin has to be boundary or skin mesh

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh

    @property
    def time_scoping(self) -> Input:
        r"""Allows to connect time_scoping input to the operator.

        load step number (if it's specified, the ERP is computed only on the substeps of this step) or time scoping

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> op.inputs.time_scoping.connect(my_time_scoping)
        >>> # or
        >>> op.inputs.time_scoping(my_time_scoping)
        """
        return self._time_scoping

    @property
    def mass_density(self) -> Input:
        r"""Allows to connect mass_density input to the operator.

        mass density (if it's not specified, default value of the air is applied).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> op.inputs.mass_density.connect(my_mass_density)
        >>> # or
        >>> op.inputs.mass_density(my_mass_density)
        """
        return self._mass_density

    @property
    def speed_of_sound(self) -> Input:
        r"""Allows to connect speed_of_sound input to the operator.

        speed of sound (if it's not specified, default value of the speed of sound in the air is applied).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> op.inputs.speed_of_sound.connect(my_speed_of_sound)
        >>> # or
        >>> op.inputs.speed_of_sound(my_speed_of_sound)
        """
        return self._speed_of_sound

    @property
    def erp_type(self) -> Input:
        r"""Allows to connect erp_type input to the operator.

        if this pin is set to 0, the classical ERP is computed, 1 the corrected ERP is computed (a mesh of one face has to be given in the pin 1) and 2 the enhanced ERP is computed. Default is 0.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> op.inputs.erp_type.connect(my_erp_type)
        >>> # or
        >>> op.inputs.erp_type(my_erp_type)
        """
        return self._erp_type

    @property
    def boolean(self) -> Input:
        r"""Allows to connect boolean input to the operator.

        if this pin is set to true, the ERP level in dB is computed

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> op.inputs.boolean.connect(my_boolean)
        >>> # or
        >>> op.inputs.boolean(my_boolean)
        """
        return self._boolean

    @property
    def factor(self) -> Input:
        r"""Allows to connect factor input to the operator.

        erp reference value. Default is 1E-12

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> op.inputs.factor.connect(my_factor)
        >>> # or
        >>> op.inputs.factor(my_factor)
        """
        return self._factor


class OutputsEquivalentRadiatedPower(_Outputs):
    """Intermediate class used to get outputs from
    equivalent_radiated_power operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.equivalent_radiated_power()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(equivalent_radiated_power._spec().outputs, op)
        self._fields_container = Output(
            equivalent_radiated_power._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self) -> Output:
        r"""Allows to get fields_container output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.equivalent_radiated_power()
        >>> # Get the output from op.outputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """
        return self._fields_container
