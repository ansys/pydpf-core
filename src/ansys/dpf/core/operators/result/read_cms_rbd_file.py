"""
read_cms_rbd_file

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class read_cms_rbd_file(Operator):
    r"""Read the invariant terms and the model data from a cms_rbd file


    Parameters
    ----------
    in_cms_rbd_file_path: str
        file name with cms_rbd extension where to read the input cms_rbd file.

    Returns
    -------
    model_data: PropertyField
        data describing the finite element model
    center_of_mass: Field
        center of mass of the body
    inertia_relief: Field
        inertia matrix
    model_size: PropertyField
    master_node_coordinates:
    v_trsf:
        translational and rotational shape functions
    k_mat: Field
    mass_mat: Field
    c_mat: Field
    rhs: Field
    dn:
    dr_cross_n:
    drn:
    dn_cross_n:
    dnx_y:
    dny_y:
    dnz_y:
    dyx_n:
    dyy_n:
    dyz_n:
    dnxn:
    dnyn:
    dnzn:

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.result.read_cms_rbd_file()

    >>> # Make input connections
    >>> my_in_cms_rbd_file_path = str()
    >>> op.inputs.in_cms_rbd_file_path.connect(my_in_cms_rbd_file_path)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.result.read_cms_rbd_file(
    ...     in_cms_rbd_file_path=my_in_cms_rbd_file_path,
    ... )

    >>> # Get output data
    >>> result_model_data = op.outputs.model_data()
    >>> result_center_of_mass = op.outputs.center_of_mass()
    >>> result_inertia_relief = op.outputs.inertia_relief()
    >>> result_model_size = op.outputs.model_size()
    >>> result_master_node_coordinates = op.outputs.master_node_coordinates()
    >>> result_v_trsf = op.outputs.v_trsf()
    >>> result_k_mat = op.outputs.k_mat()
    >>> result_mass_mat = op.outputs.mass_mat()
    >>> result_c_mat = op.outputs.c_mat()
    >>> result_rhs = op.outputs.rhs()
    >>> result_dn = op.outputs.dn()
    >>> result_dr_cross_n = op.outputs.dr_cross_n()
    >>> result_drn = op.outputs.drn()
    >>> result_dn_cross_n = op.outputs.dn_cross_n()
    >>> result_dnx_y = op.outputs.dnx_y()
    >>> result_dny_y = op.outputs.dny_y()
    >>> result_dnz_y = op.outputs.dnz_y()
    >>> result_dyx_n = op.outputs.dyx_n()
    >>> result_dyy_n = op.outputs.dyy_n()
    >>> result_dyz_n = op.outputs.dyz_n()
    >>> result_dnxn = op.outputs.dnxn()
    >>> result_dnyn = op.outputs.dnyn()
    >>> result_dnzn = op.outputs.dnzn()
    """

    def __init__(self, in_cms_rbd_file_path=None, config=None, server=None):
        super().__init__(name="read_cms_rbd_file", config=config, server=server)
        self._inputs = InputsReadCmsRbdFile(self)
        self._outputs = OutputsReadCmsRbdFile(self)
        if in_cms_rbd_file_path is not None:
            self.inputs.in_cms_rbd_file_path.connect(in_cms_rbd_file_path)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Read the invariant terms and the model data from a cms_rbd file
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="in_cms_rbd_file_path",
                    type_names=["string"],
                    optional=False,
                    document=r"""file name with cms_rbd extension where to read the input cms_rbd file.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="model_data",
                    type_names=["property_field"],
                    optional=False,
                    document=r"""data describing the finite element model""",
                ),
                1: PinSpecification(
                    name="center_of_mass",
                    type_names=["field"],
                    optional=False,
                    document=r"""center of mass of the body""",
                ),
                2: PinSpecification(
                    name="inertia_relief",
                    type_names=["field"],
                    optional=False,
                    document=r"""inertia matrix""",
                ),
                3: PinSpecification(
                    name="model_size",
                    type_names=["property_field"],
                    optional=False,
                    document=r"""""",
                ),
                4: PinSpecification(
                    name="master_node_coordinates",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                5: PinSpecification(
                    name="v_trsf",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""translational and rotational shape functions""",
                ),
                6: PinSpecification(
                    name="k_mat",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                7: PinSpecification(
                    name="mass_mat",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                8: PinSpecification(
                    name="c_mat",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                9: PinSpecification(
                    name="rhs",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                10: PinSpecification(
                    name="dn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                11: PinSpecification(
                    name="dr_cross_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                12: PinSpecification(
                    name="drn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                13: PinSpecification(
                    name="dn_cross_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                14: PinSpecification(
                    name="dnx_y",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                15: PinSpecification(
                    name="dny_y",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                16: PinSpecification(
                    name="dnz_y",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                17: PinSpecification(
                    name="dyx_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                18: PinSpecification(
                    name="dyy_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                19: PinSpecification(
                    name="dyz_n",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                20: PinSpecification(
                    name="dnxn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                21: PinSpecification(
                    name="dnyn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
                22: PinSpecification(
                    name="dnzn",
                    type_names=["vector<double>"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="read_cms_rbd_file", server=server)

    @property
    def inputs(self) -> InputsReadCmsRbdFile:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsReadCmsRbdFile.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsReadCmsRbdFile:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsReadCmsRbdFile.
        """
        return super().outputs


class InputsReadCmsRbdFile(_Inputs):
    """Intermediate class used to connect user inputs to
    read_cms_rbd_file operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.read_cms_rbd_file()
    >>> my_in_cms_rbd_file_path = str()
    >>> op.inputs.in_cms_rbd_file_path.connect(my_in_cms_rbd_file_path)
    """

    def __init__(self, op: Operator):
        super().__init__(read_cms_rbd_file._spec().inputs, op)
        self._in_cms_rbd_file_path = Input(
            read_cms_rbd_file._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._in_cms_rbd_file_path)

    @property
    def in_cms_rbd_file_path(self) -> Input:
        r"""Allows to connect in_cms_rbd_file_path input to the operator.

        file name with cms_rbd extension where to read the input cms_rbd file.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> op.inputs.in_cms_rbd_file_path.connect(my_in_cms_rbd_file_path)
        >>> # or
        >>> op.inputs.in_cms_rbd_file_path(my_in_cms_rbd_file_path)
        """
        return self._in_cms_rbd_file_path


class OutputsReadCmsRbdFile(_Outputs):
    """Intermediate class used to get outputs from
    read_cms_rbd_file operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.read_cms_rbd_file()
    >>> # Connect inputs : op.inputs. ...
    >>> result_model_data = op.outputs.model_data()
    >>> result_center_of_mass = op.outputs.center_of_mass()
    >>> result_inertia_relief = op.outputs.inertia_relief()
    >>> result_model_size = op.outputs.model_size()
    >>> result_master_node_coordinates = op.outputs.master_node_coordinates()
    >>> result_v_trsf = op.outputs.v_trsf()
    >>> result_k_mat = op.outputs.k_mat()
    >>> result_mass_mat = op.outputs.mass_mat()
    >>> result_c_mat = op.outputs.c_mat()
    >>> result_rhs = op.outputs.rhs()
    >>> result_dn = op.outputs.dn()
    >>> result_dr_cross_n = op.outputs.dr_cross_n()
    >>> result_drn = op.outputs.drn()
    >>> result_dn_cross_n = op.outputs.dn_cross_n()
    >>> result_dnx_y = op.outputs.dnx_y()
    >>> result_dny_y = op.outputs.dny_y()
    >>> result_dnz_y = op.outputs.dnz_y()
    >>> result_dyx_n = op.outputs.dyx_n()
    >>> result_dyy_n = op.outputs.dyy_n()
    >>> result_dyz_n = op.outputs.dyz_n()
    >>> result_dnxn = op.outputs.dnxn()
    >>> result_dnyn = op.outputs.dnyn()
    >>> result_dnzn = op.outputs.dnzn()
    """

    def __init__(self, op: Operator):
        super().__init__(read_cms_rbd_file._spec().outputs, op)
        self._model_data = Output(read_cms_rbd_file._spec().output_pin(0), 0, op)
        self._outputs.append(self._model_data)
        self._center_of_mass = Output(read_cms_rbd_file._spec().output_pin(1), 1, op)
        self._outputs.append(self._center_of_mass)
        self._inertia_relief = Output(read_cms_rbd_file._spec().output_pin(2), 2, op)
        self._outputs.append(self._inertia_relief)
        self._model_size = Output(read_cms_rbd_file._spec().output_pin(3), 3, op)
        self._outputs.append(self._model_size)
        self._master_node_coordinates = Output(
            read_cms_rbd_file._spec().output_pin(4), 4, op
        )
        self._outputs.append(self._master_node_coordinates)
        self._v_trsf = Output(read_cms_rbd_file._spec().output_pin(5), 5, op)
        self._outputs.append(self._v_trsf)
        self._k_mat = Output(read_cms_rbd_file._spec().output_pin(6), 6, op)
        self._outputs.append(self._k_mat)
        self._mass_mat = Output(read_cms_rbd_file._spec().output_pin(7), 7, op)
        self._outputs.append(self._mass_mat)
        self._c_mat = Output(read_cms_rbd_file._spec().output_pin(8), 8, op)
        self._outputs.append(self._c_mat)
        self._rhs = Output(read_cms_rbd_file._spec().output_pin(9), 9, op)
        self._outputs.append(self._rhs)
        self._dn = Output(read_cms_rbd_file._spec().output_pin(10), 10, op)
        self._outputs.append(self._dn)
        self._dr_cross_n = Output(read_cms_rbd_file._spec().output_pin(11), 11, op)
        self._outputs.append(self._dr_cross_n)
        self._drn = Output(read_cms_rbd_file._spec().output_pin(12), 12, op)
        self._outputs.append(self._drn)
        self._dn_cross_n = Output(read_cms_rbd_file._spec().output_pin(13), 13, op)
        self._outputs.append(self._dn_cross_n)
        self._dnx_y = Output(read_cms_rbd_file._spec().output_pin(14), 14, op)
        self._outputs.append(self._dnx_y)
        self._dny_y = Output(read_cms_rbd_file._spec().output_pin(15), 15, op)
        self._outputs.append(self._dny_y)
        self._dnz_y = Output(read_cms_rbd_file._spec().output_pin(16), 16, op)
        self._outputs.append(self._dnz_y)
        self._dyx_n = Output(read_cms_rbd_file._spec().output_pin(17), 17, op)
        self._outputs.append(self._dyx_n)
        self._dyy_n = Output(read_cms_rbd_file._spec().output_pin(18), 18, op)
        self._outputs.append(self._dyy_n)
        self._dyz_n = Output(read_cms_rbd_file._spec().output_pin(19), 19, op)
        self._outputs.append(self._dyz_n)
        self._dnxn = Output(read_cms_rbd_file._spec().output_pin(20), 20, op)
        self._outputs.append(self._dnxn)
        self._dnyn = Output(read_cms_rbd_file._spec().output_pin(21), 21, op)
        self._outputs.append(self._dnyn)
        self._dnzn = Output(read_cms_rbd_file._spec().output_pin(22), 22, op)
        self._outputs.append(self._dnzn)

    @property
    def model_data(self) -> Output:
        r"""Allows to get model_data output of the operator

        data describing the finite element model

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_model_data = op.outputs.model_data()
        """
        return self._model_data

    @property
    def center_of_mass(self) -> Output:
        r"""Allows to get center_of_mass output of the operator

        center of mass of the body

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_center_of_mass = op.outputs.center_of_mass()
        """
        return self._center_of_mass

    @property
    def inertia_relief(self) -> Output:
        r"""Allows to get inertia_relief output of the operator

        inertia matrix

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_inertia_relief = op.outputs.inertia_relief()
        """
        return self._inertia_relief

    @property
    def model_size(self) -> Output:
        r"""Allows to get model_size output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_model_size = op.outputs.model_size()
        """
        return self._model_size

    @property
    def master_node_coordinates(self) -> Output:
        r"""Allows to get master_node_coordinates output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_master_node_coordinates = op.outputs.master_node_coordinates()
        """
        return self._master_node_coordinates

    @property
    def v_trsf(self) -> Output:
        r"""Allows to get v_trsf output of the operator

        translational and rotational shape functions

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_v_trsf = op.outputs.v_trsf()
        """
        return self._v_trsf

    @property
    def k_mat(self) -> Output:
        r"""Allows to get k_mat output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_k_mat = op.outputs.k_mat()
        """
        return self._k_mat

    @property
    def mass_mat(self) -> Output:
        r"""Allows to get mass_mat output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_mass_mat = op.outputs.mass_mat()
        """
        return self._mass_mat

    @property
    def c_mat(self) -> Output:
        r"""Allows to get c_mat output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_c_mat = op.outputs.c_mat()
        """
        return self._c_mat

    @property
    def rhs(self) -> Output:
        r"""Allows to get rhs output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_rhs = op.outputs.rhs()
        """
        return self._rhs

    @property
    def dn(self) -> Output:
        r"""Allows to get dn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dn = op.outputs.dn()
        """
        return self._dn

    @property
    def dr_cross_n(self) -> Output:
        r"""Allows to get dr_cross_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dr_cross_n = op.outputs.dr_cross_n()
        """
        return self._dr_cross_n

    @property
    def drn(self) -> Output:
        r"""Allows to get drn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_drn = op.outputs.drn()
        """
        return self._drn

    @property
    def dn_cross_n(self) -> Output:
        r"""Allows to get dn_cross_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dn_cross_n = op.outputs.dn_cross_n()
        """
        return self._dn_cross_n

    @property
    def dnx_y(self) -> Output:
        r"""Allows to get dnx_y output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dnx_y = op.outputs.dnx_y()
        """
        return self._dnx_y

    @property
    def dny_y(self) -> Output:
        r"""Allows to get dny_y output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dny_y = op.outputs.dny_y()
        """
        return self._dny_y

    @property
    def dnz_y(self) -> Output:
        r"""Allows to get dnz_y output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dnz_y = op.outputs.dnz_y()
        """
        return self._dnz_y

    @property
    def dyx_n(self) -> Output:
        r"""Allows to get dyx_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dyx_n = op.outputs.dyx_n()
        """
        return self._dyx_n

    @property
    def dyy_n(self) -> Output:
        r"""Allows to get dyy_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dyy_n = op.outputs.dyy_n()
        """
        return self._dyy_n

    @property
    def dyz_n(self) -> Output:
        r"""Allows to get dyz_n output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dyz_n = op.outputs.dyz_n()
        """
        return self._dyz_n

    @property
    def dnxn(self) -> Output:
        r"""Allows to get dnxn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dnxn = op.outputs.dnxn()
        """
        return self._dnxn

    @property
    def dnyn(self) -> Output:
        r"""Allows to get dnyn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dnyn = op.outputs.dnyn()
        """
        return self._dnyn

    @property
    def dnzn(self) -> Output:
        r"""Allows to get dnzn output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.read_cms_rbd_file()
        >>> # Get the output from op.outputs. ...
        >>> result_dnzn = op.outputs.dnzn()
        """
        return self._dnzn
