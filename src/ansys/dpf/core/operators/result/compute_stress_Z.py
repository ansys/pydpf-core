"""
compute_stress_Z

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class compute_stress_Z(Operator):
    r"""Computes the stress from an elastic strain field. compute_total_strain
    limitations are applicable for stress computation Get the ZZ normal
    component (22 component).


    Parameters
    ----------
    scoping: Scoping, optional
        The element scoping on which the result is computed.
    streams_container: StreamsContainer, optional
        Needed to get mesh and material ids. Optional if a data_sources have been connected.
    data_sources: DataSources, optional
        Needed to get mesh and material ids. Optional if a streams_container have been connected.
    requested_location: str, optional
        Average the Elemental Nodal result to the requested location.
    strain: FieldsContainer or Field
        Field/or fields container containing only the elastic strain field (element nodal).

    Returns
    -------
    fields_container: FieldsContainer
        The computed result fields container (elemental nodal).

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.result.compute_stress_Z()

    >>> # Make input connections
    >>> my_scoping = dpf.Scoping()
    >>> op.inputs.scoping.connect(my_scoping)
    >>> my_streams_container = dpf.StreamsContainer()
    >>> op.inputs.streams_container.connect(my_streams_container)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> my_requested_location = str()
    >>> op.inputs.requested_location.connect(my_requested_location)
    >>> my_strain = dpf.FieldsContainer()
    >>> op.inputs.strain.connect(my_strain)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.result.compute_stress_Z(
    ...     scoping=my_scoping,
    ...     streams_container=my_streams_container,
    ...     data_sources=my_data_sources,
    ...     requested_location=my_requested_location,
    ...     strain=my_strain,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        scoping=None,
        streams_container=None,
        data_sources=None,
        requested_location=None,
        strain=None,
        config=None,
        server=None,
    ):
        super().__init__(name="compute_stress_Z", config=config, server=server)
        self._inputs = InputsComputeStressZ(self)
        self._outputs = OutputsComputeStressZ(self)
        if scoping is not None:
            self.inputs.scoping.connect(scoping)
        if streams_container is not None:
            self.inputs.streams_container.connect(streams_container)
        if data_sources is not None:
            self.inputs.data_sources.connect(data_sources)
        if requested_location is not None:
            self.inputs.requested_location.connect(requested_location)
        if strain is not None:
            self.inputs.strain.connect(strain)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Computes the stress from an elastic strain field. compute_total_strain
limitations are applicable for stress computation Get the ZZ normal
component (22 component).
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                1: PinSpecification(
                    name="scoping",
                    type_names=["scoping"],
                    optional=True,
                    document=r"""The element scoping on which the result is computed.""",
                ),
                3: PinSpecification(
                    name="streams_container",
                    type_names=["streams_container"],
                    optional=True,
                    document=r"""Needed to get mesh and material ids. Optional if a data_sources have been connected.""",
                ),
                4: PinSpecification(
                    name="data_sources",
                    type_names=["data_sources"],
                    optional=True,
                    document=r"""Needed to get mesh and material ids. Optional if a streams_container have been connected.""",
                ),
                9: PinSpecification(
                    name="requested_location",
                    type_names=["string"],
                    optional=True,
                    document=r"""Average the Elemental Nodal result to the requested location.""",
                ),
                10: PinSpecification(
                    name="strain",
                    type_names=["fields_container", "field"],
                    optional=False,
                    document=r"""Field/or fields container containing only the elastic strain field (element nodal).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""The computed result fields container (elemental nodal).""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="compute_stress_Z", server=server)

    @property
    def inputs(self) -> InputsComputeStressZ:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsComputeStressZ.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsComputeStressZ:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsComputeStressZ.
        """
        return super().outputs


class InputsComputeStressZ(_Inputs):
    """Intermediate class used to connect user inputs to
    compute_stress_Z operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.compute_stress_Z()
    >>> my_scoping = dpf.Scoping()
    >>> op.inputs.scoping.connect(my_scoping)
    >>> my_streams_container = dpf.StreamsContainer()
    >>> op.inputs.streams_container.connect(my_streams_container)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> my_requested_location = str()
    >>> op.inputs.requested_location.connect(my_requested_location)
    >>> my_strain = dpf.FieldsContainer()
    >>> op.inputs.strain.connect(my_strain)
    """

    def __init__(self, op: Operator):
        super().__init__(compute_stress_Z._spec().inputs, op)
        self._scoping = Input(compute_stress_Z._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._scoping)
        self._streams_container = Input(
            compute_stress_Z._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._streams_container)
        self._data_sources = Input(compute_stress_Z._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._data_sources)
        self._requested_location = Input(
            compute_stress_Z._spec().input_pin(9), 9, op, -1
        )
        self._inputs.append(self._requested_location)
        self._strain = Input(compute_stress_Z._spec().input_pin(10), 10, op, -1)
        self._inputs.append(self._strain)

    @property
    def scoping(self) -> Input:
        r"""Allows to connect scoping input to the operator.

        The element scoping on which the result is computed.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_stress_Z()
        >>> op.inputs.scoping.connect(my_scoping)
        >>> # or
        >>> op.inputs.scoping(my_scoping)
        """
        return self._scoping

    @property
    def streams_container(self) -> Input:
        r"""Allows to connect streams_container input to the operator.

        Needed to get mesh and material ids. Optional if a data_sources have been connected.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_stress_Z()
        >>> op.inputs.streams_container.connect(my_streams_container)
        >>> # or
        >>> op.inputs.streams_container(my_streams_container)
        """
        return self._streams_container

    @property
    def data_sources(self) -> Input:
        r"""Allows to connect data_sources input to the operator.

        Needed to get mesh and material ids. Optional if a streams_container have been connected.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_stress_Z()
        >>> op.inputs.data_sources.connect(my_data_sources)
        >>> # or
        >>> op.inputs.data_sources(my_data_sources)
        """
        return self._data_sources

    @property
    def requested_location(self) -> Input:
        r"""Allows to connect requested_location input to the operator.

        Average the Elemental Nodal result to the requested location.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_stress_Z()
        >>> op.inputs.requested_location.connect(my_requested_location)
        >>> # or
        >>> op.inputs.requested_location(my_requested_location)
        """
        return self._requested_location

    @property
    def strain(self) -> Input:
        r"""Allows to connect strain input to the operator.

        Field/or fields container containing only the elastic strain field (element nodal).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_stress_Z()
        >>> op.inputs.strain.connect(my_strain)
        >>> # or
        >>> op.inputs.strain(my_strain)
        """
        return self._strain


class OutputsComputeStressZ(_Outputs):
    """Intermediate class used to get outputs from
    compute_stress_Z operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.compute_stress_Z()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(compute_stress_Z._spec().outputs, op)
        self._fields_container = Output(compute_stress_Z._spec().output_pin(0), 0, op)
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self) -> Output:
        r"""Allows to get fields_container output of the operator

        The computed result fields container (elemental nodal).

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.compute_stress_Z()
        >>> # Get the output from op.outputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """
        return self._fields_container
