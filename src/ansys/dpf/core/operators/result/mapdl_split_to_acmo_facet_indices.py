"""
mapdl_split_to_acmo_facet_indices
=================================
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class mapdl_split_to_acmo_facet_indices(Operator):
    """This will retain the already existing labels from the input FC and
    will change the facet label to now mean ACMO facet indices.Each
    Field in the input will be split/merged into several Fields,
    redistributing the data to the appropriate entity.

    Parameters
    ----------
    fields_container : FieldsContainer
        Fields container to split, with generic
        number of labels (e.g. time, zone,
        complex...), 'facet' label is
        compulsory.the fields of the
        fieldscontainer will have location
        elemental and the scoping ids will be
        the element ids on the skin mesh.
    property_fields_container_element_types : PropertyFieldsContainer
        It should only have the 'facet' label. for
        each facet, it stores a propertyfield
        with the element types of the
        corresponding elements.the scoping
        should be the same as the scoping of
        the corresponding field in input 0.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_property_fields_container_element_types = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_container_element_types.connect(my_property_fields_container_element_types)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices(
    ...     fields_container=my_fields_container,
    ...     property_fields_container_element_types=my_property_fields_container_element_types,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        property_fields_container_element_types=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="mapdl::split_to_acmo_facet_indices", config=config, server=server
        )
        self._inputs = InputsMapdlSplitToAcmoFacetIndices(self)
        self._outputs = OutputsMapdlSplitToAcmoFacetIndices(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if property_fields_container_element_types is not None:
            self.inputs.property_fields_container_element_types.connect(
                property_fields_container_element_types
            )

    @staticmethod
    def _spec():
        description = """This will retain the already existing labels from the input FC and
            will change the facet label to now mean ACMO facet
            indices.Each Field in the input will be split/merged into
            several Fields, redistributing the data to the appropriate
            entity."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fields container to split, with generic
        number of labels (e.g. time, zone,
        complex...), 'facet' label is
        compulsory.the fields of the
        fieldscontainer will have location
        elemental and the scoping ids will be
        the element ids on the skin mesh.""",
                ),
                1: PinSpecification(
                    name="property_fields_container_element_types",
                    type_names=["property_fields_container"],
                    optional=False,
                    document="""It should only have the 'facet' label. for
        each facet, it stores a propertyfield
        with the element types of the
        corresponding elements.the scoping
        should be the same as the scoping of
        the corresponding field in input 0.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Output splitted fields containter""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="mapdl::split_to_acmo_facet_indices", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsMapdlSplitToAcmoFacetIndices
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsMapdlSplitToAcmoFacetIndices
        """
        return super().outputs


class InputsMapdlSplitToAcmoFacetIndices(_Inputs):
    """Intermediate class used to connect user inputs to
    mapdl_split_to_acmo_facet_indices operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_property_fields_container_element_types = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_container_element_types.connect(my_property_fields_container_element_types)
    """

    def __init__(self, op: Operator):
        super().__init__(mapdl_split_to_acmo_facet_indices._spec().inputs, op)
        self._fields_container = Input(
            mapdl_split_to_acmo_facet_indices._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._property_fields_container_element_types = Input(
            mapdl_split_to_acmo_facet_indices._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._property_fields_container_element_types)

    @property
    def fields_container(self):
        """Allows to connect fields_container input to the operator.

        Fields container to split, with generic
        number of labels (e.g. time, zone,
        complex...), 'facet' label is
        compulsory.the fields of the
        fieldscontainer will have location
        elemental and the scoping ids will be
        the element ids on the skin mesh.

        Parameters
        ----------
        my_fields_container : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def property_fields_container_element_types(self):
        """Allows to connect property_fields_container_element_types input to the operator.

        It should only have the 'facet' label. for
        each facet, it stores a propertyfield
        with the element types of the
        corresponding elements.the scoping
        should be the same as the scoping of
        the corresponding field in input 0.

        Parameters
        ----------
        my_property_fields_container_element_types : PropertyFieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices()
        >>> op.inputs.property_fields_container_element_types.connect(my_property_fields_container_element_types)
        >>> # or
        >>> op.inputs.property_fields_container_element_types(my_property_fields_container_element_types)
        """
        return self._property_fields_container_element_types


class OutputsMapdlSplitToAcmoFacetIndices(_Outputs):
    """Intermediate class used to get outputs from
    mapdl_split_to_acmo_facet_indices operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(mapdl_split_to_acmo_facet_indices._spec().outputs, op)
        self._fields_container = Output(
            mapdl_split_to_acmo_facet_indices._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self):
        """Allows to get fields_container output of the operator

        Returns
        ----------
        my_fields_container : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices()
        >>> # Connect inputs : op.inputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """  # noqa: E501
        return self._fields_container
