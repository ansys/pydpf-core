"""
elemental_mean_fc

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class elemental_mean_fc(Operator):
    r"""Computes the average of a multi-entity container of fields,
    (ElementalNodal -> Elemental), (NodalElemental -> Nodal). If the input
    fields are mixed shell/solid and collapseShellLayers is false, then the
    fields could be split by element shape and the output fields container
    would have an elshape label depending on the e_shell_layer and
    merge_solid_shell inputs (if e_shell_layer is not specified, the fields
    are split; if it is specified, the fields can be split based on
    merge_solid_shell).If collapseShellLayers is true, all available shell
    layers are collapsed and shells and solid fields are always merged.


    Parameters
    ----------
    fields_container: FieldsContainer
    collapse_shell_layers: bool, optional
        If true, the data across different shell layers is averaged as well (default is false).
    force_averaging: bool, optional
        If true you average, if false you just sum.
    scoping: Scoping or ScopingsContainer, optional
        Average only on these elements. If it is a scoping container, the label must correspond to the one of the fields container.
    abstract_meshed_region: MeshedRegion or MeshesContainer, optional
        The mesh region in this pin is used to perform the averaging. It is used if there is no fields support.
    merge_solid_shell: bool, optional
        For shell/solid mixed fields, group in the same field all solids and shells (false by default). This pin only has an effect when collapse_shell_layers is false and a value for e_shell_layer is provided.
    e_shell_layer: int, optional
        0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid. This pin only has an effect when collapse_shell_layers is false.

    Returns
    -------
    fields_container: FieldsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.averaging.elemental_mean_fc()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_collapse_shell_layers = bool()
    >>> op.inputs.collapse_shell_layers.connect(my_collapse_shell_layers)
    >>> my_force_averaging = bool()
    >>> op.inputs.force_averaging.connect(my_force_averaging)
    >>> my_scoping = dpf.Scoping()
    >>> op.inputs.scoping.connect(my_scoping)
    >>> my_abstract_meshed_region = dpf.MeshedRegion()
    >>> op.inputs.abstract_meshed_region.connect(my_abstract_meshed_region)
    >>> my_merge_solid_shell = bool()
    >>> op.inputs.merge_solid_shell.connect(my_merge_solid_shell)
    >>> my_e_shell_layer = int()
    >>> op.inputs.e_shell_layer.connect(my_e_shell_layer)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.averaging.elemental_mean_fc(
    ...     fields_container=my_fields_container,
    ...     collapse_shell_layers=my_collapse_shell_layers,
    ...     force_averaging=my_force_averaging,
    ...     scoping=my_scoping,
    ...     abstract_meshed_region=my_abstract_meshed_region,
    ...     merge_solid_shell=my_merge_solid_shell,
    ...     e_shell_layer=my_e_shell_layer,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        collapse_shell_layers=None,
        force_averaging=None,
        scoping=None,
        abstract_meshed_region=None,
        merge_solid_shell=None,
        e_shell_layer=None,
        config=None,
        server=None,
    ):
        super().__init__(name="entity_average_fc", config=config, server=server)
        self._inputs = InputsElementalMeanFc(self)
        self._outputs = OutputsElementalMeanFc(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if collapse_shell_layers is not None:
            self.inputs.collapse_shell_layers.connect(collapse_shell_layers)
        if force_averaging is not None:
            self.inputs.force_averaging.connect(force_averaging)
        if scoping is not None:
            self.inputs.scoping.connect(scoping)
        if abstract_meshed_region is not None:
            self.inputs.abstract_meshed_region.connect(abstract_meshed_region)
        if merge_solid_shell is not None:
            self.inputs.merge_solid_shell.connect(merge_solid_shell)
        if e_shell_layer is not None:
            self.inputs.e_shell_layer.connect(e_shell_layer)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Computes the average of a multi-entity container of fields,
(ElementalNodal -> Elemental), (NodalElemental -> Nodal). If the input
fields are mixed shell/solid and collapseShellLayers is false, then the
fields could be split by element shape and the output fields container
would have an elshape label depending on the e_shell_layer and
merge_solid_shell inputs (if e_shell_layer is not specified, the fields
are split; if it is specified, the fields can be split based on
merge_solid_shell).If collapseShellLayers is true, all available shell
layers are collapsed and shells and solid fields are always merged.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="collapse_shell_layers",
                    type_names=["bool"],
                    optional=True,
                    document=r"""If true, the data across different shell layers is averaged as well (default is false).""",
                ),
                2: PinSpecification(
                    name="force_averaging",
                    type_names=["bool"],
                    optional=True,
                    document=r"""If true you average, if false you just sum.""",
                ),
                3: PinSpecification(
                    name="scoping",
                    type_names=["scoping", "scopings_container"],
                    optional=True,
                    document=r"""Average only on these elements. If it is a scoping container, the label must correspond to the one of the fields container.""",
                ),
                4: PinSpecification(
                    name="abstract_meshed_region",
                    type_names=["abstract_meshed_region", "meshes_container"],
                    optional=True,
                    document=r"""The mesh region in this pin is used to perform the averaging. It is used if there is no fields support.""",
                ),
                26: PinSpecification(
                    name="merge_solid_shell",
                    type_names=["bool"],
                    optional=True,
                    document=r"""For shell/solid mixed fields, group in the same field all solids and shells (false by default). This pin only has an effect when collapse_shell_layers is false and a value for e_shell_layer is provided.""",
                ),
                27: PinSpecification(
                    name="e_shell_layer",
                    type_names=["int32"],
                    optional=True,
                    document=r"""0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid. This pin only has an effect when collapse_shell_layers is false.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="entity_average_fc", server=server)

    @property
    def inputs(self) -> InputsElementalMeanFc:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsElementalMeanFc.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsElementalMeanFc:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsElementalMeanFc.
        """
        return super().outputs


class InputsElementalMeanFc(_Inputs):
    """Intermediate class used to connect user inputs to
    elemental_mean_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.elemental_mean_fc()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_collapse_shell_layers = bool()
    >>> op.inputs.collapse_shell_layers.connect(my_collapse_shell_layers)
    >>> my_force_averaging = bool()
    >>> op.inputs.force_averaging.connect(my_force_averaging)
    >>> my_scoping = dpf.Scoping()
    >>> op.inputs.scoping.connect(my_scoping)
    >>> my_abstract_meshed_region = dpf.MeshedRegion()
    >>> op.inputs.abstract_meshed_region.connect(my_abstract_meshed_region)
    >>> my_merge_solid_shell = bool()
    >>> op.inputs.merge_solid_shell.connect(my_merge_solid_shell)
    >>> my_e_shell_layer = int()
    >>> op.inputs.e_shell_layer.connect(my_e_shell_layer)
    """

    def __init__(self, op: Operator):
        super().__init__(elemental_mean_fc._spec().inputs, op)
        self._fields_container = Input(
            elemental_mean_fc._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._collapse_shell_layers = Input(
            elemental_mean_fc._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._collapse_shell_layers)
        self._force_averaging = Input(elemental_mean_fc._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._force_averaging)
        self._scoping = Input(elemental_mean_fc._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._scoping)
        self._abstract_meshed_region = Input(
            elemental_mean_fc._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._abstract_meshed_region)
        self._merge_solid_shell = Input(
            elemental_mean_fc._spec().input_pin(26), 26, op, -1
        )
        self._inputs.append(self._merge_solid_shell)
        self._e_shell_layer = Input(elemental_mean_fc._spec().input_pin(27), 27, op, -1)
        self._inputs.append(self._e_shell_layer)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_mean_fc()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def collapse_shell_layers(self) -> Input:
        r"""Allows to connect collapse_shell_layers input to the operator.

        If true, the data across different shell layers is averaged as well (default is false).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_mean_fc()
        >>> op.inputs.collapse_shell_layers.connect(my_collapse_shell_layers)
        >>> # or
        >>> op.inputs.collapse_shell_layers(my_collapse_shell_layers)
        """
        return self._collapse_shell_layers

    @property
    def force_averaging(self) -> Input:
        r"""Allows to connect force_averaging input to the operator.

        If true you average, if false you just sum.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_mean_fc()
        >>> op.inputs.force_averaging.connect(my_force_averaging)
        >>> # or
        >>> op.inputs.force_averaging(my_force_averaging)
        """
        return self._force_averaging

    @property
    def scoping(self) -> Input:
        r"""Allows to connect scoping input to the operator.

        Average only on these elements. If it is a scoping container, the label must correspond to the one of the fields container.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_mean_fc()
        >>> op.inputs.scoping.connect(my_scoping)
        >>> # or
        >>> op.inputs.scoping(my_scoping)
        """
        return self._scoping

    @property
    def abstract_meshed_region(self) -> Input:
        r"""Allows to connect abstract_meshed_region input to the operator.

        The mesh region in this pin is used to perform the averaging. It is used if there is no fields support.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_mean_fc()
        >>> op.inputs.abstract_meshed_region.connect(my_abstract_meshed_region)
        >>> # or
        >>> op.inputs.abstract_meshed_region(my_abstract_meshed_region)
        """
        return self._abstract_meshed_region

    @property
    def merge_solid_shell(self) -> Input:
        r"""Allows to connect merge_solid_shell input to the operator.

        For shell/solid mixed fields, group in the same field all solids and shells (false by default). This pin only has an effect when collapse_shell_layers is false and a value for e_shell_layer is provided.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_mean_fc()
        >>> op.inputs.merge_solid_shell.connect(my_merge_solid_shell)
        >>> # or
        >>> op.inputs.merge_solid_shell(my_merge_solid_shell)
        """
        return self._merge_solid_shell

    @property
    def e_shell_layer(self) -> Input:
        r"""Allows to connect e_shell_layer input to the operator.

        0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid. This pin only has an effect when collapse_shell_layers is false.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_mean_fc()
        >>> op.inputs.e_shell_layer.connect(my_e_shell_layer)
        >>> # or
        >>> op.inputs.e_shell_layer(my_e_shell_layer)
        """
        return self._e_shell_layer


class OutputsElementalMeanFc(_Outputs):
    """Intermediate class used to get outputs from
    elemental_mean_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.elemental_mean_fc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(elemental_mean_fc._spec().outputs, op)
        self._fields_container = Output(elemental_mean_fc._spec().output_pin(0), 0, op)
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self) -> Output:
        r"""Allows to get fields_container output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_mean_fc()
        >>> # Get the output from op.outputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """
        return self._fields_container
