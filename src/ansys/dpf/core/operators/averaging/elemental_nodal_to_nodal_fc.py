"""
elemental_nodal_to_nodal_fc

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class elemental_nodal_to_nodal_fc(Operator):
    r"""Transforms Elemental Nodal fields into Nodal fields using an averaging
    process. The result is computed on a given node’s scoping. If the input
    fields are mixed shell/solid, then the fields are split by element shape
    and the output fields container has an elshape label depending on the
    merge_solid_shell input.


    Parameters
    ----------
    fields_container: FieldsContainer
    mesh: MeshedRegion or MeshesContainer, optional
        The mesh region in this pin is used to perform the averaging. It is used if there is no fields support.
    should_average: bool, optional
        Each nodal value is divided by the number of elements linked to this node (default is true for discrete quantities).
    scoping: Scoping or ScopingsContainer, optional
        Average only on these nodes. If it is a scoping container, the label must correspond to the one of the fields containers.
    extend_to_mid_nodes: bool, optional
        Compute mid nodes (when available) by averaging the neighbour primary nodes.
    extend_weights_to_mid_nodes: bool, optional
        Extends weights to mid nodes (when available). Default is false.
    merge_solid_shell: bool, optional
        For shell/solid mixed fields, group in the same field all solids and shells (false by default). If this pin is true, a shell_layer needs to be specified.
    shell_layer: int, optional
        0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid. If merge_solid_shell is true, this pin needs to be specified to a value that extracts only one layer (Top, Bottom or Mid).

    Returns
    -------
    fields_container: FieldsContainer
    weights: Class Dataprocessing::Dpftypecollection&lt;Class
        Dataprocessing::Cpropertyfield&gt;
        Gives for each node, the number of times it was found in the Elemental Nodal field. Can be used to average later.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_should_average = bool()
    >>> op.inputs.should_average.connect(my_should_average)
    >>> my_scoping = dpf.Scoping()
    >>> op.inputs.scoping.connect(my_scoping)
    >>> my_extend_to_mid_nodes = bool()
    >>> op.inputs.extend_to_mid_nodes.connect(my_extend_to_mid_nodes)
    >>> my_extend_weights_to_mid_nodes = bool()
    >>> op.inputs.extend_weights_to_mid_nodes.connect(my_extend_weights_to_mid_nodes)
    >>> my_merge_solid_shell = bool()
    >>> op.inputs.merge_solid_shell.connect(my_merge_solid_shell)
    >>> my_shell_layer = int()
    >>> op.inputs.shell_layer.connect(my_shell_layer)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc(
    ...     fields_container=my_fields_container,
    ...     mesh=my_mesh,
    ...     should_average=my_should_average,
    ...     scoping=my_scoping,
    ...     extend_to_mid_nodes=my_extend_to_mid_nodes,
    ...     extend_weights_to_mid_nodes=my_extend_weights_to_mid_nodes,
    ...     merge_solid_shell=my_merge_solid_shell,
    ...     shell_layer=my_shell_layer,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    >>> result_weights = op.outputs.weights()
    """

    def __init__(
        self,
        fields_container=None,
        mesh=None,
        should_average=None,
        scoping=None,
        extend_to_mid_nodes=None,
        extend_weights_to_mid_nodes=None,
        merge_solid_shell=None,
        shell_layer=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="elemental_nodal_To_nodal_fc", config=config, server=server
        )
        self._inputs = InputsElementalNodalToNodalFc(self)
        self._outputs = OutputsElementalNodalToNodalFc(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)
        if should_average is not None:
            self.inputs.should_average.connect(should_average)
        if scoping is not None:
            self.inputs.scoping.connect(scoping)
        if extend_to_mid_nodes is not None:
            self.inputs.extend_to_mid_nodes.connect(extend_to_mid_nodes)
        if extend_weights_to_mid_nodes is not None:
            self.inputs.extend_weights_to_mid_nodes.connect(extend_weights_to_mid_nodes)
        if merge_solid_shell is not None:
            self.inputs.merge_solid_shell.connect(merge_solid_shell)
        if shell_layer is not None:
            self.inputs.shell_layer.connect(shell_layer)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Transforms Elemental Nodal fields into Nodal fields using an averaging
process. The result is computed on a given node’s scoping. If the input
fields are mixed shell/solid, then the fields are split by element shape
and the output fields container has an elshape label depending on the
merge_solid_shell input.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region", "meshes_container"],
                    optional=True,
                    document=r"""The mesh region in this pin is used to perform the averaging. It is used if there is no fields support.""",
                ),
                2: PinSpecification(
                    name="should_average",
                    type_names=["bool"],
                    optional=True,
                    document=r"""Each nodal value is divided by the number of elements linked to this node (default is true for discrete quantities).""",
                ),
                3: PinSpecification(
                    name="scoping",
                    type_names=["scoping", "scopings_container"],
                    optional=True,
                    document=r"""Average only on these nodes. If it is a scoping container, the label must correspond to the one of the fields containers.""",
                ),
                4: PinSpecification(
                    name="extend_to_mid_nodes",
                    type_names=["bool"],
                    optional=True,
                    document=r"""Compute mid nodes (when available) by averaging the neighbour primary nodes.""",
                ),
                5: PinSpecification(
                    name="extend_weights_to_mid_nodes",
                    type_names=["bool"],
                    optional=True,
                    document=r"""Extends weights to mid nodes (when available). Default is false.""",
                ),
                26: PinSpecification(
                    name="merge_solid_shell",
                    type_names=["bool"],
                    optional=True,
                    document=r"""For shell/solid mixed fields, group in the same field all solids and shells (false by default). If this pin is true, a shell_layer needs to be specified.""",
                ),
                27: PinSpecification(
                    name="shell_layer",
                    type_names=["int32"],
                    optional=True,
                    document=r"""0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid. If merge_solid_shell is true, this pin needs to be specified to a value that extracts only one layer (Top, Bottom or Mid).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="weights",
                    type_names=[
                        "class dataProcessing::DpfTypeCollection<class dataProcessing::CPropertyField>"
                    ],
                    optional=False,
                    document=r"""Gives for each node, the number of times it was found in the Elemental Nodal field. Can be used to average later.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(
            name="elemental_nodal_To_nodal_fc", server=server
        )

    @property
    def inputs(self) -> InputsElementalNodalToNodalFc:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsElementalNodalToNodalFc.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsElementalNodalToNodalFc:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsElementalNodalToNodalFc.
        """
        return super().outputs


class InputsElementalNodalToNodalFc(_Inputs):
    """Intermediate class used to connect user inputs to
    elemental_nodal_to_nodal_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_should_average = bool()
    >>> op.inputs.should_average.connect(my_should_average)
    >>> my_scoping = dpf.Scoping()
    >>> op.inputs.scoping.connect(my_scoping)
    >>> my_extend_to_mid_nodes = bool()
    >>> op.inputs.extend_to_mid_nodes.connect(my_extend_to_mid_nodes)
    >>> my_extend_weights_to_mid_nodes = bool()
    >>> op.inputs.extend_weights_to_mid_nodes.connect(my_extend_weights_to_mid_nodes)
    >>> my_merge_solid_shell = bool()
    >>> op.inputs.merge_solid_shell.connect(my_merge_solid_shell)
    >>> my_shell_layer = int()
    >>> op.inputs.shell_layer.connect(my_shell_layer)
    """

    def __init__(self, op: Operator):
        super().__init__(elemental_nodal_to_nodal_fc._spec().inputs, op)
        self._fields_container = Input(
            elemental_nodal_to_nodal_fc._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._mesh = Input(elemental_nodal_to_nodal_fc._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._mesh)
        self._should_average = Input(
            elemental_nodal_to_nodal_fc._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._should_average)
        self._scoping = Input(
            elemental_nodal_to_nodal_fc._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._scoping)
        self._extend_to_mid_nodes = Input(
            elemental_nodal_to_nodal_fc._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._extend_to_mid_nodes)
        self._extend_weights_to_mid_nodes = Input(
            elemental_nodal_to_nodal_fc._spec().input_pin(5), 5, op, -1
        )
        self._inputs.append(self._extend_weights_to_mid_nodes)
        self._merge_solid_shell = Input(
            elemental_nodal_to_nodal_fc._spec().input_pin(26), 26, op, -1
        )
        self._inputs.append(self._merge_solid_shell)
        self._shell_layer = Input(
            elemental_nodal_to_nodal_fc._spec().input_pin(27), 27, op, -1
        )
        self._inputs.append(self._shell_layer)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def mesh(self) -> Input:
        r"""Allows to connect mesh input to the operator.

        The mesh region in this pin is used to perform the averaging. It is used if there is no fields support.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh

    @property
    def should_average(self) -> Input:
        r"""Allows to connect should_average input to the operator.

        Each nodal value is divided by the number of elements linked to this node (default is true for discrete quantities).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> op.inputs.should_average.connect(my_should_average)
        >>> # or
        >>> op.inputs.should_average(my_should_average)
        """
        return self._should_average

    @property
    def scoping(self) -> Input:
        r"""Allows to connect scoping input to the operator.

        Average only on these nodes. If it is a scoping container, the label must correspond to the one of the fields containers.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> op.inputs.scoping.connect(my_scoping)
        >>> # or
        >>> op.inputs.scoping(my_scoping)
        """
        return self._scoping

    @property
    def extend_to_mid_nodes(self) -> Input:
        r"""Allows to connect extend_to_mid_nodes input to the operator.

        Compute mid nodes (when available) by averaging the neighbour primary nodes.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> op.inputs.extend_to_mid_nodes.connect(my_extend_to_mid_nodes)
        >>> # or
        >>> op.inputs.extend_to_mid_nodes(my_extend_to_mid_nodes)
        """
        return self._extend_to_mid_nodes

    @property
    def extend_weights_to_mid_nodes(self) -> Input:
        r"""Allows to connect extend_weights_to_mid_nodes input to the operator.

        Extends weights to mid nodes (when available). Default is false.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> op.inputs.extend_weights_to_mid_nodes.connect(my_extend_weights_to_mid_nodes)
        >>> # or
        >>> op.inputs.extend_weights_to_mid_nodes(my_extend_weights_to_mid_nodes)
        """
        return self._extend_weights_to_mid_nodes

    @property
    def merge_solid_shell(self) -> Input:
        r"""Allows to connect merge_solid_shell input to the operator.

        For shell/solid mixed fields, group in the same field all solids and shells (false by default). If this pin is true, a shell_layer needs to be specified.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> op.inputs.merge_solid_shell.connect(my_merge_solid_shell)
        >>> # or
        >>> op.inputs.merge_solid_shell(my_merge_solid_shell)
        """
        return self._merge_solid_shell

    @property
    def shell_layer(self) -> Input:
        r"""Allows to connect shell_layer input to the operator.

        0: Top, 1: Bottom, 2: BottomTop, 3: Mid, 4: BottomTopMid. If merge_solid_shell is true, this pin needs to be specified to a value that extracts only one layer (Top, Bottom or Mid).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> op.inputs.shell_layer.connect(my_shell_layer)
        >>> # or
        >>> op.inputs.shell_layer(my_shell_layer)
        """
        return self._shell_layer


class OutputsElementalNodalToNodalFc(_Outputs):
    """Intermediate class used to get outputs from
    elemental_nodal_to_nodal_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    >>> result_weights = op.outputs.weights()
    """

    def __init__(self, op: Operator):
        super().__init__(elemental_nodal_to_nodal_fc._spec().outputs, op)
        self._fields_container = Output(
            elemental_nodal_to_nodal_fc._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._fields_container)
        self._weights = Output(elemental_nodal_to_nodal_fc._spec().output_pin(1), 1, op)
        self._outputs.append(self._weights)

    @property
    def fields_container(self) -> Output:
        r"""Allows to get fields_container output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> # Get the output from op.outputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """
        return self._fields_container

    @property
    def weights(self) -> Output:
        r"""Allows to get weights output of the operator

        Gives for each node, the number of times it was found in the Elemental Nodal field. Can be used to average later.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
        >>> # Get the output from op.outputs. ...
        >>> result_weights = op.outputs.weights()
        """
        return self._weights
