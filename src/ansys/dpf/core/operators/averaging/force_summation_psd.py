"""
force_summation_psd

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class force_summation_psd(Operator):
    r"""Computes the sum of elemental forces contribution on a set of nodes in
    Global Coordinate System for a PSD analysis. Equivalent to MAPDL
    FSUM/NFORCE.


    Parameters
    ----------
    nodal_scoping: Scoping, optional
        Nodal Scoping. Set of nodes in which elemental contribution forces will be accumulated. Defaults to all nodes.
    elemental_scoping: Scoping, optional
        Elemental Scoping. Set of elements contributing to the force calculation. Defaults to all elements.
    streams: StreamsContainer, optional
        Streams container for RST and PSD files (optional if using data sources). The operator supports both a single RST file and two separate RST files. See data sources pin specifications for details on how to define the streams for both cases.
    data_sources: DataSources
        Data sources containing RST and PSD files (optional if using a streams container). The operator supports both a single RST file (containing both modal and PSD results) and two separate RST files (one for modal and one for PSD analyses).The data source containing modal results must be defined as an upstream data source.If using a single RST file for PSD and modal analysis, the RST file must be in an upstream data source.If using two separate RST files, only the modal RST must be in an upstream data source.
    spoint: Field, optional
        Coordinate field of a point for moment summations. Defaults to (0,0,0).
    abs_rel_key: Field, optional
        Key to select the type of response: 0 for relative response (default) or 1 for absolute response.
    signif: float, optional
        Significance threshold, defaults to 0.0001. Any mode with a significance level above this value will be included in the combination.The significance level is defined as the modal covariance matrix term, divided by the maximum modal covariance matrix term.

    Returns
    -------
    force_accumulation: FieldsContainer
        Returns the sum of forces for the 1-sigma displacement solution on the scoped nodes/elements.
    moment_accumulation: FieldsContainer
        Returns the sum of moments for the 1-sigma displacement solution on the scoped nodes/elements.
    forces_on_nodes: FieldsContainer
        Returns the nodal forces for the 1-sigma displacement solution on the scoped nodes/elements.
    moments_on_nodes: FieldsContainer
        Returns the nodal moments for the 1-sigma displacement solution on the scoped nodes/elements.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.averaging.force_summation_psd()

    >>> # Make input connections
    >>> my_nodal_scoping = dpf.Scoping()
    >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
    >>> my_elemental_scoping = dpf.Scoping()
    >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
    >>> my_streams = dpf.StreamsContainer()
    >>> op.inputs.streams.connect(my_streams)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> my_spoint = dpf.Field()
    >>> op.inputs.spoint.connect(my_spoint)
    >>> my_abs_rel_key = dpf.Field()
    >>> op.inputs.abs_rel_key.connect(my_abs_rel_key)
    >>> my_signif = float()
    >>> op.inputs.signif.connect(my_signif)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.averaging.force_summation_psd(
    ...     nodal_scoping=my_nodal_scoping,
    ...     elemental_scoping=my_elemental_scoping,
    ...     streams=my_streams,
    ...     data_sources=my_data_sources,
    ...     spoint=my_spoint,
    ...     abs_rel_key=my_abs_rel_key,
    ...     signif=my_signif,
    ... )

    >>> # Get output data
    >>> result_force_accumulation = op.outputs.force_accumulation()
    >>> result_moment_accumulation = op.outputs.moment_accumulation()
    >>> result_forces_on_nodes = op.outputs.forces_on_nodes()
    >>> result_moments_on_nodes = op.outputs.moments_on_nodes()
    """

    def __init__(
        self,
        nodal_scoping=None,
        elemental_scoping=None,
        streams=None,
        data_sources=None,
        spoint=None,
        abs_rel_key=None,
        signif=None,
        config=None,
        server=None,
    ):
        super().__init__(name="force_summation_psd", config=config, server=server)
        self._inputs = InputsForceSummationPsd(self)
        self._outputs = OutputsForceSummationPsd(self)
        if nodal_scoping is not None:
            self.inputs.nodal_scoping.connect(nodal_scoping)
        if elemental_scoping is not None:
            self.inputs.elemental_scoping.connect(elemental_scoping)
        if streams is not None:
            self.inputs.streams.connect(streams)
        if data_sources is not None:
            self.inputs.data_sources.connect(data_sources)
        if spoint is not None:
            self.inputs.spoint.connect(spoint)
        if abs_rel_key is not None:
            self.inputs.abs_rel_key.connect(abs_rel_key)
        if signif is not None:
            self.inputs.signif.connect(signif)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Computes the sum of elemental forces contribution on a set of nodes in
Global Coordinate System for a PSD analysis. Equivalent to MAPDL
FSUM/NFORCE.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                1: PinSpecification(
                    name="nodal_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document=r"""Nodal Scoping. Set of nodes in which elemental contribution forces will be accumulated. Defaults to all nodes.""",
                ),
                2: PinSpecification(
                    name="elemental_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document=r"""Elemental Scoping. Set of elements contributing to the force calculation. Defaults to all elements.""",
                ),
                3: PinSpecification(
                    name="streams",
                    type_names=["streams_container"],
                    optional=True,
                    document=r"""Streams container for RST and PSD files (optional if using data sources). The operator supports both a single RST file and two separate RST files. See data sources pin specifications for details on how to define the streams for both cases.""",
                ),
                4: PinSpecification(
                    name="data_sources",
                    type_names=["data_sources"],
                    optional=False,
                    document=r"""Data sources containing RST and PSD files (optional if using a streams container). The operator supports both a single RST file (containing both modal and PSD results) and two separate RST files (one for modal and one for PSD analyses).The data source containing modal results must be defined as an upstream data source.If using a single RST file for PSD and modal analysis, the RST file must be in an upstream data source.If using two separate RST files, only the modal RST must be in an upstream data source.""",
                ),
                6: PinSpecification(
                    name="spoint",
                    type_names=["field"],
                    optional=True,
                    document=r"""Coordinate field of a point for moment summations. Defaults to (0,0,0).""",
                ),
                7: PinSpecification(
                    name="abs_rel_key",
                    type_names=["field"],
                    optional=True,
                    document=r"""Key to select the type of response: 0 for relative response (default) or 1 for absolute response.""",
                ),
                8: PinSpecification(
                    name="signif",
                    type_names=["double"],
                    optional=True,
                    document=r"""Significance threshold, defaults to 0.0001. Any mode with a significance level above this value will be included in the combination.The significance level is defined as the modal covariance matrix term, divided by the maximum modal covariance matrix term.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="force_accumulation",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Returns the sum of forces for the 1-sigma displacement solution on the scoped nodes/elements.""",
                ),
                1: PinSpecification(
                    name="moment_accumulation",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Returns the sum of moments for the 1-sigma displacement solution on the scoped nodes/elements.""",
                ),
                10: PinSpecification(
                    name="forces_on_nodes",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Returns the nodal forces for the 1-sigma displacement solution on the scoped nodes/elements.""",
                ),
                11: PinSpecification(
                    name="moments_on_nodes",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Returns the nodal moments for the 1-sigma displacement solution on the scoped nodes/elements.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="force_summation_psd", server=server)

    @property
    def inputs(self) -> InputsForceSummationPsd:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsForceSummationPsd.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsForceSummationPsd:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsForceSummationPsd.
        """
        return super().outputs


class InputsForceSummationPsd(_Inputs):
    """Intermediate class used to connect user inputs to
    force_summation_psd operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.force_summation_psd()
    >>> my_nodal_scoping = dpf.Scoping()
    >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
    >>> my_elemental_scoping = dpf.Scoping()
    >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
    >>> my_streams = dpf.StreamsContainer()
    >>> op.inputs.streams.connect(my_streams)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> my_spoint = dpf.Field()
    >>> op.inputs.spoint.connect(my_spoint)
    >>> my_abs_rel_key = dpf.Field()
    >>> op.inputs.abs_rel_key.connect(my_abs_rel_key)
    >>> my_signif = float()
    >>> op.inputs.signif.connect(my_signif)
    """

    def __init__(self, op: Operator):
        super().__init__(force_summation_psd._spec().inputs, op)
        self._nodal_scoping = Input(force_summation_psd._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._nodal_scoping)
        self._elemental_scoping = Input(
            force_summation_psd._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._elemental_scoping)
        self._streams = Input(force_summation_psd._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._streams)
        self._data_sources = Input(force_summation_psd._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._data_sources)
        self._spoint = Input(force_summation_psd._spec().input_pin(6), 6, op, -1)
        self._inputs.append(self._spoint)
        self._abs_rel_key = Input(force_summation_psd._spec().input_pin(7), 7, op, -1)
        self._inputs.append(self._abs_rel_key)
        self._signif = Input(force_summation_psd._spec().input_pin(8), 8, op, -1)
        self._inputs.append(self._signif)

    @property
    def nodal_scoping(self) -> Input:
        r"""Allows to connect nodal_scoping input to the operator.

        Nodal Scoping. Set of nodes in which elemental contribution forces will be accumulated. Defaults to all nodes.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
        >>> # or
        >>> op.inputs.nodal_scoping(my_nodal_scoping)
        """
        return self._nodal_scoping

    @property
    def elemental_scoping(self) -> Input:
        r"""Allows to connect elemental_scoping input to the operator.

        Elemental Scoping. Set of elements contributing to the force calculation. Defaults to all elements.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
        >>> # or
        >>> op.inputs.elemental_scoping(my_elemental_scoping)
        """
        return self._elemental_scoping

    @property
    def streams(self) -> Input:
        r"""Allows to connect streams input to the operator.

        Streams container for RST and PSD files (optional if using data sources). The operator supports both a single RST file and two separate RST files. See data sources pin specifications for details on how to define the streams for both cases.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> op.inputs.streams.connect(my_streams)
        >>> # or
        >>> op.inputs.streams(my_streams)
        """
        return self._streams

    @property
    def data_sources(self) -> Input:
        r"""Allows to connect data_sources input to the operator.

        Data sources containing RST and PSD files (optional if using a streams container). The operator supports both a single RST file (containing both modal and PSD results) and two separate RST files (one for modal and one for PSD analyses).The data source containing modal results must be defined as an upstream data source.If using a single RST file for PSD and modal analysis, the RST file must be in an upstream data source.If using two separate RST files, only the modal RST must be in an upstream data source.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> op.inputs.data_sources.connect(my_data_sources)
        >>> # or
        >>> op.inputs.data_sources(my_data_sources)
        """
        return self._data_sources

    @property
    def spoint(self) -> Input:
        r"""Allows to connect spoint input to the operator.

        Coordinate field of a point for moment summations. Defaults to (0,0,0).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> op.inputs.spoint.connect(my_spoint)
        >>> # or
        >>> op.inputs.spoint(my_spoint)
        """
        return self._spoint

    @property
    def abs_rel_key(self) -> Input:
        r"""Allows to connect abs_rel_key input to the operator.

        Key to select the type of response: 0 for relative response (default) or 1 for absolute response.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> op.inputs.abs_rel_key.connect(my_abs_rel_key)
        >>> # or
        >>> op.inputs.abs_rel_key(my_abs_rel_key)
        """
        return self._abs_rel_key

    @property
    def signif(self) -> Input:
        r"""Allows to connect signif input to the operator.

        Significance threshold, defaults to 0.0001. Any mode with a significance level above this value will be included in the combination.The significance level is defined as the modal covariance matrix term, divided by the maximum modal covariance matrix term.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> op.inputs.signif.connect(my_signif)
        >>> # or
        >>> op.inputs.signif(my_signif)
        """
        return self._signif


class OutputsForceSummationPsd(_Outputs):
    """Intermediate class used to get outputs from
    force_summation_psd operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.force_summation_psd()
    >>> # Connect inputs : op.inputs. ...
    >>> result_force_accumulation = op.outputs.force_accumulation()
    >>> result_moment_accumulation = op.outputs.moment_accumulation()
    >>> result_forces_on_nodes = op.outputs.forces_on_nodes()
    >>> result_moments_on_nodes = op.outputs.moments_on_nodes()
    """

    def __init__(self, op: Operator):
        super().__init__(force_summation_psd._spec().outputs, op)
        self._force_accumulation = Output(
            force_summation_psd._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._force_accumulation)
        self._moment_accumulation = Output(
            force_summation_psd._spec().output_pin(1), 1, op
        )
        self._outputs.append(self._moment_accumulation)
        self._forces_on_nodes = Output(
            force_summation_psd._spec().output_pin(10), 10, op
        )
        self._outputs.append(self._forces_on_nodes)
        self._moments_on_nodes = Output(
            force_summation_psd._spec().output_pin(11), 11, op
        )
        self._outputs.append(self._moments_on_nodes)

    @property
    def force_accumulation(self) -> Output:
        r"""Allows to get force_accumulation output of the operator

        Returns the sum of forces for the 1-sigma displacement solution on the scoped nodes/elements.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> # Get the output from op.outputs. ...
        >>> result_force_accumulation = op.outputs.force_accumulation()
        """
        return self._force_accumulation

    @property
    def moment_accumulation(self) -> Output:
        r"""Allows to get moment_accumulation output of the operator

        Returns the sum of moments for the 1-sigma displacement solution on the scoped nodes/elements.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> # Get the output from op.outputs. ...
        >>> result_moment_accumulation = op.outputs.moment_accumulation()
        """
        return self._moment_accumulation

    @property
    def forces_on_nodes(self) -> Output:
        r"""Allows to get forces_on_nodes output of the operator

        Returns the nodal forces for the 1-sigma displacement solution on the scoped nodes/elements.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> # Get the output from op.outputs. ...
        >>> result_forces_on_nodes = op.outputs.forces_on_nodes()
        """
        return self._forces_on_nodes

    @property
    def moments_on_nodes(self) -> Output:
        r"""Allows to get moments_on_nodes output of the operator

        Returns the nodal moments for the 1-sigma displacement solution on the scoped nodes/elements.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation_psd()
        >>> # Get the output from op.outputs. ...
        >>> result_moments_on_nodes = op.outputs.moments_on_nodes()
        """
        return self._moments_on_nodes
