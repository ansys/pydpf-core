"""
elemental_difference_fc

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class elemental_difference_fc(Operator):
    r"""Transforms an Elemental Nodal or Nodal field into an Elemental field.
    Each elemental value is the maximum difference between the unaveraged or
    averaged (depending on the input fields) computed result for all nodes
    in this element. The result is computed on a given element scoping. If
    the input fields are mixed shell/solid, and the shell’s layers are not
    specified as collapsed, then the fields are split by element shape and
    the output fields container has an elshape label.


    Parameters
    ----------
    fields_container: FieldsContainer
    mesh: MeshedRegion or MeshesContainer, optional
        The mesh region in this pin is used to perform the averaging, used if there is no fields support.
    scoping: Scoping or ScopingsContainer, optional
        Average only on these elements. If it is scoping container, the label must correspond to the one of the fields container.
    collapse_shell_layers: bool, optional
        If true, the data across different shell layers is averaged as well (default is false).

    Returns
    -------
    fields_container: FieldsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.averaging.elemental_difference_fc()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_scoping = dpf.Scoping()
    >>> op.inputs.scoping.connect(my_scoping)
    >>> my_collapse_shell_layers = bool()
    >>> op.inputs.collapse_shell_layers.connect(my_collapse_shell_layers)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.averaging.elemental_difference_fc(
    ...     fields_container=my_fields_container,
    ...     mesh=my_mesh,
    ...     scoping=my_scoping,
    ...     collapse_shell_layers=my_collapse_shell_layers,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        mesh=None,
        scoping=None,
        collapse_shell_layers=None,
        config=None,
        server=None,
    ):
        super().__init__(name="elemental_difference_fc", config=config, server=server)
        self._inputs = InputsElementalDifferenceFc(self)
        self._outputs = OutputsElementalDifferenceFc(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)
        if scoping is not None:
            self.inputs.scoping.connect(scoping)
        if collapse_shell_layers is not None:
            self.inputs.collapse_shell_layers.connect(collapse_shell_layers)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Transforms an Elemental Nodal or Nodal field into an Elemental field.
Each elemental value is the maximum difference between the unaveraged or
averaged (depending on the input fields) computed result for all nodes
in this element. The result is computed on a given element scoping. If
the input fields are mixed shell/solid, and the shell’s layers are not
specified as collapsed, then the fields are split by element shape and
the output fields container has an elshape label.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region", "meshes_container"],
                    optional=True,
                    document=r"""The mesh region in this pin is used to perform the averaging, used if there is no fields support.""",
                ),
                3: PinSpecification(
                    name="scoping",
                    type_names=["scoping", "scopings_container"],
                    optional=True,
                    document=r"""Average only on these elements. If it is scoping container, the label must correspond to the one of the fields container.""",
                ),
                10: PinSpecification(
                    name="collapse_shell_layers",
                    type_names=["bool"],
                    optional=True,
                    document=r"""If true, the data across different shell layers is averaged as well (default is false).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="elemental_difference_fc", server=server)

    @property
    def inputs(self) -> InputsElementalDifferenceFc:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsElementalDifferenceFc.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsElementalDifferenceFc:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsElementalDifferenceFc.
        """
        return super().outputs


class InputsElementalDifferenceFc(_Inputs):
    """Intermediate class used to connect user inputs to
    elemental_difference_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.elemental_difference_fc()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_scoping = dpf.Scoping()
    >>> op.inputs.scoping.connect(my_scoping)
    >>> my_collapse_shell_layers = bool()
    >>> op.inputs.collapse_shell_layers.connect(my_collapse_shell_layers)
    """

    def __init__(self, op: Operator):
        super().__init__(elemental_difference_fc._spec().inputs, op)
        self._fields_container = Input(
            elemental_difference_fc._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._mesh = Input(elemental_difference_fc._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._mesh)
        self._scoping = Input(elemental_difference_fc._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._scoping)
        self._collapse_shell_layers = Input(
            elemental_difference_fc._spec().input_pin(10), 10, op, -1
        )
        self._inputs.append(self._collapse_shell_layers)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_difference_fc()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def mesh(self) -> Input:
        r"""Allows to connect mesh input to the operator.

        The mesh region in this pin is used to perform the averaging, used if there is no fields support.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_difference_fc()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh

    @property
    def scoping(self) -> Input:
        r"""Allows to connect scoping input to the operator.

        Average only on these elements. If it is scoping container, the label must correspond to the one of the fields container.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_difference_fc()
        >>> op.inputs.scoping.connect(my_scoping)
        >>> # or
        >>> op.inputs.scoping(my_scoping)
        """
        return self._scoping

    @property
    def collapse_shell_layers(self) -> Input:
        r"""Allows to connect collapse_shell_layers input to the operator.

        If true, the data across different shell layers is averaged as well (default is false).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_difference_fc()
        >>> op.inputs.collapse_shell_layers.connect(my_collapse_shell_layers)
        >>> # or
        >>> op.inputs.collapse_shell_layers(my_collapse_shell_layers)
        """
        return self._collapse_shell_layers


class OutputsElementalDifferenceFc(_Outputs):
    """Intermediate class used to get outputs from
    elemental_difference_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.elemental_difference_fc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(elemental_difference_fc._spec().outputs, op)
        self._fields_container = Output(
            elemental_difference_fc._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self) -> Output:
        r"""Allows to get fields_container output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.elemental_difference_fc()
        >>> # Get the output from op.outputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """
        return self._fields_container
