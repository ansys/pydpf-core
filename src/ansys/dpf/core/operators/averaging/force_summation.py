"""
force_summation
===============
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class force_summation(Operator):
    """Computes the sum of elemental forces contribution on a set of nodes in
    Global Coordinate System. Equivalent to MAPDL FSUM & NFORCE
    commands. Supports Static, Transient, Modal & Harmonic analysis
    for thermal and structural degrees of freedom.

    Parameters
    ----------
    time_scoping : Scoping, optional
        Default = all time steps
    nodal_scoping : Scoping, optional
        Nodal scoping. set of nodes in which
        elemental contribution forces will be
        accumulated (default = all nodes)
    elemental_scoping : Scoping, optional
        Elemental scoping. set of elements
        contributing to the force calcuation.
        (default = all elements)
    data_sources : DataSources
    force_type : int, optional
        Type of force to be processed (0 - default:
        total forces (static, damping, and
        inertia)., 1: static forces, 2:
        damping forces, 3: inertia forces)
    spoint : Field, optional
        Coordinate field of a point for moment
        summations. defaults to (0,0,0).

    Returns
    -------
    force_accumulation : FieldsContainer
    moment_accumulation : FieldsContainer
    heat_accumulation : FieldsContainer
    forces_on_nodes : FieldsContainer
    moments_on_nodes : FieldsContainer
    heats_on_nodes : FieldsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.averaging.force_summation()

    >>> # Make input connections
    >>> my_time_scoping = dpf.Scoping()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_nodal_scoping = dpf.Scoping()
    >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
    >>> my_elemental_scoping = dpf.Scoping()
    >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> my_force_type = int()
    >>> op.inputs.force_type.connect(my_force_type)
    >>> my_spoint = dpf.Field()
    >>> op.inputs.spoint.connect(my_spoint)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.averaging.force_summation(
    ...     time_scoping=my_time_scoping,
    ...     nodal_scoping=my_nodal_scoping,
    ...     elemental_scoping=my_elemental_scoping,
    ...     data_sources=my_data_sources,
    ...     force_type=my_force_type,
    ...     spoint=my_spoint,
    ... )

    >>> # Get output data
    >>> result_force_accumulation = op.outputs.force_accumulation()
    >>> result_moment_accumulation = op.outputs.moment_accumulation()
    >>> result_heat_accumulation = op.outputs.heat_accumulation()
    >>> result_forces_on_nodes = op.outputs.forces_on_nodes()
    >>> result_moments_on_nodes = op.outputs.moments_on_nodes()
    >>> result_heats_on_nodes = op.outputs.heats_on_nodes()
    """

    def __init__(
        self,
        time_scoping=None,
        nodal_scoping=None,
        elemental_scoping=None,
        data_sources=None,
        force_type=None,
        spoint=None,
        config=None,
        server=None,
    ):
        super().__init__(name="force_summation", config=config, server=server)
        self._inputs = InputsForceSummation(self)
        self._outputs = OutputsForceSummation(self)
        if time_scoping is not None:
            self.inputs.time_scoping.connect(time_scoping)
        if nodal_scoping is not None:
            self.inputs.nodal_scoping.connect(nodal_scoping)
        if elemental_scoping is not None:
            self.inputs.elemental_scoping.connect(elemental_scoping)
        if data_sources is not None:
            self.inputs.data_sources.connect(data_sources)
        if force_type is not None:
            self.inputs.force_type.connect(force_type)
        if spoint is not None:
            self.inputs.spoint.connect(spoint)

    @staticmethod
    def _spec():
        description = """Computes the sum of elemental forces contribution on a set of nodes in
            Global Coordinate System. Equivalent to MAPDL FSUM &amp;
            NFORCE commands. Supports Static, Transient, Modal &amp;
            Harmonic analysis for thermal and structural degrees of
            freedom."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="time_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document="""Default = all time steps""",
                ),
                1: PinSpecification(
                    name="nodal_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document="""Nodal scoping. set of nodes in which
        elemental contribution forces will be
        accumulated (default = all nodes)""",
                ),
                2: PinSpecification(
                    name="elemental_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document="""Elemental scoping. set of elements
        contributing to the force calcuation.
        (default = all elements)""",
                ),
                4: PinSpecification(
                    name="data_sources",
                    type_names=["data_sources"],
                    optional=False,
                    document="""""",
                ),
                5: PinSpecification(
                    name="force_type",
                    type_names=["int32"],
                    optional=True,
                    document="""Type of force to be processed (0 - default:
        total forces (static, damping, and
        inertia)., 1: static forces, 2:
        damping forces, 3: inertia forces)""",
                ),
                6: PinSpecification(
                    name="spoint",
                    type_names=["field"],
                    optional=True,
                    document="""Coordinate field of a point for moment
        summations. defaults to (0,0,0).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="force_accumulation",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="moment_accumulation",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
                2: PinSpecification(
                    name="heat_accumulation",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
                10: PinSpecification(
                    name="forces_on_nodes",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
                11: PinSpecification(
                    name="moments_on_nodes",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
                12: PinSpecification(
                    name="heats_on_nodes",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="force_summation", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsForceSummation
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsForceSummation
        """
        return super().outputs


class InputsForceSummation(_Inputs):
    """Intermediate class used to connect user inputs to
    force_summation operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.force_summation()
    >>> my_time_scoping = dpf.Scoping()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_nodal_scoping = dpf.Scoping()
    >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
    >>> my_elemental_scoping = dpf.Scoping()
    >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> my_force_type = int()
    >>> op.inputs.force_type.connect(my_force_type)
    >>> my_spoint = dpf.Field()
    >>> op.inputs.spoint.connect(my_spoint)
    """

    def __init__(self, op: Operator):
        super().__init__(force_summation._spec().inputs, op)
        self._time_scoping = Input(force_summation._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._time_scoping)
        self._nodal_scoping = Input(force_summation._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._nodal_scoping)
        self._elemental_scoping = Input(force_summation._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._elemental_scoping)
        self._data_sources = Input(force_summation._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._data_sources)
        self._force_type = Input(force_summation._spec().input_pin(5), 5, op, -1)
        self._inputs.append(self._force_type)
        self._spoint = Input(force_summation._spec().input_pin(6), 6, op, -1)
        self._inputs.append(self._spoint)

    @property
    def time_scoping(self):
        """Allows to connect time_scoping input to the operator.

        Default = all time steps

        Parameters
        ----------
        my_time_scoping : Scoping

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> op.inputs.time_scoping.connect(my_time_scoping)
        >>> # or
        >>> op.inputs.time_scoping(my_time_scoping)
        """
        return self._time_scoping

    @property
    def nodal_scoping(self):
        """Allows to connect nodal_scoping input to the operator.

        Nodal scoping. set of nodes in which
        elemental contribution forces will be
        accumulated (default = all nodes)

        Parameters
        ----------
        my_nodal_scoping : Scoping

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
        >>> # or
        >>> op.inputs.nodal_scoping(my_nodal_scoping)
        """
        return self._nodal_scoping

    @property
    def elemental_scoping(self):
        """Allows to connect elemental_scoping input to the operator.

        Elemental scoping. set of elements
        contributing to the force calcuation.
        (default = all elements)

        Parameters
        ----------
        my_elemental_scoping : Scoping

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
        >>> # or
        >>> op.inputs.elemental_scoping(my_elemental_scoping)
        """
        return self._elemental_scoping

    @property
    def data_sources(self):
        """Allows to connect data_sources input to the operator.

        Parameters
        ----------
        my_data_sources : DataSources

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> op.inputs.data_sources.connect(my_data_sources)
        >>> # or
        >>> op.inputs.data_sources(my_data_sources)
        """
        return self._data_sources

    @property
    def force_type(self):
        """Allows to connect force_type input to the operator.

        Type of force to be processed (0 - default:
        total forces (static, damping, and
        inertia)., 1: static forces, 2:
        damping forces, 3: inertia forces)

        Parameters
        ----------
        my_force_type : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> op.inputs.force_type.connect(my_force_type)
        >>> # or
        >>> op.inputs.force_type(my_force_type)
        """
        return self._force_type

    @property
    def spoint(self):
        """Allows to connect spoint input to the operator.

        Coordinate field of a point for moment
        summations. defaults to (0,0,0).

        Parameters
        ----------
        my_spoint : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> op.inputs.spoint.connect(my_spoint)
        >>> # or
        >>> op.inputs.spoint(my_spoint)
        """
        return self._spoint


class OutputsForceSummation(_Outputs):
    """Intermediate class used to get outputs from
    force_summation operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.averaging.force_summation()
    >>> # Connect inputs : op.inputs. ...
    >>> result_force_accumulation = op.outputs.force_accumulation()
    >>> result_moment_accumulation = op.outputs.moment_accumulation()
    >>> result_heat_accumulation = op.outputs.heat_accumulation()
    >>> result_forces_on_nodes = op.outputs.forces_on_nodes()
    >>> result_moments_on_nodes = op.outputs.moments_on_nodes()
    >>> result_heats_on_nodes = op.outputs.heats_on_nodes()
    """

    def __init__(self, op: Operator):
        super().__init__(force_summation._spec().outputs, op)
        self._force_accumulation = Output(force_summation._spec().output_pin(0), 0, op)
        self._outputs.append(self._force_accumulation)
        self._moment_accumulation = Output(force_summation._spec().output_pin(1), 1, op)
        self._outputs.append(self._moment_accumulation)
        self._heat_accumulation = Output(force_summation._spec().output_pin(2), 2, op)
        self._outputs.append(self._heat_accumulation)
        self._forces_on_nodes = Output(force_summation._spec().output_pin(10), 10, op)
        self._outputs.append(self._forces_on_nodes)
        self._moments_on_nodes = Output(force_summation._spec().output_pin(11), 11, op)
        self._outputs.append(self._moments_on_nodes)
        self._heats_on_nodes = Output(force_summation._spec().output_pin(12), 12, op)
        self._outputs.append(self._heats_on_nodes)

    @property
    def force_accumulation(self):
        """Allows to get force_accumulation output of the operator

        Returns
        ----------
        my_force_accumulation : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> # Connect inputs : op.inputs. ...
        >>> result_force_accumulation = op.outputs.force_accumulation()
        """  # noqa: E501
        return self._force_accumulation

    @property
    def moment_accumulation(self):
        """Allows to get moment_accumulation output of the operator

        Returns
        ----------
        my_moment_accumulation : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> # Connect inputs : op.inputs. ...
        >>> result_moment_accumulation = op.outputs.moment_accumulation()
        """  # noqa: E501
        return self._moment_accumulation

    @property
    def heat_accumulation(self):
        """Allows to get heat_accumulation output of the operator

        Returns
        ----------
        my_heat_accumulation : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> # Connect inputs : op.inputs. ...
        >>> result_heat_accumulation = op.outputs.heat_accumulation()
        """  # noqa: E501
        return self._heat_accumulation

    @property
    def forces_on_nodes(self):
        """Allows to get forces_on_nodes output of the operator

        Returns
        ----------
        my_forces_on_nodes : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> # Connect inputs : op.inputs. ...
        >>> result_forces_on_nodes = op.outputs.forces_on_nodes()
        """  # noqa: E501
        return self._forces_on_nodes

    @property
    def moments_on_nodes(self):
        """Allows to get moments_on_nodes output of the operator

        Returns
        ----------
        my_moments_on_nodes : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> # Connect inputs : op.inputs. ...
        >>> result_moments_on_nodes = op.outputs.moments_on_nodes()
        """  # noqa: E501
        return self._moments_on_nodes

    @property
    def heats_on_nodes(self):
        """Allows to get heats_on_nodes output of the operator

        Returns
        ----------
        my_heats_on_nodes : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.averaging.force_summation()
        >>> # Connect inputs : op.inputs. ...
        >>> result_heats_on_nodes = op.outputs.heats_on_nodes()
        """  # noqa: E501
        return self._heats_on_nodes
