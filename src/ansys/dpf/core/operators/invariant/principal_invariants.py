"""
principal_invariants

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class principal_invariants(Operator):
    r"""Computes the element-wise Eigen values of a tensor field.


    Parameters
    ----------
    field: Field

    Returns
    -------
    field_eig_1: Field
        first eigen value field
    field_eig_2: Field
        second eigen value field
    field_eig_3: Field
        third eigen value field

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.invariant.principal_invariants()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.invariant.principal_invariants(
    ...     field=my_field,
    ... )

    >>> # Get output data
    >>> result_field_eig_1 = op.outputs.field_eig_1()
    >>> result_field_eig_2 = op.outputs.field_eig_2()
    >>> result_field_eig_3 = op.outputs.field_eig_3()
    """

    def __init__(self, field=None, config=None, server=None):
        super().__init__(name="invariants", config=config, server=server)
        self._inputs = InputsPrincipalInvariants(self)
        self._outputs = OutputsPrincipalInvariants(self)
        if field is not None:
            self.inputs.field.connect(field)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Computes the element-wise Eigen values of a tensor field.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field_eig_1",
                    type_names=["field"],
                    optional=False,
                    document=r"""first eigen value field""",
                ),
                1: PinSpecification(
                    name="field_eig_2",
                    type_names=["field"],
                    optional=False,
                    document=r"""second eigen value field""",
                ),
                2: PinSpecification(
                    name="field_eig_3",
                    type_names=["field"],
                    optional=False,
                    document=r"""third eigen value field""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="invariants", server=server)

    @property
    def inputs(self) -> InputsPrincipalInvariants:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsPrincipalInvariants.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsPrincipalInvariants:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsPrincipalInvariants.
        """
        return super().outputs


class InputsPrincipalInvariants(_Inputs):
    """Intermediate class used to connect user inputs to
    principal_invariants operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.invariant.principal_invariants()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    """

    def __init__(self, op: Operator):
        super().__init__(principal_invariants._spec().inputs, op)
        self._field = Input(principal_invariants._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)

    @property
    def field(self) -> Input:
        r"""Allows to connect field input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.invariant.principal_invariants()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field


class OutputsPrincipalInvariants(_Outputs):
    """Intermediate class used to get outputs from
    principal_invariants operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.invariant.principal_invariants()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field_eig_1 = op.outputs.field_eig_1()
    >>> result_field_eig_2 = op.outputs.field_eig_2()
    >>> result_field_eig_3 = op.outputs.field_eig_3()
    """

    def __init__(self, op: Operator):
        super().__init__(principal_invariants._spec().outputs, op)
        self._field_eig_1 = Output(principal_invariants._spec().output_pin(0), 0, op)
        self._outputs.append(self._field_eig_1)
        self._field_eig_2 = Output(principal_invariants._spec().output_pin(1), 1, op)
        self._outputs.append(self._field_eig_2)
        self._field_eig_3 = Output(principal_invariants._spec().output_pin(2), 2, op)
        self._outputs.append(self._field_eig_3)

    @property
    def field_eig_1(self) -> Output:
        r"""Allows to get field_eig_1 output of the operator

        first eigen value field

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.invariant.principal_invariants()
        >>> # Get the output from op.outputs. ...
        >>> result_field_eig_1 = op.outputs.field_eig_1()
        """
        return self._field_eig_1

    @property
    def field_eig_2(self) -> Output:
        r"""Allows to get field_eig_2 output of the operator

        second eigen value field

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.invariant.principal_invariants()
        >>> # Get the output from op.outputs. ...
        >>> result_field_eig_2 = op.outputs.field_eig_2()
        """
        return self._field_eig_2

    @property
    def field_eig_3(self) -> Output:
        r"""Allows to get field_eig_3 output of the operator

        third eigen value field

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.invariant.principal_invariants()
        >>> # Get the output from op.outputs. ...
        >>> result_field_eig_3 = op.outputs.field_eig_3()
        """
        return self._field_eig_3
