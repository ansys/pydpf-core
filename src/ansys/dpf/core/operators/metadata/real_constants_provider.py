"""
real_constants_provider

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class real_constants_provider(Operator):
    r"""Reads real constants from the result files contained in the streams or
    data sources.


    Parameters
    ----------
    solver_real_constants_ids: int, optional
        Real Constant ids to recover used by the solver. If not set, all available real constants to be recovered.
    streams: StreamsContainer, optional
        Result file container allowed to be kept open to cache data.
    data_sources: DataSources
        Result file path container, used if no streams are set.

    Returns
    -------
    real_constants1: Field
    real_constants2: Field

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.metadata.real_constants_provider()

    >>> # Make input connections
    >>> my_solver_real_constants_ids = int()
    >>> op.inputs.solver_real_constants_ids.connect(my_solver_real_constants_ids)
    >>> my_streams = dpf.StreamsContainer()
    >>> op.inputs.streams.connect(my_streams)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.metadata.real_constants_provider(
    ...     solver_real_constants_ids=my_solver_real_constants_ids,
    ...     streams=my_streams,
    ...     data_sources=my_data_sources,
    ... )

    >>> # Get output data
    >>> result_real_constants1 = op.outputs.real_constants1()
    >>> result_real_constants2 = op.outputs.real_constants2()
    """

    def __init__(
        self,
        solver_real_constants_ids=None,
        streams=None,
        data_sources=None,
        config=None,
        server=None,
    ):
        super().__init__(name="real_constants_provider", config=config, server=server)
        self._inputs = InputsRealConstantsProvider(self)
        self._outputs = OutputsRealConstantsProvider(self)
        if solver_real_constants_ids is not None:
            self.inputs.solver_real_constants_ids.connect(solver_real_constants_ids)
        if streams is not None:
            self.inputs.streams.connect(streams)
        if data_sources is not None:
            self.inputs.data_sources.connect(data_sources)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Reads real constants from the result files contained in the streams or
data sources.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                1: PinSpecification(
                    name="solver_real_constants_ids",
                    type_names=["int32", "vector<int32>"],
                    optional=True,
                    document=r"""Real Constant ids to recover used by the solver. If not set, all available real constants to be recovered.""",
                ),
                3: PinSpecification(
                    name="streams",
                    type_names=["streams_container"],
                    optional=True,
                    document=r"""Result file container allowed to be kept open to cache data.""",
                ),
                4: PinSpecification(
                    name="data_sources",
                    type_names=["data_sources"],
                    optional=False,
                    document=r"""Result file path container, used if no streams are set.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="real_constants1",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="real_constants2",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="real_constants_provider", server=server)

    @property
    def inputs(self) -> InputsRealConstantsProvider:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsRealConstantsProvider.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsRealConstantsProvider:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsRealConstantsProvider.
        """
        return super().outputs


class InputsRealConstantsProvider(_Inputs):
    """Intermediate class used to connect user inputs to
    real_constants_provider operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.metadata.real_constants_provider()
    >>> my_solver_real_constants_ids = int()
    >>> op.inputs.solver_real_constants_ids.connect(my_solver_real_constants_ids)
    >>> my_streams = dpf.StreamsContainer()
    >>> op.inputs.streams.connect(my_streams)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    """

    def __init__(self, op: Operator):
        super().__init__(real_constants_provider._spec().inputs, op)
        self._solver_real_constants_ids = Input(
            real_constants_provider._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._solver_real_constants_ids)
        self._streams = Input(real_constants_provider._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._streams)
        self._data_sources = Input(
            real_constants_provider._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._data_sources)

    @property
    def solver_real_constants_ids(self) -> Input:
        r"""Allows to connect solver_real_constants_ids input to the operator.

        Real Constant ids to recover used by the solver. If not set, all available real constants to be recovered.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.real_constants_provider()
        >>> op.inputs.solver_real_constants_ids.connect(my_solver_real_constants_ids)
        >>> # or
        >>> op.inputs.solver_real_constants_ids(my_solver_real_constants_ids)
        """
        return self._solver_real_constants_ids

    @property
    def streams(self) -> Input:
        r"""Allows to connect streams input to the operator.

        Result file container allowed to be kept open to cache data.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.real_constants_provider()
        >>> op.inputs.streams.connect(my_streams)
        >>> # or
        >>> op.inputs.streams(my_streams)
        """
        return self._streams

    @property
    def data_sources(self) -> Input:
        r"""Allows to connect data_sources input to the operator.

        Result file path container, used if no streams are set.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.real_constants_provider()
        >>> op.inputs.data_sources.connect(my_data_sources)
        >>> # or
        >>> op.inputs.data_sources(my_data_sources)
        """
        return self._data_sources


class OutputsRealConstantsProvider(_Outputs):
    """Intermediate class used to get outputs from
    real_constants_provider operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.metadata.real_constants_provider()
    >>> # Connect inputs : op.inputs. ...
    >>> result_real_constants1 = op.outputs.real_constants1()
    >>> result_real_constants2 = op.outputs.real_constants2()
    """

    def __init__(self, op: Operator):
        super().__init__(real_constants_provider._spec().outputs, op)
        self._real_constants1 = Output(
            real_constants_provider._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._real_constants1)
        self._real_constants2 = Output(
            real_constants_provider._spec().output_pin(1), 1, op
        )
        self._outputs.append(self._real_constants2)

    @property
    def real_constants1(self) -> Output:
        r"""Allows to get real_constants1 output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.real_constants_provider()
        >>> # Get the output from op.outputs. ...
        >>> result_real_constants1 = op.outputs.real_constants1()
        """
        return self._real_constants1

    @property
    def real_constants2(self) -> Output:
        r"""Allows to get real_constants2 output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.real_constants_provider()
        >>> # Get the output from op.outputs. ...
        >>> result_real_constants2 = op.outputs.real_constants2()
        """
        return self._real_constants2
