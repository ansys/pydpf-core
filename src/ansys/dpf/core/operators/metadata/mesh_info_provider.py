"""
mesh_info_provider
==================
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class mesh_info_provider(Operator):
    """Reads the mesh information, such as number of elements (common
    property), number of faces (Cff plugins) or scoping of parts
    (LSDYNA plugins) on files contained in the streams or data
    sources.

    Parameters
    ----------
    time_scoping : int, optional
        Optional time/frequency set id of the mesh.
    streams_container : StreamsContainer, optional
        Streams (mesh file container) (optional)
    data_sources : DataSources
        If the stream is null, retrieves the file
        path from the data sources.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.metadata.mesh_info_provider()

    >>> # Make input connections
    >>> my_time_scoping = int()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_streams_container = dpf.StreamsContainer()
    >>> op.inputs.streams_container.connect(my_streams_container)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.metadata.mesh_info_provider(
    ...     time_scoping=my_time_scoping,
    ...     streams_container=my_streams_container,
    ...     data_sources=my_data_sources,
    ... )

    >>> # Get output data
    >>> result_mesh_info = op.outputs.mesh_info()
    """

    def __init__(
        self,
        time_scoping=None,
        streams_container=None,
        data_sources=None,
        config=None,
        server=None,
    ):
        super().__init__(name="mesh_info_provider", config=config, server=server)
        self._inputs = InputsMeshInfoProvider(self)
        self._outputs = OutputsMeshInfoProvider(self)
        if time_scoping is not None:
            self.inputs.time_scoping.connect(time_scoping)
        if streams_container is not None:
            self.inputs.streams_container.connect(streams_container)
        if data_sources is not None:
            self.inputs.data_sources.connect(data_sources)

    @staticmethod
    def _spec():
        description = """Reads the mesh information, such as number of elements (common
            property), number of faces (Cff plugins) or scoping of
            parts (LSDYNA plugins) on files contained in the streams
            or data sources."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="time_scoping",
                    type_names=["int32"],
                    optional=True,
                    document="""Optional time/frequency set id of the mesh.""",
                ),
                3: PinSpecification(
                    name="streams_container",
                    type_names=["streams_container"],
                    optional=True,
                    document="""Streams (mesh file container) (optional)""",
                ),
                4: PinSpecification(
                    name="data_sources",
                    type_names=["data_sources"],
                    optional=False,
                    document="""If the stream is null, retrieves the file
        path from the data sources.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="mesh_info",
                    type_names=["generic_data_container"],
                    optional=False,
                    document="""""",
                    name_derived_class=["mesh_info"],
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="mesh_info_provider", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsMeshInfoProvider
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsMeshInfoProvider
        """
        return super().outputs


class InputsMeshInfoProvider(_Inputs):
    """Intermediate class used to connect user inputs to
    mesh_info_provider operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.metadata.mesh_info_provider()
    >>> my_time_scoping = int()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_streams_container = dpf.StreamsContainer()
    >>> op.inputs.streams_container.connect(my_streams_container)
    >>> my_data_sources = dpf.DataSources()
    >>> op.inputs.data_sources.connect(my_data_sources)
    """

    def __init__(self, op: Operator):
        super().__init__(mesh_info_provider._spec().inputs, op)
        self._time_scoping = Input(mesh_info_provider._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._time_scoping)
        self._streams_container = Input(
            mesh_info_provider._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._streams_container)
        self._data_sources = Input(mesh_info_provider._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._data_sources)

    @property
    def time_scoping(self):
        """Allows to connect time_scoping input to the operator.

        Optional time/frequency set id of the mesh.

        Parameters
        ----------
        my_time_scoping : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.mesh_info_provider()
        >>> op.inputs.time_scoping.connect(my_time_scoping)
        >>> # or
        >>> op.inputs.time_scoping(my_time_scoping)
        """
        return self._time_scoping

    @property
    def streams_container(self):
        """Allows to connect streams_container input to the operator.

        Streams (mesh file container) (optional)

        Parameters
        ----------
        my_streams_container : StreamsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.mesh_info_provider()
        >>> op.inputs.streams_container.connect(my_streams_container)
        >>> # or
        >>> op.inputs.streams_container(my_streams_container)
        """
        return self._streams_container

    @property
    def data_sources(self):
        """Allows to connect data_sources input to the operator.

        If the stream is null, retrieves the file
        path from the data sources.

        Parameters
        ----------
        my_data_sources : DataSources

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.mesh_info_provider()
        >>> op.inputs.data_sources.connect(my_data_sources)
        >>> # or
        >>> op.inputs.data_sources(my_data_sources)
        """
        return self._data_sources


class OutputsMeshInfoProvider(_Outputs):
    """Intermediate class used to get outputs from
    mesh_info_provider operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.metadata.mesh_info_provider()
    >>> # Connect inputs : op.inputs. ...
    >>> result_mesh_info = op.outputs.mesh_info()
    """

    def __init__(self, op: Operator):
        super().__init__(mesh_info_provider._spec().outputs, op)
        self._mesh_info = Output(mesh_info_provider._spec().output_pin(0), 0, op)
        self._outputs.append(self._mesh_info)

    @property
    def mesh_info(self):
        """Allows to get mesh_info output of the operator

        Returns
        ----------
        my_mesh_info : mesh_info

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.mesh_info_provider()
        >>> # Connect inputs : op.inputs. ...
        >>> result_mesh_info = op.outputs.mesh_info()
        """  # noqa: E501
        return self._mesh_info
