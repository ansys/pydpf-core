"""
time_slicer
===========
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class time_slicer(Operator):
    """Create multiple slices of a Time scoped Field having a
    TimeFreqSupport.

    Parameters
    ----------
    field : Field
    slice_number : int
        Number of slices.
    overlap : float, optional
        Slices overlap (default is 0%).


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.metadata.time_slicer()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_slice_number = int()
    >>> op.inputs.slice_number.connect(my_slice_number)
    >>> my_overlap = float()
    >>> op.inputs.overlap.connect(my_overlap)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.metadata.time_slicer(
    ...     field=my_field,
    ...     slice_number=my_slice_number,
    ...     overlap=my_overlap,
    ... )

    >>> # Get output data
    >>> result_time_freq_support = op.outputs.time_freq_support()
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self, field=None, slice_number=None, overlap=None, config=None, server=None
    ):
        super().__init__(name="timefreq::timeslicer", config=config, server=server)
        self._inputs = InputsTimeSlicer(self)
        self._outputs = OutputsTimeSlicer(self)
        if field is not None:
            self.inputs.field.connect(field)
        if slice_number is not None:
            self.inputs.slice_number.connect(slice_number)
        if overlap is not None:
            self.inputs.overlap.connect(overlap)

    @staticmethod
    def _spec():
        description = """Create multiple slices of a Time scoped Field having a
            TimeFreqSupport."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="slice_number",
                    type_names=["int32"],
                    optional=False,
                    document="""Number of slices.""",
                ),
                2: PinSpecification(
                    name="overlap",
                    type_names=["double"],
                    optional=True,
                    document="""Slices overlap (default is 0%).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="time_freq_support",
                    type_names=["time_freq_support"],
                    optional=False,
                    document="""Timefreqsupport having each load step
        representing a slice, central slice
        time set as rpm.""",
                ),
                1: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fieldscontainer having slice label, central
        slice time set as rpm.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="timefreq::timeslicer", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsTimeSlicer
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsTimeSlicer
        """
        return super().outputs


class InputsTimeSlicer(_Inputs):
    """Intermediate class used to connect user inputs to
    time_slicer operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.metadata.time_slicer()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_slice_number = int()
    >>> op.inputs.slice_number.connect(my_slice_number)
    >>> my_overlap = float()
    >>> op.inputs.overlap.connect(my_overlap)
    """

    def __init__(self, op: Operator):
        super().__init__(time_slicer._spec().inputs, op)
        self._field = Input(time_slicer._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._slice_number = Input(time_slicer._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._slice_number)
        self._overlap = Input(time_slicer._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._overlap)

    @property
    def field(self):
        """Allows to connect field input to the operator.

        Parameters
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.time_slicer()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def slice_number(self):
        """Allows to connect slice_number input to the operator.

        Number of slices.

        Parameters
        ----------
        my_slice_number : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.time_slicer()
        >>> op.inputs.slice_number.connect(my_slice_number)
        >>> # or
        >>> op.inputs.slice_number(my_slice_number)
        """
        return self._slice_number

    @property
    def overlap(self):
        """Allows to connect overlap input to the operator.

        Slices overlap (default is 0%).

        Parameters
        ----------
        my_overlap : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.time_slicer()
        >>> op.inputs.overlap.connect(my_overlap)
        >>> # or
        >>> op.inputs.overlap(my_overlap)
        """
        return self._overlap


class OutputsTimeSlicer(_Outputs):
    """Intermediate class used to get outputs from
    time_slicer operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.metadata.time_slicer()
    >>> # Connect inputs : op.inputs. ...
    >>> result_time_freq_support = op.outputs.time_freq_support()
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(time_slicer._spec().outputs, op)
        self._time_freq_support = Output(time_slicer._spec().output_pin(0), 0, op)
        self._outputs.append(self._time_freq_support)
        self._fields_container = Output(time_slicer._spec().output_pin(1), 1, op)
        self._outputs.append(self._fields_container)

    @property
    def time_freq_support(self):
        """Allows to get time_freq_support output of the operator

        Returns
        ----------
        my_time_freq_support : TimeFreqSupport

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.time_slicer()
        >>> # Connect inputs : op.inputs. ...
        >>> result_time_freq_support = op.outputs.time_freq_support()
        """  # noqa: E501
        return self._time_freq_support

    @property
    def fields_container(self):
        """Allows to get fields_container output of the operator

        Returns
        ----------
        my_fields_container : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.metadata.time_slicer()
        >>> # Connect inputs : op.inputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """  # noqa: E501
        return self._fields_container
