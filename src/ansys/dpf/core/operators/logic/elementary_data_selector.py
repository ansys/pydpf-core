"""
elementary_data_selector
========================
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class elementary_data_selector(Operator):
    """Creates a scalar/vector field based on the selected elementary data.

    Parameters
    ----------
    field : Field or FieldsContainer
    elementary_data_index : int
        One or several elementary data index that
        will be extracted from the initial
        field. for field with nature matrix,
        this is the line indices to extract.
    default_value : float, optional
        Set a default value for elementary data that
        do not exist.
    elementary_data_index_2 : int, optional
        For field with nature matrix, this is the
        column indices to extract.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.logic.elementary_data_selector()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_elementary_data_index = int()
    >>> op.inputs.elementary_data_index.connect(my_elementary_data_index)
    >>> my_default_value = float()
    >>> op.inputs.default_value.connect(my_default_value)
    >>> my_elementary_data_index_2 = int()
    >>> op.inputs.elementary_data_index_2.connect(my_elementary_data_index_2)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.logic.elementary_data_selector(
    ...     field=my_field,
    ...     elementary_data_index=my_elementary_data_index,
    ...     default_value=my_default_value,
    ...     elementary_data_index_2=my_elementary_data_index_2,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self,
        field=None,
        elementary_data_index=None,
        default_value=None,
        elementary_data_index_2=None,
        config=None,
        server=None,
    ):
        super().__init__(name="elementary_data_selector", config=config, server=server)
        self._inputs = InputsElementaryDataSelector(self)
        self._outputs = OutputsElementaryDataSelector(self)
        if field is not None:
            self.inputs.field.connect(field)
        if elementary_data_index is not None:
            self.inputs.elementary_data_index.connect(elementary_data_index)
        if default_value is not None:
            self.inputs.default_value.connect(default_value)
        if elementary_data_index_2 is not None:
            self.inputs.elementary_data_index_2.connect(elementary_data_index_2)

    @staticmethod
    def _spec():
        description = (
            """Creates a scalar/vector field based on the selected elementary data."""
        )
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="elementary_data_index",
                    type_names=["int32", "vector<int32>"],
                    optional=False,
                    document="""One or several elementary data index that
        will be extracted from the initial
        field. for field with nature matrix,
        this is the line indices to extract.""",
                ),
                2: PinSpecification(
                    name="default_value",
                    type_names=["double"],
                    optional=True,
                    document="""Set a default value for elementary data that
        do not exist.""",
                ),
                3: PinSpecification(
                    name="elementary_data_index_2",
                    type_names=["int32", "vector<int32>"],
                    optional=True,
                    document="""For field with nature matrix, this is the
        column indices to extract.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="elementary_data_selector", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsElementaryDataSelector
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsElementaryDataSelector
        """
        return super().outputs


class InputsElementaryDataSelector(_Inputs):
    """Intermediate class used to connect user inputs to
    elementary_data_selector operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.elementary_data_selector()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_elementary_data_index = int()
    >>> op.inputs.elementary_data_index.connect(my_elementary_data_index)
    >>> my_default_value = float()
    >>> op.inputs.default_value.connect(my_default_value)
    >>> my_elementary_data_index_2 = int()
    >>> op.inputs.elementary_data_index_2.connect(my_elementary_data_index_2)
    """

    def __init__(self, op: Operator):
        super().__init__(elementary_data_selector._spec().inputs, op)
        self._field = Input(elementary_data_selector._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._elementary_data_index = Input(
            elementary_data_selector._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._elementary_data_index)
        self._default_value = Input(
            elementary_data_selector._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._default_value)
        self._elementary_data_index_2 = Input(
            elementary_data_selector._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._elementary_data_index_2)

    @property
    def field(self):
        """Allows to connect field input to the operator.

        Parameters
        ----------
        my_field : Field or FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.elementary_data_selector()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def elementary_data_index(self):
        """Allows to connect elementary_data_index input to the operator.

        One or several elementary data index that
        will be extracted from the initial
        field. for field with nature matrix,
        this is the line indices to extract.

        Parameters
        ----------
        my_elementary_data_index : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.elementary_data_selector()
        >>> op.inputs.elementary_data_index.connect(my_elementary_data_index)
        >>> # or
        >>> op.inputs.elementary_data_index(my_elementary_data_index)
        """
        return self._elementary_data_index

    @property
    def default_value(self):
        """Allows to connect default_value input to the operator.

        Set a default value for elementary data that
        do not exist.

        Parameters
        ----------
        my_default_value : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.elementary_data_selector()
        >>> op.inputs.default_value.connect(my_default_value)
        >>> # or
        >>> op.inputs.default_value(my_default_value)
        """
        return self._default_value

    @property
    def elementary_data_index_2(self):
        """Allows to connect elementary_data_index_2 input to the operator.

        For field with nature matrix, this is the
        column indices to extract.

        Parameters
        ----------
        my_elementary_data_index_2 : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.elementary_data_selector()
        >>> op.inputs.elementary_data_index_2.connect(my_elementary_data_index_2)
        >>> # or
        >>> op.inputs.elementary_data_index_2(my_elementary_data_index_2)
        """
        return self._elementary_data_index_2


class OutputsElementaryDataSelector(_Outputs):
    """Intermediate class used to get outputs from
    elementary_data_selector operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.elementary_data_selector()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(elementary_data_selector._spec().outputs, op)
        self._field = Output(elementary_data_selector._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)

    @property
    def field(self):
        """Allows to get field output of the operator

        Returns
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.elementary_data_selector()
        >>> # Connect inputs : op.inputs. ...
        >>> result_field = op.outputs.field()
        """  # noqa: E501
        return self._field
