"""
identical_generic_data_containers

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class identical_generic_data_containers(Operator):
    r"""Takes two generic data containers and compares them. Supported types:
    Field, FieldsContainer, Mesh, MeshesContainer, PropertyField,
    PropertyFieldsContainer, Scoping, ScopingsContainer, StringFieldstandard
    types (double, int, string, vector of int, doubles, string)Note: all
    inputs related to fields, mesh, and so on are passed to each property
    check.


    Parameters
    ----------
    generic_data_containerA: GenericDataContainer
    generic_data_containerB: GenericDataContainer
    double_value: float
        Double positive small value. Smallest value considered during the comparison step. All the absolute values in the field less than this value are considered null, (default value: 1.0e-14).
    double_tolerance: float, optional
        Double relative tolerance. Maximum tolerance gap between two compared values. Values within relative tolerance are considered identical. Formula is (v1-v2)/v2 < relativeTol. Default is 0.001.
    compare_auxiliary: bool
        For meshes and meshescontainer: compare auxiliary data (i.e property fields, scopings...). Default value is 'false'.

    Returns
    -------
    included: bool
        bool (true if belongs...)
    message: str

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.logic.identical_generic_data_containers()

    >>> # Make input connections
    >>> my_generic_data_containerA = dpf.GenericDataContainer()
    >>> op.inputs.generic_data_containerA.connect(my_generic_data_containerA)
    >>> my_generic_data_containerB = dpf.GenericDataContainer()
    >>> op.inputs.generic_data_containerB.connect(my_generic_data_containerB)
    >>> my_double_value = float()
    >>> op.inputs.double_value.connect(my_double_value)
    >>> my_double_tolerance = float()
    >>> op.inputs.double_tolerance.connect(my_double_tolerance)
    >>> my_compare_auxiliary = bool()
    >>> op.inputs.compare_auxiliary.connect(my_compare_auxiliary)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.logic.identical_generic_data_containers(
    ...     generic_data_containerA=my_generic_data_containerA,
    ...     generic_data_containerB=my_generic_data_containerB,
    ...     double_value=my_double_value,
    ...     double_tolerance=my_double_tolerance,
    ...     compare_auxiliary=my_compare_auxiliary,
    ... )

    >>> # Get output data
    >>> result_included = op.outputs.included()
    >>> result_message = op.outputs.message()
    """

    def __init__(
        self,
        generic_data_containerA=None,
        generic_data_containerB=None,
        double_value=None,
        double_tolerance=None,
        compare_auxiliary=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="compare::generic_data_container", config=config, server=server
        )
        self._inputs = InputsIdenticalGenericDataContainers(self)
        self._outputs = OutputsIdenticalGenericDataContainers(self)
        if generic_data_containerA is not None:
            self.inputs.generic_data_containerA.connect(generic_data_containerA)
        if generic_data_containerB is not None:
            self.inputs.generic_data_containerB.connect(generic_data_containerB)
        if double_value is not None:
            self.inputs.double_value.connect(double_value)
        if double_tolerance is not None:
            self.inputs.double_tolerance.connect(double_tolerance)
        if compare_auxiliary is not None:
            self.inputs.compare_auxiliary.connect(compare_auxiliary)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Takes two generic data containers and compares them. Supported types:
Field, FieldsContainer, Mesh, MeshesContainer, PropertyField,
PropertyFieldsContainer, Scoping, ScopingsContainer, StringFieldstandard
types (double, int, string, vector of int, doubles, string)Note: all
inputs related to fields, mesh, and so on are passed to each property
check.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="generic_data_containerA",
                    type_names=["generic_data_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="generic_data_containerB",
                    type_names=["generic_data_container"],
                    optional=False,
                    document=r"""""",
                ),
                2: PinSpecification(
                    name="double_value",
                    type_names=["double"],
                    optional=False,
                    document=r"""Double positive small value. Smallest value considered during the comparison step. All the absolute values in the field less than this value are considered null, (default value: 1.0e-14).""",
                ),
                3: PinSpecification(
                    name="double_tolerance",
                    type_names=["double"],
                    optional=True,
                    document=r"""Double relative tolerance. Maximum tolerance gap between two compared values. Values within relative tolerance are considered identical. Formula is (v1-v2)/v2 < relativeTol. Default is 0.001.""",
                ),
                4: PinSpecification(
                    name="compare_auxiliary",
                    type_names=["bool"],
                    optional=False,
                    document=r"""For meshes and meshescontainer: compare auxiliary data (i.e property fields, scopings...). Default value is 'false'.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="included",
                    type_names=["bool"],
                    optional=False,
                    document=r"""bool (true if belongs...)""",
                ),
                1: PinSpecification(
                    name="message",
                    type_names=["string"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(
            name="compare::generic_data_container", server=server
        )

    @property
    def inputs(self) -> InputsIdenticalGenericDataContainers:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsIdenticalGenericDataContainers.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsIdenticalGenericDataContainers:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsIdenticalGenericDataContainers.
        """
        return super().outputs


class InputsIdenticalGenericDataContainers(_Inputs):
    """Intermediate class used to connect user inputs to
    identical_generic_data_containers operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_generic_data_containers()
    >>> my_generic_data_containerA = dpf.GenericDataContainer()
    >>> op.inputs.generic_data_containerA.connect(my_generic_data_containerA)
    >>> my_generic_data_containerB = dpf.GenericDataContainer()
    >>> op.inputs.generic_data_containerB.connect(my_generic_data_containerB)
    >>> my_double_value = float()
    >>> op.inputs.double_value.connect(my_double_value)
    >>> my_double_tolerance = float()
    >>> op.inputs.double_tolerance.connect(my_double_tolerance)
    >>> my_compare_auxiliary = bool()
    >>> op.inputs.compare_auxiliary.connect(my_compare_auxiliary)
    """

    def __init__(self, op: Operator):
        super().__init__(identical_generic_data_containers._spec().inputs, op)
        self._generic_data_containerA = Input(
            identical_generic_data_containers._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._generic_data_containerA)
        self._generic_data_containerB = Input(
            identical_generic_data_containers._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._generic_data_containerB)
        self._double_value = Input(
            identical_generic_data_containers._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._double_value)
        self._double_tolerance = Input(
            identical_generic_data_containers._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._double_tolerance)
        self._compare_auxiliary = Input(
            identical_generic_data_containers._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._compare_auxiliary)

    @property
    def generic_data_containerA(self) -> Input:
        r"""Allows to connect generic_data_containerA input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_generic_data_containers()
        >>> op.inputs.generic_data_containerA.connect(my_generic_data_containerA)
        >>> # or
        >>> op.inputs.generic_data_containerA(my_generic_data_containerA)
        """
        return self._generic_data_containerA

    @property
    def generic_data_containerB(self) -> Input:
        r"""Allows to connect generic_data_containerB input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_generic_data_containers()
        >>> op.inputs.generic_data_containerB.connect(my_generic_data_containerB)
        >>> # or
        >>> op.inputs.generic_data_containerB(my_generic_data_containerB)
        """
        return self._generic_data_containerB

    @property
    def double_value(self) -> Input:
        r"""Allows to connect double_value input to the operator.

        Double positive small value. Smallest value considered during the comparison step. All the absolute values in the field less than this value are considered null, (default value: 1.0e-14).

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_generic_data_containers()
        >>> op.inputs.double_value.connect(my_double_value)
        >>> # or
        >>> op.inputs.double_value(my_double_value)
        """
        return self._double_value

    @property
    def double_tolerance(self) -> Input:
        r"""Allows to connect double_tolerance input to the operator.

        Double relative tolerance. Maximum tolerance gap between two compared values. Values within relative tolerance are considered identical. Formula is (v1-v2)/v2 < relativeTol. Default is 0.001.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_generic_data_containers()
        >>> op.inputs.double_tolerance.connect(my_double_tolerance)
        >>> # or
        >>> op.inputs.double_tolerance(my_double_tolerance)
        """
        return self._double_tolerance

    @property
    def compare_auxiliary(self) -> Input:
        r"""Allows to connect compare_auxiliary input to the operator.

        For meshes and meshescontainer: compare auxiliary data (i.e property fields, scopings...). Default value is 'false'.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_generic_data_containers()
        >>> op.inputs.compare_auxiliary.connect(my_compare_auxiliary)
        >>> # or
        >>> op.inputs.compare_auxiliary(my_compare_auxiliary)
        """
        return self._compare_auxiliary


class OutputsIdenticalGenericDataContainers(_Outputs):
    """Intermediate class used to get outputs from
    identical_generic_data_containers operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_generic_data_containers()
    >>> # Connect inputs : op.inputs. ...
    >>> result_included = op.outputs.included()
    >>> result_message = op.outputs.message()
    """

    def __init__(self, op: Operator):
        super().__init__(identical_generic_data_containers._spec().outputs, op)
        self._included = Output(
            identical_generic_data_containers._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._included)
        self._message = Output(
            identical_generic_data_containers._spec().output_pin(1), 1, op
        )
        self._outputs.append(self._message)

    @property
    def included(self) -> Output:
        r"""Allows to get included output of the operator

        bool (true if belongs...)

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_generic_data_containers()
        >>> # Get the output from op.outputs. ...
        >>> result_included = op.outputs.included()
        """
        return self._included

    @property
    def message(self) -> Output:
        r"""Allows to get message output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_generic_data_containers()
        >>> # Get the output from op.outputs. ...
        >>> result_message = op.outputs.message()
        """
        return self._message
