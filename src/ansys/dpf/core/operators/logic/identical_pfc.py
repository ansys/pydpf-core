"""
identical_pfc

Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class identical_pfc(Operator):
    """Checks if two property_fields_container are identical.

    Parameters
    ----------
    property_fields_containerA : PropertyFieldsContainer
    property_fields_containerB : PropertyFieldsContainer

    Returns
    -------
    boolean : bool
        Bool (true if identical...)
    message : str

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.logic.identical_pfc()

    >>> # Make input connections
    >>> my_property_fields_containerA = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_containerA.connect(my_property_fields_containerA)
    >>> my_property_fields_containerB = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_containerB.connect(my_property_fields_containerB)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.logic.identical_pfc(
    ...     property_fields_containerA=my_property_fields_containerA,
    ...     property_fields_containerB=my_property_fields_containerB,
    ... )

    >>> # Get output data
    >>> result_boolean = op.outputs.boolean()
    >>> result_message = op.outputs.message()
    """

    def __init__(
        self,
        property_fields_containerA=None,
        property_fields_containerB=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="compare::property_fields_container", config=config, server=server
        )
        self._inputs = InputsIdenticalPfc(self)
        self._outputs = OutputsIdenticalPfc(self)
        if property_fields_containerA is not None:
            self.inputs.property_fields_containerA.connect(property_fields_containerA)
        if property_fields_containerB is not None:
            self.inputs.property_fields_containerB.connect(property_fields_containerB)

    @staticmethod
    def _spec():
        description = """Checks if two property_fields_container are identical."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="property_fields_containerA",
                    type_names=["property_fields_container"],
                    optional=False,
                    document="""""",
                    aliases=[],
                ),
                1: PinSpecification(
                    name="property_fields_containerB",
                    type_names=["property_fields_container"],
                    optional=False,
                    document="""""",
                    aliases=[],
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="boolean",
                    type_names=["bool"],
                    optional=False,
                    document="""Bool (true if identical...)""",
                    aliases=[],
                ),
                1: PinSpecification(
                    name="message",
                    type_names=["string"],
                    optional=False,
                    document="""""",
                    aliases=[],
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="compare::property_fields_container", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsIdenticalPfc
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsIdenticalPfc
        """
        return super().outputs


class InputsIdenticalPfc(_Inputs):
    """Intermediate class used to connect user inputs to
    identical_pfc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_pfc()
    >>> my_property_fields_containerA = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_containerA.connect(my_property_fields_containerA)
    >>> my_property_fields_containerB = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_containerB.connect(my_property_fields_containerB)
    """

    def __init__(self, op: Operator):
        super().__init__(identical_pfc._spec().inputs, op)
        self._property_fields_containerA = Input(
            identical_pfc._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._property_fields_containerA)
        self._property_fields_containerB = Input(
            identical_pfc._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._property_fields_containerB)

    @property
    def property_fields_containerA(self):
        """Allows to connect property_fields_containerA input to the operator.

        Parameters
        ----------
        my_property_fields_containerA : PropertyFieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_pfc()
        >>> op.inputs.property_fields_containerA.connect(my_property_fields_containerA)
        >>> # or
        >>> op.inputs.property_fields_containerA(my_property_fields_containerA)
        """
        return self._property_fields_containerA

    @property
    def property_fields_containerB(self):
        """Allows to connect property_fields_containerB input to the operator.

        Parameters
        ----------
        my_property_fields_containerB : PropertyFieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_pfc()
        >>> op.inputs.property_fields_containerB.connect(my_property_fields_containerB)
        >>> # or
        >>> op.inputs.property_fields_containerB(my_property_fields_containerB)
        """
        return self._property_fields_containerB

    def __getattr__(self, name):
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )


class OutputsIdenticalPfc(_Outputs):
    """Intermediate class used to get outputs from
    identical_pfc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_pfc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_boolean = op.outputs.boolean()
    >>> result_message = op.outputs.message()
    """

    def __init__(self, op: Operator):
        super().__init__(identical_pfc._spec().outputs, op)
        self._boolean = Output(identical_pfc._spec().output_pin(0), 0, op)
        self._outputs.append(self._boolean)
        self._message = Output(identical_pfc._spec().output_pin(1), 1, op)
        self._outputs.append(self._message)

    @property
    def boolean(self):
        """Allows to get boolean output of the operator

        Returns
        ----------
        my_boolean : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_pfc()
        >>> # Connect inputs : op.inputs. ...
        >>> result_boolean = op.outputs.boolean()
        """  # noqa: E501
        return self._boolean

    @property
    def message(self):
        """Allows to get message output of the operator

        Returns
        ----------
        my_message : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_pfc()
        >>> # Connect inputs : op.inputs. ...
        >>> result_message = op.outputs.message()
        """  # noqa: E501
        return self._message

    def __getattr__(self, name):
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )
