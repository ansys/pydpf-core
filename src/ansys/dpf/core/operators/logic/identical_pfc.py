"""
identical_pfc

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class identical_pfc(Operator):
    r"""Checks if two property_fields_container are identical.


    Parameters
    ----------
    property_fields_containerA: PropertyFieldsContainer
    property_fields_containerB: PropertyFieldsContainer

    Returns
    -------
    boolean: bool
        bool (true if identical...)
    message: str

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.logic.identical_pfc()

    >>> # Make input connections
    >>> my_property_fields_containerA = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_containerA.connect(my_property_fields_containerA)
    >>> my_property_fields_containerB = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_containerB.connect(my_property_fields_containerB)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.logic.identical_pfc(
    ...     property_fields_containerA=my_property_fields_containerA,
    ...     property_fields_containerB=my_property_fields_containerB,
    ... )

    >>> # Get output data
    >>> result_boolean = op.outputs.boolean()
    >>> result_message = op.outputs.message()
    """

    def __init__(
        self,
        property_fields_containerA=None,
        property_fields_containerB=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="compare::property_fields_container", config=config, server=server
        )
        self._inputs = InputsIdenticalPfc(self)
        self._outputs = OutputsIdenticalPfc(self)
        if property_fields_containerA is not None:
            self.inputs.property_fields_containerA.connect(property_fields_containerA)
        if property_fields_containerB is not None:
            self.inputs.property_fields_containerB.connect(property_fields_containerB)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Checks if two property_fields_container are identical.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="property_fields_containerA",
                    type_names=["property_fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="property_fields_containerB",
                    type_names=["property_fields_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="boolean",
                    type_names=["bool"],
                    optional=False,
                    document=r"""bool (true if identical...)""",
                ),
                1: PinSpecification(
                    name="message",
                    type_names=["string"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(
            name="compare::property_fields_container", server=server
        )

    @property
    def inputs(self) -> InputsIdenticalPfc:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsIdenticalPfc.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsIdenticalPfc:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsIdenticalPfc.
        """
        return super().outputs


class InputsIdenticalPfc(_Inputs):
    """Intermediate class used to connect user inputs to
    identical_pfc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_pfc()
    >>> my_property_fields_containerA = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_containerA.connect(my_property_fields_containerA)
    >>> my_property_fields_containerB = dpf.PropertyFieldsContainer()
    >>> op.inputs.property_fields_containerB.connect(my_property_fields_containerB)
    """

    def __init__(self, op: Operator):
        super().__init__(identical_pfc._spec().inputs, op)
        self._property_fields_containerA = Input(
            identical_pfc._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._property_fields_containerA)
        self._property_fields_containerB = Input(
            identical_pfc._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._property_fields_containerB)

    @property
    def property_fields_containerA(self) -> Input:
        r"""Allows to connect property_fields_containerA input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_pfc()
        >>> op.inputs.property_fields_containerA.connect(my_property_fields_containerA)
        >>> # or
        >>> op.inputs.property_fields_containerA(my_property_fields_containerA)
        """
        return self._property_fields_containerA

    @property
    def property_fields_containerB(self) -> Input:
        r"""Allows to connect property_fields_containerB input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_pfc()
        >>> op.inputs.property_fields_containerB.connect(my_property_fields_containerB)
        >>> # or
        >>> op.inputs.property_fields_containerB(my_property_fields_containerB)
        """
        return self._property_fields_containerB


class OutputsIdenticalPfc(_Outputs):
    """Intermediate class used to get outputs from
    identical_pfc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_pfc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_boolean = op.outputs.boolean()
    >>> result_message = op.outputs.message()
    """

    def __init__(self, op: Operator):
        super().__init__(identical_pfc._spec().outputs, op)
        self._boolean = Output(identical_pfc._spec().output_pin(0), 0, op)
        self._outputs.append(self._boolean)
        self._message = Output(identical_pfc._spec().output_pin(1), 1, op)
        self._outputs.append(self._message)

    @property
    def boolean(self) -> Output:
        r"""Allows to get boolean output of the operator

        bool (true if identical...)

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_pfc()
        >>> # Get the output from op.outputs. ...
        >>> result_boolean = op.outputs.boolean()
        """
        return self._boolean

    @property
    def message(self) -> Output:
        r"""Allows to get message output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_pfc()
        >>> # Get the output from op.outputs. ...
        >>> result_message = op.outputs.message()
        """
        return self._message
