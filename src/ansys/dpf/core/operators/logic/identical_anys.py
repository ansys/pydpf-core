"""
identical_anys

Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class identical_anys(Operator):
    """Takes two Any objects and compares them.Supported types: Field,
    FieldsContainer, Mesh, MeshesContainer, PropertyField,
    PropertyFieldsContainer, Scoping, ScopingsContainer, StringField,
    standard types (double, int, string, vector of int, doubles,
    string). Note: all inputs related to fields, mesh, and so on are
    passed to each property check.

    Parameters
    ----------
    anyA : Any
    anyB : Any
    double_value : float
        Double positive small value. smallest value
        considered during the comparison
        step. all the absolute values in the
        field less than this value are
        considered null, (default value:
        1.0e-14).
    double_tolerance : float, optional
        Double relative tolerance. maximum tolerance
        gap between two compared values.
        values within relative tolerance are
        considered identical. formula is
        (v1-v2)/v2 < relativetol. default is
        0.001.
    compare_auxiliary : bool
        For meshes and meshescontainer: compare
        auxiliary data (i.e property fields,
        scopings...). default value is
        'false'.

    Returns
    -------
    included : bool
        Bool (true if belongs...)
    message : str

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.logic.identical_anys()

    >>> # Make input connections
    >>> my_anyA = dpf.Any()
    >>> op.inputs.anyA.connect(my_anyA)
    >>> my_anyB = dpf.Any()
    >>> op.inputs.anyB.connect(my_anyB)
    >>> my_double_value = float()
    >>> op.inputs.double_value.connect(my_double_value)
    >>> my_double_tolerance = float()
    >>> op.inputs.double_tolerance.connect(my_double_tolerance)
    >>> my_compare_auxiliary = bool()
    >>> op.inputs.compare_auxiliary.connect(my_compare_auxiliary)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.logic.identical_anys(
    ...     anyA=my_anyA,
    ...     anyB=my_anyB,
    ...     double_value=my_double_value,
    ...     double_tolerance=my_double_tolerance,
    ...     compare_auxiliary=my_compare_auxiliary,
    ... )

    >>> # Get output data
    >>> result_included = op.outputs.included()
    >>> result_message = op.outputs.message()
    """

    def __init__(
        self,
        anyA=None,
        anyB=None,
        double_value=None,
        double_tolerance=None,
        compare_auxiliary=None,
        config=None,
        server=None,
    ):
        super().__init__(name="compare::any", config=config, server=server)
        self._inputs = InputsIdenticalAnys(self)
        self._outputs = OutputsIdenticalAnys(self)
        if anyA is not None:
            self.inputs.anyA.connect(anyA)
        if anyB is not None:
            self.inputs.anyB.connect(anyB)
        if double_value is not None:
            self.inputs.double_value.connect(double_value)
        if double_tolerance is not None:
            self.inputs.double_tolerance.connect(double_tolerance)
        if compare_auxiliary is not None:
            self.inputs.compare_auxiliary.connect(compare_auxiliary)

    @staticmethod
    def _spec():
        description = """Takes two Any objects and compares them.Supported types: Field,
            FieldsContainer, Mesh, MeshesContainer, PropertyField,
            PropertyFieldsContainer, Scoping, ScopingsContainer,
            StringField, standard types (double, int, string, vector
            of int, doubles, string). Note: all inputs related to
            fields, mesh, and so on are passed to each property check."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="anyA",
                    type_names=["any"],
                    optional=False,
                    document="""""",
                    aliases=[],
                ),
                1: PinSpecification(
                    name="anyB",
                    type_names=["any"],
                    optional=False,
                    document="""""",
                    aliases=[],
                ),
                2: PinSpecification(
                    name="double_value",
                    type_names=["double"],
                    optional=False,
                    document="""Double positive small value. smallest value
        considered during the comparison
        step. all the absolute values in the
        field less than this value are
        considered null, (default value:
        1.0e-14).""",
                    aliases=[],
                ),
                3: PinSpecification(
                    name="double_tolerance",
                    type_names=["double"],
                    optional=True,
                    document="""Double relative tolerance. maximum tolerance
        gap between two compared values.
        values within relative tolerance are
        considered identical. formula is
        (v1-v2)/v2 < relativetol. default is
        0.001.""",
                    aliases=[],
                ),
                4: PinSpecification(
                    name="compare_auxiliary",
                    type_names=["bool"],
                    optional=False,
                    document="""For meshes and meshescontainer: compare
        auxiliary data (i.e property fields,
        scopings...). default value is
        'false'.""",
                    aliases=[],
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="included",
                    type_names=["bool"],
                    optional=False,
                    document="""Bool (true if belongs...)""",
                    aliases=[],
                ),
                1: PinSpecification(
                    name="message",
                    type_names=["string"],
                    optional=False,
                    document="""""",
                    aliases=[],
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="compare::any", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsIdenticalAnys
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsIdenticalAnys
        """
        return super().outputs


class InputsIdenticalAnys(_Inputs):
    """Intermediate class used to connect user inputs to
    identical_anys operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_anys()
    >>> my_anyA = dpf.Any()
    >>> op.inputs.anyA.connect(my_anyA)
    >>> my_anyB = dpf.Any()
    >>> op.inputs.anyB.connect(my_anyB)
    >>> my_double_value = float()
    >>> op.inputs.double_value.connect(my_double_value)
    >>> my_double_tolerance = float()
    >>> op.inputs.double_tolerance.connect(my_double_tolerance)
    >>> my_compare_auxiliary = bool()
    >>> op.inputs.compare_auxiliary.connect(my_compare_auxiliary)
    """

    def __init__(self, op: Operator):
        super().__init__(identical_anys._spec().inputs, op)
        self._anyA = Input(identical_anys._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._anyA)
        self._anyB = Input(identical_anys._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._anyB)
        self._double_value = Input(identical_anys._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._double_value)
        self._double_tolerance = Input(identical_anys._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._double_tolerance)
        self._compare_auxiliary = Input(identical_anys._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._compare_auxiliary)

    @property
    def anyA(self):
        """Allows to connect anyA input to the operator.

        Parameters
        ----------
        my_anyA : Any

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_anys()
        >>> op.inputs.anyA.connect(my_anyA)
        >>> # or
        >>> op.inputs.anyA(my_anyA)
        """
        return self._anyA

    @property
    def anyB(self):
        """Allows to connect anyB input to the operator.

        Parameters
        ----------
        my_anyB : Any

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_anys()
        >>> op.inputs.anyB.connect(my_anyB)
        >>> # or
        >>> op.inputs.anyB(my_anyB)
        """
        return self._anyB

    @property
    def double_value(self):
        """Allows to connect double_value input to the operator.

        Double positive small value. smallest value
        considered during the comparison
        step. all the absolute values in the
        field less than this value are
        considered null, (default value:
        1.0e-14).

        Parameters
        ----------
        my_double_value : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_anys()
        >>> op.inputs.double_value.connect(my_double_value)
        >>> # or
        >>> op.inputs.double_value(my_double_value)
        """
        return self._double_value

    @property
    def double_tolerance(self):
        """Allows to connect double_tolerance input to the operator.

        Double relative tolerance. maximum tolerance
        gap between two compared values.
        values within relative tolerance are
        considered identical. formula is
        (v1-v2)/v2 < relativetol. default is
        0.001.

        Parameters
        ----------
        my_double_tolerance : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_anys()
        >>> op.inputs.double_tolerance.connect(my_double_tolerance)
        >>> # or
        >>> op.inputs.double_tolerance(my_double_tolerance)
        """
        return self._double_tolerance

    @property
    def compare_auxiliary(self):
        """Allows to connect compare_auxiliary input to the operator.

        For meshes and meshescontainer: compare
        auxiliary data (i.e property fields,
        scopings...). default value is
        'false'.

        Parameters
        ----------
        my_compare_auxiliary : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_anys()
        >>> op.inputs.compare_auxiliary.connect(my_compare_auxiliary)
        >>> # or
        >>> op.inputs.compare_auxiliary(my_compare_auxiliary)
        """
        return self._compare_auxiliary

    def __getattr__(self, name):
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )


class OutputsIdenticalAnys(_Outputs):
    """Intermediate class used to get outputs from
    identical_anys operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_anys()
    >>> # Connect inputs : op.inputs. ...
    >>> result_included = op.outputs.included()
    >>> result_message = op.outputs.message()
    """

    def __init__(self, op: Operator):
        super().__init__(identical_anys._spec().outputs, op)
        self._included = Output(identical_anys._spec().output_pin(0), 0, op)
        self._outputs.append(self._included)
        self._message = Output(identical_anys._spec().output_pin(1), 1, op)
        self._outputs.append(self._message)

    @property
    def included(self):
        """Allows to get included output of the operator

        Returns
        ----------
        my_included : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_anys()
        >>> # Connect inputs : op.inputs. ...
        >>> result_included = op.outputs.included()
        """  # noqa: E501
        return self._included

    @property
    def message(self):
        """Allows to get message output of the operator

        Returns
        ----------
        my_message : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_anys()
        >>> # Connect inputs : op.inputs. ...
        >>> result_message = op.outputs.message()
        """  # noqa: E501
        return self._message

    def __getattr__(self, name):
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )
