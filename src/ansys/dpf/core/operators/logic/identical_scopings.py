"""
identical_scopings

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class identical_scopings(Operator):
    r"""Check if two scopings are identical.


    Parameters
    ----------
    scopingA: Scoping
    scopingB: Scoping

    Returns
    -------
    boolean: bool
        bool (true if identical...)
    message: str

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.logic.identical_scopings()

    >>> # Make input connections
    >>> my_scopingA = dpf.Scoping()
    >>> op.inputs.scopingA.connect(my_scopingA)
    >>> my_scopingB = dpf.Scoping()
    >>> op.inputs.scopingB.connect(my_scopingB)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.logic.identical_scopings(
    ...     scopingA=my_scopingA,
    ...     scopingB=my_scopingB,
    ... )

    >>> # Get output data
    >>> result_boolean = op.outputs.boolean()
    >>> result_message = op.outputs.message()
    """

    def __init__(self, scopingA=None, scopingB=None, config=None, server=None):
        super().__init__(name="compare::scoping", config=config, server=server)
        self._inputs = InputsIdenticalScopings(self)
        self._outputs = OutputsIdenticalScopings(self)
        if scopingA is not None:
            self.inputs.scopingA.connect(scopingA)
        if scopingB is not None:
            self.inputs.scopingB.connect(scopingB)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Check if two scopings are identical.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="scopingA",
                    type_names=["scoping"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="scopingB",
                    type_names=["scoping"],
                    optional=False,
                    document=r"""""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="boolean",
                    type_names=["bool"],
                    optional=False,
                    document=r"""bool (true if identical...)""",
                ),
                1: PinSpecification(
                    name="message",
                    type_names=["string"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="compare::scoping", server=server)

    @property
    def inputs(self) -> InputsIdenticalScopings:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsIdenticalScopings.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsIdenticalScopings:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsIdenticalScopings.
        """
        return super().outputs


class InputsIdenticalScopings(_Inputs):
    """Intermediate class used to connect user inputs to
    identical_scopings operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_scopings()
    >>> my_scopingA = dpf.Scoping()
    >>> op.inputs.scopingA.connect(my_scopingA)
    >>> my_scopingB = dpf.Scoping()
    >>> op.inputs.scopingB.connect(my_scopingB)
    """

    def __init__(self, op: Operator):
        super().__init__(identical_scopings._spec().inputs, op)
        self._scopingA = Input(identical_scopings._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._scopingA)
        self._scopingB = Input(identical_scopings._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._scopingB)

    @property
    def scopingA(self) -> Input:
        r"""Allows to connect scopingA input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_scopings()
        >>> op.inputs.scopingA.connect(my_scopingA)
        >>> # or
        >>> op.inputs.scopingA(my_scopingA)
        """
        return self._scopingA

    @property
    def scopingB(self) -> Input:
        r"""Allows to connect scopingB input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_scopings()
        >>> op.inputs.scopingB.connect(my_scopingB)
        >>> # or
        >>> op.inputs.scopingB(my_scopingB)
        """
        return self._scopingB


class OutputsIdenticalScopings(_Outputs):
    """Intermediate class used to get outputs from
    identical_scopings operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.logic.identical_scopings()
    >>> # Connect inputs : op.inputs. ...
    >>> result_boolean = op.outputs.boolean()
    >>> result_message = op.outputs.message()
    """

    def __init__(self, op: Operator):
        super().__init__(identical_scopings._spec().outputs, op)
        self._boolean = Output(identical_scopings._spec().output_pin(0), 0, op)
        self._outputs.append(self._boolean)
        self._message = Output(identical_scopings._spec().output_pin(1), 1, op)
        self._outputs.append(self._message)

    @property
    def boolean(self) -> Output:
        r"""Allows to get boolean output of the operator

        bool (true if identical...)

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_scopings()
        >>> # Get the output from op.outputs. ...
        >>> result_boolean = op.outputs.boolean()
        """
        return self._boolean

    @property
    def message(self) -> Output:
        r"""Allows to get message output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.logic.identical_scopings()
        >>> # Get the output from op.outputs. ...
        >>> result_message = op.outputs.message()
        """
        return self._message
