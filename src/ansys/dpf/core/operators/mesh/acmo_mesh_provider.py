"""
acmo_mesh_provider

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class acmo_mesh_provider(Operator):
    r"""Converts an Assembly Mesh into a DPF Meshes container


    Parameters
    ----------
    assembly_mesh: AnsDispatchHolder or Struct Iansdispatch
    unit: str, optional

    Returns
    -------
    meshes_container: MeshesContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.mesh.acmo_mesh_provider()

    >>> # Make input connections
    >>> my_assembly_mesh = dpf.AnsDispatchHolder()
    >>> op.inputs.assembly_mesh.connect(my_assembly_mesh)
    >>> my_unit = str()
    >>> op.inputs.unit.connect(my_unit)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.mesh.acmo_mesh_provider(
    ...     assembly_mesh=my_assembly_mesh,
    ...     unit=my_unit,
    ... )

    >>> # Get output data
    >>> result_meshes_container = op.outputs.meshes_container()
    """

    def __init__(self, assembly_mesh=None, unit=None, config=None, server=None):
        super().__init__(name="acmo_mesh_provider", config=config, server=server)
        self._inputs = InputsAcmoMeshProvider(self)
        self._outputs = OutputsAcmoMeshProvider(self)
        if assembly_mesh is not None:
            self.inputs.assembly_mesh.connect(assembly_mesh)
        if unit is not None:
            self.inputs.unit.connect(unit)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Converts an Assembly Mesh into a DPF Meshes container
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="assembly_mesh",
                    type_names=["ans_dispatch_holder", "struct IAnsDispatch"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="unit",
                    type_names=["string"],
                    optional=True,
                    document=r"""""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="meshes_container",
                    type_names=["meshes_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="acmo_mesh_provider", server=server)

    @property
    def inputs(self) -> InputsAcmoMeshProvider:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsAcmoMeshProvider.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsAcmoMeshProvider:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsAcmoMeshProvider.
        """
        return super().outputs


class InputsAcmoMeshProvider(_Inputs):
    """Intermediate class used to connect user inputs to
    acmo_mesh_provider operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.acmo_mesh_provider()
    >>> my_assembly_mesh = dpf.AnsDispatchHolder()
    >>> op.inputs.assembly_mesh.connect(my_assembly_mesh)
    >>> my_unit = str()
    >>> op.inputs.unit.connect(my_unit)
    """

    def __init__(self, op: Operator):
        super().__init__(acmo_mesh_provider._spec().inputs, op)
        self._assembly_mesh = Input(acmo_mesh_provider._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._assembly_mesh)
        self._unit = Input(acmo_mesh_provider._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._unit)

    @property
    def assembly_mesh(self) -> Input:
        r"""Allows to connect assembly_mesh input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.acmo_mesh_provider()
        >>> op.inputs.assembly_mesh.connect(my_assembly_mesh)
        >>> # or
        >>> op.inputs.assembly_mesh(my_assembly_mesh)
        """
        return self._assembly_mesh

    @property
    def unit(self) -> Input:
        r"""Allows to connect unit input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.acmo_mesh_provider()
        >>> op.inputs.unit.connect(my_unit)
        >>> # or
        >>> op.inputs.unit(my_unit)
        """
        return self._unit


class OutputsAcmoMeshProvider(_Outputs):
    """Intermediate class used to get outputs from
    acmo_mesh_provider operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.acmo_mesh_provider()
    >>> # Connect inputs : op.inputs. ...
    >>> result_meshes_container = op.outputs.meshes_container()
    """

    def __init__(self, op: Operator):
        super().__init__(acmo_mesh_provider._spec().outputs, op)
        self._meshes_container = Output(acmo_mesh_provider._spec().output_pin(0), 0, op)
        self._outputs.append(self._meshes_container)

    @property
    def meshes_container(self) -> Output:
        r"""Allows to get meshes_container output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.acmo_mesh_provider()
        >>> # Get the output from op.outputs. ...
        >>> result_meshes_container = op.outputs.meshes_container()
        """
        return self._meshes_container
