"""
morphing
========
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class morphing(Operator):
    """Applies morphing on a meshed region depending on an input displacement
    field.

    Parameters
    ----------
    displacement : Field or FieldsContainer
        Expects either a field or a fields container
        with one field
    disp_mesh : MeshedRegion, optional
        Mesh on which displacement are scoped
    mesh : MeshedRegion
        Mesh to morph
    in_place : bool, optional
        Apply in place morhing (the input mesh is
        changed instead of copied) (default
        is true)
    morphing_type : int, optional
        Morphing algorithm to use (0=primerbf,
        1=bspline, 2=tetlinear, 3=tetrbf,
        4=ffi) (default is 0)
    morphing_manager_data : optional
        Morphing manager data from
        prepare_morphing_operator (needed if
        disp_coordinates not specified).


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.mesh.morphing()

    >>> # Make input connections
    >>> my_displacement = dpf.Field()
    >>> op.inputs.displacement.connect(my_displacement)
    >>> my_disp_mesh = dpf.MeshedRegion()
    >>> op.inputs.disp_mesh.connect(my_disp_mesh)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_in_place = bool()
    >>> op.inputs.in_place.connect(my_in_place)
    >>> my_morphing_type = int()
    >>> op.inputs.morphing_type.connect(my_morphing_type)
    >>> my_morphing_manager_data = dpf.()
    >>> op.inputs.morphing_manager_data.connect(my_morphing_manager_data)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.mesh.morphing(
    ...     displacement=my_displacement,
    ...     disp_mesh=my_disp_mesh,
    ...     mesh=my_mesh,
    ...     in_place=my_in_place,
    ...     morphing_type=my_morphing_type,
    ...     morphing_manager_data=my_morphing_manager_data,
    ... )

    >>> # Get output data
    >>> result_mesh = op.outputs.mesh()
    """

    def __init__(
        self,
        displacement=None,
        disp_mesh=None,
        mesh=None,
        in_place=None,
        morphing_type=None,
        morphing_manager_data=None,
        config=None,
        server=None,
    ):
        super().__init__(name="morphing", config=config, server=server)
        self._inputs = InputsMorphing(self)
        self._outputs = OutputsMorphing(self)
        if displacement is not None:
            self.inputs.displacement.connect(displacement)
        if disp_mesh is not None:
            self.inputs.disp_mesh.connect(disp_mesh)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)
        if in_place is not None:
            self.inputs.in_place.connect(in_place)
        if morphing_type is not None:
            self.inputs.morphing_type.connect(morphing_type)
        if morphing_manager_data is not None:
            self.inputs.morphing_manager_data.connect(morphing_manager_data)

    @staticmethod
    def _spec():
        description = """Applies morphing on a meshed region depending on an input displacement
            field."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="displacement",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document="""Expects either a field or a fields container
        with one field""",
                ),
                1: PinSpecification(
                    name="disp_mesh",
                    type_names=["abstract_meshed_region"],
                    optional=True,
                    document="""Mesh on which displacement are scoped""",
                ),
                2: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document="""Mesh to morph""",
                ),
                3: PinSpecification(
                    name="in_place",
                    type_names=["bool"],
                    optional=True,
                    document="""Apply in place morhing (the input mesh is
        changed instead of copied) (default
        is true)""",
                ),
                4: PinSpecification(
                    name="morphing_type",
                    type_names=["int32"],
                    optional=True,
                    document="""Morphing algorithm to use (0=primerbf,
        1=bspline, 2=tetlinear, 3=tetrbf,
        4=ffi) (default is 0)""",
                ),
                5: PinSpecification(
                    name="morphing_manager_data",
                    type_names=["any"],
                    optional=True,
                    document="""Morphing manager data from
        prepare_morphing_operator (needed if
        disp_coordinates not specified).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document="""Morphed mesh""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="morphing", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsMorphing
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsMorphing
        """
        return super().outputs


class InputsMorphing(_Inputs):
    """Intermediate class used to connect user inputs to
    morphing operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.morphing()
    >>> my_displacement = dpf.Field()
    >>> op.inputs.displacement.connect(my_displacement)
    >>> my_disp_mesh = dpf.MeshedRegion()
    >>> op.inputs.disp_mesh.connect(my_disp_mesh)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_in_place = bool()
    >>> op.inputs.in_place.connect(my_in_place)
    >>> my_morphing_type = int()
    >>> op.inputs.morphing_type.connect(my_morphing_type)
    >>> my_morphing_manager_data = dpf.()
    >>> op.inputs.morphing_manager_data.connect(my_morphing_manager_data)
    """

    def __init__(self, op: Operator):
        super().__init__(morphing._spec().inputs, op)
        self._displacement = Input(morphing._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._displacement)
        self._disp_mesh = Input(morphing._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._disp_mesh)
        self._mesh = Input(morphing._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._mesh)
        self._in_place = Input(morphing._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._in_place)
        self._morphing_type = Input(morphing._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._morphing_type)
        self._morphing_manager_data = Input(morphing._spec().input_pin(5), 5, op, -1)
        self._inputs.append(self._morphing_manager_data)

    @property
    def displacement(self):
        """Allows to connect displacement input to the operator.

        Expects either a field or a fields container
        with one field

        Parameters
        ----------
        my_displacement : Field or FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphing()
        >>> op.inputs.displacement.connect(my_displacement)
        >>> # or
        >>> op.inputs.displacement(my_displacement)
        """
        return self._displacement

    @property
    def disp_mesh(self):
        """Allows to connect disp_mesh input to the operator.

        Mesh on which displacement are scoped

        Parameters
        ----------
        my_disp_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphing()
        >>> op.inputs.disp_mesh.connect(my_disp_mesh)
        >>> # or
        >>> op.inputs.disp_mesh(my_disp_mesh)
        """
        return self._disp_mesh

    @property
    def mesh(self):
        """Allows to connect mesh input to the operator.

        Mesh to morph

        Parameters
        ----------
        my_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphing()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh

    @property
    def in_place(self):
        """Allows to connect in_place input to the operator.

        Apply in place morhing (the input mesh is
        changed instead of copied) (default
        is true)

        Parameters
        ----------
        my_in_place : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphing()
        >>> op.inputs.in_place.connect(my_in_place)
        >>> # or
        >>> op.inputs.in_place(my_in_place)
        """
        return self._in_place

    @property
    def morphing_type(self):
        """Allows to connect morphing_type input to the operator.

        Morphing algorithm to use (0=primerbf,
        1=bspline, 2=tetlinear, 3=tetrbf,
        4=ffi) (default is 0)

        Parameters
        ----------
        my_morphing_type : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphing()
        >>> op.inputs.morphing_type.connect(my_morphing_type)
        >>> # or
        >>> op.inputs.morphing_type(my_morphing_type)
        """
        return self._morphing_type

    @property
    def morphing_manager_data(self):
        """Allows to connect morphing_manager_data input to the operator.

        Morphing manager data from
        prepare_morphing_operator (needed if
        disp_coordinates not specified).

        Parameters
        ----------
        my_morphing_manager_data :

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphing()
        >>> op.inputs.morphing_manager_data.connect(my_morphing_manager_data)
        >>> # or
        >>> op.inputs.morphing_manager_data(my_morphing_manager_data)
        """
        return self._morphing_manager_data


class OutputsMorphing(_Outputs):
    """Intermediate class used to get outputs from
    morphing operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.morphing()
    >>> # Connect inputs : op.inputs. ...
    >>> result_mesh = op.outputs.mesh()
    """

    def __init__(self, op: Operator):
        super().__init__(morphing._spec().outputs, op)
        self._mesh = Output(morphing._spec().output_pin(0), 0, op)
        self._outputs.append(self._mesh)

    @property
    def mesh(self):
        """Allows to get mesh output of the operator

        Returns
        ----------
        my_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphing()
        >>> # Connect inputs : op.inputs. ...
        >>> result_mesh = op.outputs.mesh()
        """  # noqa: E501
        return self._mesh
