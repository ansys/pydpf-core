"""
iso_surfaces
============
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class iso_surfaces(Operator):
    """Extract multiple iso-contours from mesh_cut operator and set it into a
    meshes container. If pin 1 is provided, 'num_surfaces' iso-
    contours will be computed, ranging from 'min_value' to 'max_value'
    linearly. If pin 4 is provided, the iso-values are the one set by
    the user. The iso-values are stored into a FieldsContainer.

    Parameters
    ----------
    field : Field
        Field containing the values for the iso-
        surface computation. the mesh can be
        retrieved from this field's support
        or through pin 2.
    num_surfaces : int, optional
        If provided, iso_values are linearly computed
        between the min and the max of the
        field of results. if not, iso_values
        must be provided by the user through
        pin 4
    mesh : MeshedRegion, optional
        Mesh to compute the iso-surface from. used
        when not given through the support of
        the field in pin 0.
    slice_surfaces : bool
        True: slicing will also take into account
        shell and skin elements. false:
        slicing will ignore shell and skin
        elements. the default is true.
    vector_iso_values : optional
        If provided, user defined iso_values to
        compute. if not provided, iso_values
        are linearly compute between the min
        and the max of the field of results.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.mesh.iso_surfaces()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_num_surfaces = int()
    >>> op.inputs.num_surfaces.connect(my_num_surfaces)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_slice_surfaces = bool()
    >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)
    >>> my_vector_iso_values = dpf.()
    >>> op.inputs.vector_iso_values.connect(my_vector_iso_values)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.mesh.iso_surfaces(
    ...     field=my_field,
    ...     num_surfaces=my_num_surfaces,
    ...     mesh=my_mesh,
    ...     slice_surfaces=my_slice_surfaces,
    ...     vector_iso_values=my_vector_iso_values,
    ... )

    >>> # Get output data
    >>> result_meshes = op.outputs.meshes()
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        field=None,
        num_surfaces=None,
        mesh=None,
        slice_surfaces=None,
        vector_iso_values=None,
        config=None,
        server=None,
    ):
        super().__init__(name="iso_surfaces", config=config, server=server)
        self._inputs = InputsIsoSurfaces(self)
        self._outputs = OutputsIsoSurfaces(self)
        if field is not None:
            self.inputs.field.connect(field)
        if num_surfaces is not None:
            self.inputs.num_surfaces.connect(num_surfaces)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)
        if slice_surfaces is not None:
            self.inputs.slice_surfaces.connect(slice_surfaces)
        if vector_iso_values is not None:
            self.inputs.vector_iso_values.connect(vector_iso_values)

    @staticmethod
    def _spec():
        description = """Extract multiple iso-contours from mesh_cut operator and set it into a
            meshes container. If pin 1 is provided, &quot;num_surfaces&quot;
            iso-contours will be computed, ranging from &quot;min_value&quot; to
            &quot;max_value&quot; linearly. If pin 4 is provided, the iso-values
            are the one set by the user. The iso-values are stored
            into a FieldsContainer."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""Field containing the values for the iso-
        surface computation. the mesh can be
        retrieved from this field's support
        or through pin 2.""",
                ),
                1: PinSpecification(
                    name="num_surfaces",
                    type_names=["int32"],
                    optional=True,
                    document="""If provided, iso_values are linearly computed
        between the min and the max of the
        field of results. if not, iso_values
        must be provided by the user through
        pin 4""",
                ),
                2: PinSpecification(
                    name="mesh",
                    type_names=["meshed_region"],
                    optional=True,
                    document="""Mesh to compute the iso-surface from. used
        when not given through the support of
        the field in pin 0.""",
                ),
                3: PinSpecification(
                    name="slice_surfaces",
                    type_names=["bool"],
                    optional=False,
                    document="""True: slicing will also take into account
        shell and skin elements. false:
        slicing will ignore shell and skin
        elements. the default is true.""",
                ),
                4: PinSpecification(
                    name="vector_iso_values",
                    type_names=["vector<double>"],
                    optional=True,
                    document="""If provided, user defined iso_values to
        compute. if not provided, iso_values
        are linearly compute between the min
        and the max of the field of results.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="meshes",
                    type_names=["meshes_container"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="iso_surfaces", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsIsoSurfaces
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsIsoSurfaces
        """
        return super().outputs


class InputsIsoSurfaces(_Inputs):
    """Intermediate class used to connect user inputs to
    iso_surfaces operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.iso_surfaces()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_num_surfaces = int()
    >>> op.inputs.num_surfaces.connect(my_num_surfaces)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    >>> my_slice_surfaces = bool()
    >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)
    >>> my_vector_iso_values = dpf.()
    >>> op.inputs.vector_iso_values.connect(my_vector_iso_values)
    """

    def __init__(self, op: Operator):
        super().__init__(iso_surfaces._spec().inputs, op)
        self._field = Input(iso_surfaces._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._num_surfaces = Input(iso_surfaces._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._num_surfaces)
        self._mesh = Input(iso_surfaces._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._mesh)
        self._slice_surfaces = Input(iso_surfaces._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._slice_surfaces)
        self._vector_iso_values = Input(iso_surfaces._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._vector_iso_values)

    @property
    def field(self):
        """Allows to connect field input to the operator.

        Field containing the values for the iso-
        surface computation. the mesh can be
        retrieved from this field's support
        or through pin 2.

        Parameters
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.iso_surfaces()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def num_surfaces(self):
        """Allows to connect num_surfaces input to the operator.

        If provided, iso_values are linearly computed
        between the min and the max of the
        field of results. if not, iso_values
        must be provided by the user through
        pin 4

        Parameters
        ----------
        my_num_surfaces : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.iso_surfaces()
        >>> op.inputs.num_surfaces.connect(my_num_surfaces)
        >>> # or
        >>> op.inputs.num_surfaces(my_num_surfaces)
        """
        return self._num_surfaces

    @property
    def mesh(self):
        """Allows to connect mesh input to the operator.

        Mesh to compute the iso-surface from. used
        when not given through the support of
        the field in pin 0.

        Parameters
        ----------
        my_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.iso_surfaces()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh

    @property
    def slice_surfaces(self):
        """Allows to connect slice_surfaces input to the operator.

        True: slicing will also take into account
        shell and skin elements. false:
        slicing will ignore shell and skin
        elements. the default is true.

        Parameters
        ----------
        my_slice_surfaces : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.iso_surfaces()
        >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)
        >>> # or
        >>> op.inputs.slice_surfaces(my_slice_surfaces)
        """
        return self._slice_surfaces

    @property
    def vector_iso_values(self):
        """Allows to connect vector_iso_values input to the operator.

        If provided, user defined iso_values to
        compute. if not provided, iso_values
        are linearly compute between the min
        and the max of the field of results.

        Parameters
        ----------
        my_vector_iso_values :

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.iso_surfaces()
        >>> op.inputs.vector_iso_values.connect(my_vector_iso_values)
        >>> # or
        >>> op.inputs.vector_iso_values(my_vector_iso_values)
        """
        return self._vector_iso_values


class OutputsIsoSurfaces(_Outputs):
    """Intermediate class used to get outputs from
    iso_surfaces operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.iso_surfaces()
    >>> # Connect inputs : op.inputs. ...
    >>> result_meshes = op.outputs.meshes()
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(iso_surfaces._spec().outputs, op)
        self._meshes = Output(iso_surfaces._spec().output_pin(0), 0, op)
        self._outputs.append(self._meshes)
        self._fields_container = Output(iso_surfaces._spec().output_pin(1), 1, op)
        self._outputs.append(self._fields_container)

    @property
    def meshes(self):
        """Allows to get meshes output of the operator

        Returns
        ----------
        my_meshes : MeshesContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.iso_surfaces()
        >>> # Connect inputs : op.inputs. ...
        >>> result_meshes = op.outputs.meshes()
        """  # noqa: E501
        return self._meshes

    @property
    def fields_container(self):
        """Allows to get fields_container output of the operator

        Returns
        ----------
        my_fields_container : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.iso_surfaces()
        >>> # Connect inputs : op.inputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """  # noqa: E501
        return self._fields_container
