"""
morphed_field
=============
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class morphed_field(Operator):
    """Computes the displacement to apply on input coordinates (in 2) if a
    morphing field (in 0) is applied on coordinates (in 1)

    Parameters
    ----------
    displacement : Field or FieldsContainer
        Expects either a field or a fields container
        with one field
    disp_coordinates : MeshedRegion, optional
        Coordinates on which the displacement field
        are applied
    coordinates : Field or MeshedRegion
        Coordinates to evaluate
    morphing_type : int, optional
        Morphing algorithm to use (0=primerbf,
        1=bspline, 2=tetlinear, 3=tetrbf,
        4=ffi) (default is 0)
    morphing_manager_data : optional
        Morphing manager data from
        prepare_morphing_operator (needed if
        disp_coordinates not specified).


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.mesh.morphed_field()

    >>> # Make input connections
    >>> my_displacement = dpf.Field()
    >>> op.inputs.displacement.connect(my_displacement)
    >>> my_disp_coordinates = dpf.MeshedRegion()
    >>> op.inputs.disp_coordinates.connect(my_disp_coordinates)
    >>> my_coordinates = dpf.Field()
    >>> op.inputs.coordinates.connect(my_coordinates)
    >>> my_morphing_type = int()
    >>> op.inputs.morphing_type.connect(my_morphing_type)
    >>> my_morphing_manager_data = dpf.()
    >>> op.inputs.morphing_manager_data.connect(my_morphing_manager_data)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.mesh.morphed_field(
    ...     displacement=my_displacement,
    ...     disp_coordinates=my_disp_coordinates,
    ...     coordinates=my_coordinates,
    ...     morphing_type=my_morphing_type,
    ...     morphing_manager_data=my_morphing_manager_data,
    ... )

    >>> # Get output data
    >>> result_coordinates_displacement = op.outputs.coordinates_displacement()
    """

    def __init__(
        self,
        displacement=None,
        disp_coordinates=None,
        coordinates=None,
        morphing_type=None,
        morphing_manager_data=None,
        config=None,
        server=None,
    ):
        super().__init__(name="morphed_field", config=config, server=server)
        self._inputs = InputsMorphedField(self)
        self._outputs = OutputsMorphedField(self)
        if displacement is not None:
            self.inputs.displacement.connect(displacement)
        if disp_coordinates is not None:
            self.inputs.disp_coordinates.connect(disp_coordinates)
        if coordinates is not None:
            self.inputs.coordinates.connect(coordinates)
        if morphing_type is not None:
            self.inputs.morphing_type.connect(morphing_type)
        if morphing_manager_data is not None:
            self.inputs.morphing_manager_data.connect(morphing_manager_data)

    @staticmethod
    def _spec():
        description = """Computes the displacement to apply on input coordinates (in 2) if a
            morphing field (in 0) is applied on coordinates (in 1)"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="displacement",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document="""Expects either a field or a fields container
        with one field""",
                ),
                1: PinSpecification(
                    name="disp_coordinates",
                    type_names=["abstract_meshed_region"],
                    optional=True,
                    document="""Coordinates on which the displacement field
        are applied""",
                ),
                2: PinSpecification(
                    name="coordinates",
                    type_names=["field", "abstract_meshed_region"],
                    optional=False,
                    document="""Coordinates to evaluate""",
                ),
                4: PinSpecification(
                    name="morphing_type",
                    type_names=["int32"],
                    optional=True,
                    document="""Morphing algorithm to use (0=primerbf,
        1=bspline, 2=tetlinear, 3=tetrbf,
        4=ffi) (default is 0)""",
                ),
                5: PinSpecification(
                    name="morphing_manager_data",
                    type_names=["any"],
                    optional=True,
                    document="""Morphing manager data from
        prepare_morphing_operator (needed if
        disp_coordinates not specified).""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="coordinates_displacement",
                    type_names=["field"],
                    optional=False,
                    document="""Displacement of each point of the input
        coordinates""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="morphed_field", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsMorphedField
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsMorphedField
        """
        return super().outputs


class InputsMorphedField(_Inputs):
    """Intermediate class used to connect user inputs to
    morphed_field operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.morphed_field()
    >>> my_displacement = dpf.Field()
    >>> op.inputs.displacement.connect(my_displacement)
    >>> my_disp_coordinates = dpf.MeshedRegion()
    >>> op.inputs.disp_coordinates.connect(my_disp_coordinates)
    >>> my_coordinates = dpf.Field()
    >>> op.inputs.coordinates.connect(my_coordinates)
    >>> my_morphing_type = int()
    >>> op.inputs.morphing_type.connect(my_morphing_type)
    >>> my_morphing_manager_data = dpf.()
    >>> op.inputs.morphing_manager_data.connect(my_morphing_manager_data)
    """

    def __init__(self, op: Operator):
        super().__init__(morphed_field._spec().inputs, op)
        self._displacement = Input(morphed_field._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._displacement)
        self._disp_coordinates = Input(morphed_field._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._disp_coordinates)
        self._coordinates = Input(morphed_field._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._coordinates)
        self._morphing_type = Input(morphed_field._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._morphing_type)
        self._morphing_manager_data = Input(
            morphed_field._spec().input_pin(5), 5, op, -1
        )
        self._inputs.append(self._morphing_manager_data)

    @property
    def displacement(self):
        """Allows to connect displacement input to the operator.

        Expects either a field or a fields container
        with one field

        Parameters
        ----------
        my_displacement : Field or FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphed_field()
        >>> op.inputs.displacement.connect(my_displacement)
        >>> # or
        >>> op.inputs.displacement(my_displacement)
        """
        return self._displacement

    @property
    def disp_coordinates(self):
        """Allows to connect disp_coordinates input to the operator.

        Coordinates on which the displacement field
        are applied

        Parameters
        ----------
        my_disp_coordinates : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphed_field()
        >>> op.inputs.disp_coordinates.connect(my_disp_coordinates)
        >>> # or
        >>> op.inputs.disp_coordinates(my_disp_coordinates)
        """
        return self._disp_coordinates

    @property
    def coordinates(self):
        """Allows to connect coordinates input to the operator.

        Coordinates to evaluate

        Parameters
        ----------
        my_coordinates : Field or MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphed_field()
        >>> op.inputs.coordinates.connect(my_coordinates)
        >>> # or
        >>> op.inputs.coordinates(my_coordinates)
        """
        return self._coordinates

    @property
    def morphing_type(self):
        """Allows to connect morphing_type input to the operator.

        Morphing algorithm to use (0=primerbf,
        1=bspline, 2=tetlinear, 3=tetrbf,
        4=ffi) (default is 0)

        Parameters
        ----------
        my_morphing_type : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphed_field()
        >>> op.inputs.morphing_type.connect(my_morphing_type)
        >>> # or
        >>> op.inputs.morphing_type(my_morphing_type)
        """
        return self._morphing_type

    @property
    def morphing_manager_data(self):
        """Allows to connect morphing_manager_data input to the operator.

        Morphing manager data from
        prepare_morphing_operator (needed if
        disp_coordinates not specified).

        Parameters
        ----------
        my_morphing_manager_data :

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphed_field()
        >>> op.inputs.morphing_manager_data.connect(my_morphing_manager_data)
        >>> # or
        >>> op.inputs.morphing_manager_data(my_morphing_manager_data)
        """
        return self._morphing_manager_data


class OutputsMorphedField(_Outputs):
    """Intermediate class used to get outputs from
    morphed_field operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.morphed_field()
    >>> # Connect inputs : op.inputs. ...
    >>> result_coordinates_displacement = op.outputs.coordinates_displacement()
    """

    def __init__(self, op: Operator):
        super().__init__(morphed_field._spec().outputs, op)
        self._coordinates_displacement = Output(
            morphed_field._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._coordinates_displacement)

    @property
    def coordinates_displacement(self):
        """Allows to get coordinates_displacement output of the operator

        Returns
        ----------
        my_coordinates_displacement : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.morphed_field()
        >>> # Connect inputs : op.inputs. ...
        >>> result_coordinates_displacement = op.outputs.coordinates_displacement()
        """  # noqa: E501
        return self._coordinates_displacement
