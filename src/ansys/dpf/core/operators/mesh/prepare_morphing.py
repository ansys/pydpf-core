"""
prepare_morphing
================
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class prepare_morphing(Operator):
    """Prepare morphing on a meshed region depending on an input displacement
    field.

    Parameters
    ----------
    displacement_scoping : Scoping or ScopingsContainer
        Expects either a scoping or a scopings
        container with one field
    disp_mesh : MeshedRegion
        Mesh on which displacement are scoped
    mesh : MeshedRegion
        Mesh to morph


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.mesh.prepare_morphing()

    >>> # Make input connections
    >>> my_displacement_scoping = dpf.Scoping()
    >>> op.inputs.displacement_scoping.connect(my_displacement_scoping)
    >>> my_disp_mesh = dpf.MeshedRegion()
    >>> op.inputs.disp_mesh.connect(my_disp_mesh)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.mesh.prepare_morphing(
    ...     displacement_scoping=my_displacement_scoping,
    ...     disp_mesh=my_disp_mesh,
    ...     mesh=my_mesh,
    ... )

    >>> # Get output data
    >>> result_morphing_manager_data = op.outputs.morphing_manager_data()
    """

    def __init__(
        self,
        displacement_scoping=None,
        disp_mesh=None,
        mesh=None,
        config=None,
        server=None,
    ):
        super().__init__(name="prepare_morphing", config=config, server=server)
        self._inputs = InputsPrepareMorphing(self)
        self._outputs = OutputsPrepareMorphing(self)
        if displacement_scoping is not None:
            self.inputs.displacement_scoping.connect(displacement_scoping)
        if disp_mesh is not None:
            self.inputs.disp_mesh.connect(disp_mesh)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)

    @staticmethod
    def _spec():
        description = """Prepare morphing on a meshed region depending on an input displacement
            field."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="displacement_scoping",
                    type_names=["scoping", "scopings_container"],
                    optional=False,
                    document="""Expects either a scoping or a scopings
        container with one field""",
                ),
                1: PinSpecification(
                    name="disp_mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document="""Mesh on which displacement are scoped""",
                ),
                2: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document="""Mesh to morph""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="morphing_manager_data",
                    optional=False,
                    document="""Morphing manager data (can be used as input
        of morphed_field or morphing
        operators.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="prepare_morphing", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsPrepareMorphing
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsPrepareMorphing
        """
        return super().outputs


class InputsPrepareMorphing(_Inputs):
    """Intermediate class used to connect user inputs to
    prepare_morphing operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.prepare_morphing()
    >>> my_displacement_scoping = dpf.Scoping()
    >>> op.inputs.displacement_scoping.connect(my_displacement_scoping)
    >>> my_disp_mesh = dpf.MeshedRegion()
    >>> op.inputs.disp_mesh.connect(my_disp_mesh)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    """

    def __init__(self, op: Operator):
        super().__init__(prepare_morphing._spec().inputs, op)
        self._displacement_scoping = Input(
            prepare_morphing._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._displacement_scoping)
        self._disp_mesh = Input(prepare_morphing._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._disp_mesh)
        self._mesh = Input(prepare_morphing._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._mesh)

    @property
    def displacement_scoping(self):
        """Allows to connect displacement_scoping input to the operator.

        Expects either a scoping or a scopings
        container with one field

        Parameters
        ----------
        my_displacement_scoping : Scoping or ScopingsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.prepare_morphing()
        >>> op.inputs.displacement_scoping.connect(my_displacement_scoping)
        >>> # or
        >>> op.inputs.displacement_scoping(my_displacement_scoping)
        """
        return self._displacement_scoping

    @property
    def disp_mesh(self):
        """Allows to connect disp_mesh input to the operator.

        Mesh on which displacement are scoped

        Parameters
        ----------
        my_disp_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.prepare_morphing()
        >>> op.inputs.disp_mesh.connect(my_disp_mesh)
        >>> # or
        >>> op.inputs.disp_mesh(my_disp_mesh)
        """
        return self._disp_mesh

    @property
    def mesh(self):
        """Allows to connect mesh input to the operator.

        Mesh to morph

        Parameters
        ----------
        my_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.prepare_morphing()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh


class OutputsPrepareMorphing(_Outputs):
    """Intermediate class used to get outputs from
    prepare_morphing operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.mesh.prepare_morphing()
    >>> # Connect inputs : op.inputs. ...
    >>> result_morphing_manager_data = op.outputs.morphing_manager_data()
    """

    def __init__(self, op: Operator):
        super().__init__(prepare_morphing._spec().outputs, op)
        self._morphing_manager_data = Output(
            prepare_morphing._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._morphing_manager_data)

    @property
    def morphing_manager_data(self):
        """Allows to get morphing_manager_data output of the operator

        Returns
        ----------
        my_morphing_manager_data :

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.mesh.prepare_morphing()
        >>> # Connect inputs : op.inputs. ...
        >>> result_morphing_manager_data = op.outputs.morphing_manager_data()
        """  # noqa: E501
        return self._morphing_manager_data
