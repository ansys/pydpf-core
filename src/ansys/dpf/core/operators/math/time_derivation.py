"""
time_derivation
===============
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class time_derivation(Operator):
    """Derives a field of time varying quantities with respect to time

    Parameters
    ----------
    field : Field
        Field
    spline_fitting : bool, optional
        Uses spline fitting on the input field to
        compute smooth derivatives

    Returns
    -------
    field : Field

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.time_derivation()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_spline_fitting = bool()
    >>> op.inputs.spline_fitting.connect(my_spline_fitting)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.time_derivation(
    ...     field=my_field,
    ...     spline_fitting=my_spline_fitting,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(self, field=None, spline_fitting=None, config=None, server=None):
        super().__init__(name="TimeDerivation", config=config, server=server)
        self._inputs = InputsTimeDerivation(self)
        self._outputs = OutputsTimeDerivation(self)
        if field is not None:
            self.inputs.field.connect(field)
        if spline_fitting is not None:
            self.inputs.spline_fitting.connect(spline_fitting)

    @staticmethod
    def _spec():
        description = (
            """Derives a field of time varying quantities with respect to time"""
        )
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""Field""",
                ),
                1: PinSpecification(
                    name="spline_fitting",
                    type_names=["bool"],
                    optional=True,
                    document="""Uses spline fitting on the input field to
        compute smooth derivatives""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="TimeDerivation", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsTimeDerivation
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsTimeDerivation
        """
        return super().outputs


class InputsTimeDerivation(_Inputs):
    """Intermediate class used to connect user inputs to
    time_derivation operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.time_derivation()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_spline_fitting = bool()
    >>> op.inputs.spline_fitting.connect(my_spline_fitting)
    """

    def __init__(self, op: Operator):
        super().__init__(time_derivation._spec().inputs, op)
        self._field = Input(time_derivation._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._spline_fitting = Input(time_derivation._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._spline_fitting)

    @property
    def field(self):
        """Allows to connect field input to the operator.

        Field

        Parameters
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_derivation()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def spline_fitting(self):
        """Allows to connect spline_fitting input to the operator.

        Uses spline fitting on the input field to
        compute smooth derivatives

        Parameters
        ----------
        my_spline_fitting : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_derivation()
        >>> op.inputs.spline_fitting.connect(my_spline_fitting)
        >>> # or
        >>> op.inputs.spline_fitting(my_spline_fitting)
        """
        return self._spline_fitting


class OutputsTimeDerivation(_Outputs):
    """Intermediate class used to get outputs from
    time_derivation operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.time_derivation()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(time_derivation._spec().outputs, op)
        self._field = Output(time_derivation._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)

    @property
    def field(self):
        """Allows to get field output of the operator

        Returns
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_derivation()
        >>> # Connect inputs : op.inputs. ...
        >>> result_field = op.outputs.field()
        """  # noqa: E501
        return self._field
