"""
time_integration
================
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class time_integration(Operator):
    """Integrates a field of time varying quantities over time

    Parameters
    ----------
    field : Field
        Field
    resample_output : bool, optional
        Resample the output
    absolute_error : float, optional
        Absolute error for the resampling
    minimum_step_size : float, optional
        Minimum time step size for the resamplig
    integration_constant : float, optional
        Constant to be added to the integrated field

    Returns
    -------
    field : Field

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.time_integration()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_resample_output = bool()
    >>> op.inputs.resample_output.connect(my_resample_output)
    >>> my_absolute_error = float()
    >>> op.inputs.absolute_error.connect(my_absolute_error)
    >>> my_minimum_step_size = float()
    >>> op.inputs.minimum_step_size.connect(my_minimum_step_size)
    >>> my_integration_constant = float()
    >>> op.inputs.integration_constant.connect(my_integration_constant)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.time_integration(
    ...     field=my_field,
    ...     resample_output=my_resample_output,
    ...     absolute_error=my_absolute_error,
    ...     minimum_step_size=my_minimum_step_size,
    ...     integration_constant=my_integration_constant,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self,
        field=None,
        resample_output=None,
        absolute_error=None,
        minimum_step_size=None,
        integration_constant=None,
        config=None,
        server=None,
    ):
        super().__init__(name="TimeIntegration", config=config, server=server)
        self._inputs = InputsTimeIntegration(self)
        self._outputs = OutputsTimeIntegration(self)
        if field is not None:
            self.inputs.field.connect(field)
        if resample_output is not None:
            self.inputs.resample_output.connect(resample_output)
        if absolute_error is not None:
            self.inputs.absolute_error.connect(absolute_error)
        if minimum_step_size is not None:
            self.inputs.minimum_step_size.connect(minimum_step_size)
        if integration_constant is not None:
            self.inputs.integration_constant.connect(integration_constant)

    @staticmethod
    def _spec():
        description = """Integrates a field of time varying quantities over time"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""Field""",
                ),
                1: PinSpecification(
                    name="resample_output",
                    type_names=["bool"],
                    optional=True,
                    document="""Resample the output""",
                ),
                2: PinSpecification(
                    name="absolute_error",
                    type_names=["double"],
                    optional=True,
                    document="""Absolute error for the resampling""",
                ),
                3: PinSpecification(
                    name="minimum_step_size",
                    type_names=["double"],
                    optional=True,
                    document="""Minimum time step size for the resamplig""",
                ),
                4: PinSpecification(
                    name="integration_constant",
                    type_names=["double"],
                    optional=True,
                    document="""Constant to be added to the integrated field""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="TimeIntegration", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsTimeIntegration
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsTimeIntegration
        """
        return super().outputs


class InputsTimeIntegration(_Inputs):
    """Intermediate class used to connect user inputs to
    time_integration operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.time_integration()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_resample_output = bool()
    >>> op.inputs.resample_output.connect(my_resample_output)
    >>> my_absolute_error = float()
    >>> op.inputs.absolute_error.connect(my_absolute_error)
    >>> my_minimum_step_size = float()
    >>> op.inputs.minimum_step_size.connect(my_minimum_step_size)
    >>> my_integration_constant = float()
    >>> op.inputs.integration_constant.connect(my_integration_constant)
    """

    def __init__(self, op: Operator):
        super().__init__(time_integration._spec().inputs, op)
        self._field = Input(time_integration._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._resample_output = Input(time_integration._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._resample_output)
        self._absolute_error = Input(time_integration._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._absolute_error)
        self._minimum_step_size = Input(
            time_integration._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._minimum_step_size)
        self._integration_constant = Input(
            time_integration._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._integration_constant)

    @property
    def field(self):
        """Allows to connect field input to the operator.

        Field

        Parameters
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_integration()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def resample_output(self):
        """Allows to connect resample_output input to the operator.

        Resample the output

        Parameters
        ----------
        my_resample_output : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_integration()
        >>> op.inputs.resample_output.connect(my_resample_output)
        >>> # or
        >>> op.inputs.resample_output(my_resample_output)
        """
        return self._resample_output

    @property
    def absolute_error(self):
        """Allows to connect absolute_error input to the operator.

        Absolute error for the resampling

        Parameters
        ----------
        my_absolute_error : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_integration()
        >>> op.inputs.absolute_error.connect(my_absolute_error)
        >>> # or
        >>> op.inputs.absolute_error(my_absolute_error)
        """
        return self._absolute_error

    @property
    def minimum_step_size(self):
        """Allows to connect minimum_step_size input to the operator.

        Minimum time step size for the resamplig

        Parameters
        ----------
        my_minimum_step_size : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_integration()
        >>> op.inputs.minimum_step_size.connect(my_minimum_step_size)
        >>> # or
        >>> op.inputs.minimum_step_size(my_minimum_step_size)
        """
        return self._minimum_step_size

    @property
    def integration_constant(self):
        """Allows to connect integration_constant input to the operator.

        Constant to be added to the integrated field

        Parameters
        ----------
        my_integration_constant : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_integration()
        >>> op.inputs.integration_constant.connect(my_integration_constant)
        >>> # or
        >>> op.inputs.integration_constant(my_integration_constant)
        """
        return self._integration_constant


class OutputsTimeIntegration(_Outputs):
    """Intermediate class used to get outputs from
    time_integration operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.time_integration()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(time_integration._spec().outputs, op)
        self._field = Output(time_integration._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)

    @property
    def field(self):
        """Allows to get field output of the operator

        Returns
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.time_integration()
        >>> # Connect inputs : op.inputs. ...
        >>> result_field = op.outputs.field()
        """  # noqa: E501
        return self._field
