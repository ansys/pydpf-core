"""
accumulate

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class accumulate(Operator):
    r"""Sums all the elementary data of a field to produce one elementary data
    point.


    Parameters
    ----------
    fieldA: Field or FieldsContainer
        field or fields container with only one field is expected
    weights: Field, optional
        Field containing weights, one weight per entity
    time_scoping: Scoping, optional
        time_scoping

    Returns
    -------
    field: Field
        Field containing the (weighted) sum for each component in an elementary data

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.accumulate()

    >>> # Make input connections
    >>> my_fieldA = dpf.Field()
    >>> op.inputs.fieldA.connect(my_fieldA)
    >>> my_weights = dpf.Field()
    >>> op.inputs.weights.connect(my_weights)
    >>> my_time_scoping = dpf.Scoping()
    >>> op.inputs.time_scoping.connect(my_time_scoping)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.accumulate(
    ...     fieldA=my_fieldA,
    ...     weights=my_weights,
    ...     time_scoping=my_time_scoping,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self,
        fieldA=None,
        weights=None,
        time_scoping=None,
        config=None,
        server=None,
        ponderation=None,
    ):
        super().__init__(name="accumulate", config=config, server=server)
        self._inputs = InputsAccumulate(self)
        self._outputs = OutputsAccumulate(self)
        if fieldA is not None:
            self.inputs.fieldA.connect(fieldA)
        if weights is not None:
            self.inputs.weights.connect(weights)
        elif ponderation is not None:
            warn(
                DeprecationWarning(
                    f'Operator accumulate: Input name "ponderation" is deprecated in favor of "weights".'
                )
            )
            self.inputs.weights.connect(ponderation)
        if time_scoping is not None:
            self.inputs.time_scoping.connect(time_scoping)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Sums all the elementary data of a field to produce one elementary data
point.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fieldA",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document=r"""field or fields container with only one field is expected""",
                ),
                1: PinSpecification(
                    name="weights",
                    type_names=["field"],
                    optional=True,
                    document=r"""Field containing weights, one weight per entity""",
                    aliases=["ponderation"],
                ),
                2: PinSpecification(
                    name="time_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document=r"""time_scoping""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document=r"""Field containing the (weighted) sum for each component in an elementary data""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="accumulate", server=server)

    @property
    def inputs(self) -> InputsAccumulate:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsAccumulate.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsAccumulate:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsAccumulate.
        """
        return super().outputs


class InputsAccumulate(_Inputs):
    """Intermediate class used to connect user inputs to
    accumulate operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.accumulate()
    >>> my_fieldA = dpf.Field()
    >>> op.inputs.fieldA.connect(my_fieldA)
    >>> my_weights = dpf.Field()
    >>> op.inputs.weights.connect(my_weights)
    >>> my_time_scoping = dpf.Scoping()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    """

    def __init__(self, op: Operator):
        super().__init__(accumulate._spec().inputs, op)
        self._fieldA = Input(accumulate._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._fieldA)
        self._weights = Input(accumulate._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._weights)
        self._time_scoping = Input(accumulate._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._time_scoping)

    @property
    def fieldA(self) -> Input:
        r"""Allows to connect fieldA input to the operator.

        field or fields container with only one field is expected

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.accumulate()
        >>> op.inputs.fieldA.connect(my_fieldA)
        >>> # or
        >>> op.inputs.fieldA(my_fieldA)
        """
        return self._fieldA

    @property
    def weights(self) -> Input:
        r"""Allows to connect weights input to the operator.

        Field containing weights, one weight per entity

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.accumulate()
        >>> op.inputs.weights.connect(my_weights)
        >>> # or
        >>> op.inputs.weights(my_weights)
        """
        return self._weights

    @property
    def time_scoping(self) -> Input:
        r"""Allows to connect time_scoping input to the operator.

        time_scoping

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.accumulate()
        >>> op.inputs.time_scoping.connect(my_time_scoping)
        >>> # or
        >>> op.inputs.time_scoping(my_time_scoping)
        """
        return self._time_scoping

    def __getattr__(self, name):
        if name in ["ponderation"]:
            warn(
                DeprecationWarning(
                    f'Operator accumulate: Input name "{name}" is deprecated in favor of "weights".'
                )
            )
            return self.weights
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )


class OutputsAccumulate(_Outputs):
    """Intermediate class used to get outputs from
    accumulate operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.accumulate()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(accumulate._spec().outputs, op)
        self._field = Output(accumulate._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)

    @property
    def field(self) -> Output:
        r"""Allows to get field output of the operator

        Field containing the (weighted) sum for each component in an elementary data

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.accumulate()
        >>> # Get the output from op.outputs. ...
        >>> result_field = op.outputs.field()
        """
        return self._field
