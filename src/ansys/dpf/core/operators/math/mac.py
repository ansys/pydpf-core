"""
mac

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class mac(Operator):
    r"""Computes MAC Matrix between two fields container, both for real and
    complex cases. For mixed cases (real-complex and complex) only the real
    part is considered. Providing inputs with the same component scoping is
    an user responsability.


    Parameters
    ----------
    fields_containerA: FieldsContainer
        Fields Container A.
    fields_containerB: FieldsContainer
        Fields Container B.
    weights: Field
        Field M, optional weighting for MAC Matrix computation.

    Returns
    -------
    field: Field
        MAC Matrix for all the combinations between mode fields of Field Container A and Field Container B. Results listed row by row.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.mac()

    >>> # Make input connections
    >>> my_fields_containerA = dpf.FieldsContainer()
    >>> op.inputs.fields_containerA.connect(my_fields_containerA)
    >>> my_fields_containerB = dpf.FieldsContainer()
    >>> op.inputs.fields_containerB.connect(my_fields_containerB)
    >>> my_weights = dpf.Field()
    >>> op.inputs.weights.connect(my_weights)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.mac(
    ...     fields_containerA=my_fields_containerA,
    ...     fields_containerB=my_fields_containerB,
    ...     weights=my_weights,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self,
        fields_containerA=None,
        fields_containerB=None,
        weights=None,
        config=None,
        server=None,
        ponderation=None,
    ):
        super().__init__(name="mac", config=config, server=server)
        self._inputs = InputsMac(self)
        self._outputs = OutputsMac(self)
        if fields_containerA is not None:
            self.inputs.fields_containerA.connect(fields_containerA)
        if fields_containerB is not None:
            self.inputs.fields_containerB.connect(fields_containerB)
        if weights is not None:
            self.inputs.weights.connect(weights)
        elif ponderation is not None:
            warn(
                DeprecationWarning(
                    f'Operator mac: Input name "ponderation" is deprecated in favor of "weights".'
                )
            )
            self.inputs.weights.connect(ponderation)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Computes MAC Matrix between two fields container, both for real and
complex cases. For mixed cases (real-complex and complex) only the real
part is considered. Providing inputs with the same component scoping is
an user responsability.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_containerA",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Fields Container A.""",
                ),
                1: PinSpecification(
                    name="fields_containerB",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""Fields Container B.""",
                ),
                2: PinSpecification(
                    name="weights",
                    type_names=["field"],
                    optional=False,
                    document=r"""Field M, optional weighting for MAC Matrix computation.""",
                    aliases=["ponderation"],
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document=r"""MAC Matrix for all the combinations between mode fields of Field Container A and Field Container B. Results listed row by row.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="mac", server=server)

    @property
    def inputs(self) -> InputsMac:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsMac.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsMac:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsMac.
        """
        return super().outputs


class InputsMac(_Inputs):
    """Intermediate class used to connect user inputs to
    mac operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.mac()
    >>> my_fields_containerA = dpf.FieldsContainer()
    >>> op.inputs.fields_containerA.connect(my_fields_containerA)
    >>> my_fields_containerB = dpf.FieldsContainer()
    >>> op.inputs.fields_containerB.connect(my_fields_containerB)
    >>> my_weights = dpf.Field()
    >>> op.inputs.weights.connect(my_weights)
    """

    def __init__(self, op: Operator):
        super().__init__(mac._spec().inputs, op)
        self._fields_containerA = Input(mac._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._fields_containerA)
        self._fields_containerB = Input(mac._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._fields_containerB)
        self._weights = Input(mac._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._weights)

    @property
    def fields_containerA(self) -> Input:
        r"""Allows to connect fields_containerA input to the operator.

        Fields Container A.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mac()
        >>> op.inputs.fields_containerA.connect(my_fields_containerA)
        >>> # or
        >>> op.inputs.fields_containerA(my_fields_containerA)
        """
        return self._fields_containerA

    @property
    def fields_containerB(self) -> Input:
        r"""Allows to connect fields_containerB input to the operator.

        Fields Container B.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mac()
        >>> op.inputs.fields_containerB.connect(my_fields_containerB)
        >>> # or
        >>> op.inputs.fields_containerB(my_fields_containerB)
        """
        return self._fields_containerB

    @property
    def weights(self) -> Input:
        r"""Allows to connect weights input to the operator.

        Field M, optional weighting for MAC Matrix computation.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mac()
        >>> op.inputs.weights.connect(my_weights)
        >>> # or
        >>> op.inputs.weights(my_weights)
        """
        return self._weights

    def __getattr__(self, name):
        if name in ["ponderation"]:
            warn(
                DeprecationWarning(
                    f'Operator mac: Input name "{name}" is deprecated in favor of "weights".'
                )
            )
            return self.weights
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )


class OutputsMac(_Outputs):
    """Intermediate class used to get outputs from
    mac operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.mac()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(mac._spec().outputs, op)
        self._field = Output(mac._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)

    @property
    def field(self) -> Output:
        r"""Allows to get field output of the operator

        MAC Matrix for all the combinations between mode fields of Field Container A and Field Container B. Results listed row by row.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mac()
        >>> # Get the output from op.outputs. ...
        >>> result_field = op.outputs.field()
        """
        return self._field
