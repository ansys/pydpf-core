"""
mac
===
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class mac(Operator):
    """Computes MAC Matrix between two fields container, both for real and
    complex cases. For mixed cases (real-complex and complex) only the
    real part is considered. Providing inputs with the same component
    scoping is an user responsability.

    Parameters
    ----------
    fields_containerA : FieldsContainer
        Fields container a.
    fields_containerB : FieldsContainer
        Fields container b.
    ponderation : Field
        Field m, optional weighting for mac matrix
        computation.

    Returns
    -------
    field : Field
        Mac matrix for all the combinations between
        mode fields of field container a and
        field container b. results listed row
        by row.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.mac()

    >>> # Make input connections
    >>> my_fields_containerA = dpf.FieldsContainer()
    >>> op.inputs.fields_containerA.connect(my_fields_containerA)
    >>> my_fields_containerB = dpf.FieldsContainer()
    >>> op.inputs.fields_containerB.connect(my_fields_containerB)
    >>> my_ponderation = dpf.Field()
    >>> op.inputs.ponderation.connect(my_ponderation)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.mac(
    ...     fields_containerA=my_fields_containerA,
    ...     fields_containerB=my_fields_containerB,
    ...     ponderation=my_ponderation,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self,
        fields_containerA=None,
        fields_containerB=None,
        ponderation=None,
        config=None,
        server=None,
    ):
        super().__init__(name="mac", config=config, server=server)
        self._inputs = InputsMac(self)
        self._outputs = OutputsMac(self)
        if fields_containerA is not None:
            self.inputs.fields_containerA.connect(fields_containerA)
        if fields_containerB is not None:
            self.inputs.fields_containerB.connect(fields_containerB)
        if ponderation is not None:
            self.inputs.ponderation.connect(ponderation)

    @staticmethod
    def _spec():
        description = """Computes MAC Matrix between two fields container, both for real and
            complex cases. For mixed cases (real-complex and complex)
            only the real part is considered. Providing inputs with
            the same component scoping is an user responsability."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_containerA",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fields container a.""",
                ),
                1: PinSpecification(
                    name="fields_containerB",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fields container b.""",
                ),
                2: PinSpecification(
                    name="ponderation",
                    type_names=["field"],
                    optional=False,
                    document="""Field m, optional weighting for mac matrix
        computation.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""Mac matrix for all the combinations between
        mode fields of field container a and
        field container b. results listed row
        by row.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="mac", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsMac
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsMac
        """
        return super().outputs


class InputsMac(_Inputs):
    """Intermediate class used to connect user inputs to
    mac operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.mac()
    >>> my_fields_containerA = dpf.FieldsContainer()
    >>> op.inputs.fields_containerA.connect(my_fields_containerA)
    >>> my_fields_containerB = dpf.FieldsContainer()
    >>> op.inputs.fields_containerB.connect(my_fields_containerB)
    >>> my_ponderation = dpf.Field()
    >>> op.inputs.ponderation.connect(my_ponderation)
    """

    def __init__(self, op: Operator):
        super().__init__(mac._spec().inputs, op)
        self._fields_containerA = Input(mac._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._fields_containerA)
        self._fields_containerB = Input(mac._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._fields_containerB)
        self._ponderation = Input(mac._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._ponderation)

    @property
    def fields_containerA(self):
        """Allows to connect fields_containerA input to the operator.

        Fields container a.

        Parameters
        ----------
        my_fields_containerA : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mac()
        >>> op.inputs.fields_containerA.connect(my_fields_containerA)
        >>> # or
        >>> op.inputs.fields_containerA(my_fields_containerA)
        """
        return self._fields_containerA

    @property
    def fields_containerB(self):
        """Allows to connect fields_containerB input to the operator.

        Fields container b.

        Parameters
        ----------
        my_fields_containerB : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mac()
        >>> op.inputs.fields_containerB.connect(my_fields_containerB)
        >>> # or
        >>> op.inputs.fields_containerB(my_fields_containerB)
        """
        return self._fields_containerB

    @property
    def ponderation(self):
        """Allows to connect ponderation input to the operator.

        Field m, optional weighting for mac matrix
        computation.

        Parameters
        ----------
        my_ponderation : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mac()
        >>> op.inputs.ponderation.connect(my_ponderation)
        >>> # or
        >>> op.inputs.ponderation(my_ponderation)
        """
        return self._ponderation


class OutputsMac(_Outputs):
    """Intermediate class used to get outputs from
    mac operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.mac()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(mac._spec().outputs, op)
        self._field = Output(mac._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)

    @property
    def field(self):
        """Allows to get field output of the operator

        Returns
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mac()
        >>> # Connect inputs : op.inputs. ...
        >>> result_field = op.outputs.field()
        """  # noqa: E501
        return self._field
