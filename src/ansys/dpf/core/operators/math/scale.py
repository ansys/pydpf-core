"""
scale

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class scale(Operator):
    r"""Scales a field by a constant factor. This factor can be a scalar or a
    vector, where each value of the vector represents a scaler per
    component. Number of the components are corresponding to the input field
    dimensionality


    Parameters
    ----------
    field: Field or FieldsContainer
        field or fields container with only one field is expected
    weights: float or Field
        Double/Field/Vector of doubles. When scoped on overall, same value(s) applied on all the data, when scoped elsewhere, corresponding values will be multiplied due to the scoping
    boolean: bool, optional
        Default is false. If set to true, output of scale is made dimensionless
    algorithm: int, optional
        Default is 0 use mkl. If set to 1, don't

    Returns
    -------
    field: Field

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.scale()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_weights = float()
    >>> op.inputs.weights.connect(my_weights)
    >>> my_boolean = bool()
    >>> op.inputs.boolean.connect(my_boolean)
    >>> my_algorithm = int()
    >>> op.inputs.algorithm.connect(my_algorithm)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.scale(
    ...     field=my_field,
    ...     weights=my_weights,
    ...     boolean=my_boolean,
    ...     algorithm=my_algorithm,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    """

    def __init__(
        self,
        field=None,
        weights=None,
        boolean=None,
        algorithm=None,
        config=None,
        server=None,
        ponderation=None,
    ):
        super().__init__(name="scale", config=config, server=server)
        self._inputs = InputsScale(self)
        self._outputs = OutputsScale(self)
        if field is not None:
            self.inputs.field.connect(field)
        if weights is not None:
            self.inputs.weights.connect(weights)
        elif ponderation is not None:
            warn(
                DeprecationWarning(
                    f'Operator scale: Input name "ponderation" is deprecated in favor of "weights".'
                )
            )
            self.inputs.weights.connect(ponderation)
        if boolean is not None:
            self.inputs.boolean.connect(boolean)
        if algorithm is not None:
            self.inputs.algorithm.connect(algorithm)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Scales a field by a constant factor. This factor can be a scalar or a
vector, where each value of the vector represents a scaler per
component. Number of the components are corresponding to the input field
dimensionality
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document=r"""field or fields container with only one field is expected""",
                ),
                1: PinSpecification(
                    name="weights",
                    type_names=["double", "field", "vector<double>"],
                    optional=False,
                    document=r"""Double/Field/Vector of doubles. When scoped on overall, same value(s) applied on all the data, when scoped elsewhere, corresponding values will be multiplied due to the scoping""",
                    aliases=["ponderation"],
                ),
                2: PinSpecification(
                    name="boolean",
                    type_names=["bool"],
                    optional=True,
                    document=r"""Default is false. If set to true, output of scale is made dimensionless""",
                ),
                3: PinSpecification(
                    name="algorithm",
                    type_names=["int32"],
                    optional=True,
                    document=r"""Default is 0 use mkl. If set to 1, don't""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="scale", server=server)

    @property
    def inputs(self) -> InputsScale:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsScale.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsScale:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsScale.
        """
        return super().outputs


class InputsScale(_Inputs):
    """Intermediate class used to connect user inputs to
    scale operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.scale()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_weights = float()
    >>> op.inputs.weights.connect(my_weights)
    >>> my_boolean = bool()
    >>> op.inputs.boolean.connect(my_boolean)
    >>> my_algorithm = int()
    >>> op.inputs.algorithm.connect(my_algorithm)
    """

    def __init__(self, op: Operator):
        super().__init__(scale._spec().inputs, op)
        self._field = Input(scale._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._weights = Input(scale._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._weights)
        self._boolean = Input(scale._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._boolean)
        self._algorithm = Input(scale._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._algorithm)

    @property
    def field(self) -> Input:
        r"""Allows to connect field input to the operator.

        field or fields container with only one field is expected

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def weights(self) -> Input:
        r"""Allows to connect weights input to the operator.

        Double/Field/Vector of doubles. When scoped on overall, same value(s) applied on all the data, when scoped elsewhere, corresponding values will be multiplied due to the scoping

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale()
        >>> op.inputs.weights.connect(my_weights)
        >>> # or
        >>> op.inputs.weights(my_weights)
        """
        return self._weights

    @property
    def boolean(self) -> Input:
        r"""Allows to connect boolean input to the operator.

        Default is false. If set to true, output of scale is made dimensionless

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale()
        >>> op.inputs.boolean.connect(my_boolean)
        >>> # or
        >>> op.inputs.boolean(my_boolean)
        """
        return self._boolean

    @property
    def algorithm(self) -> Input:
        r"""Allows to connect algorithm input to the operator.

        Default is 0 use mkl. If set to 1, don't

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale()
        >>> op.inputs.algorithm.connect(my_algorithm)
        >>> # or
        >>> op.inputs.algorithm(my_algorithm)
        """
        return self._algorithm

    def __getattr__(self, name):
        if name in ["ponderation"]:
            warn(
                DeprecationWarning(
                    f'Operator scale: Input name "{name}" is deprecated in favor of "weights".'
                )
            )
            return self.weights
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )


class OutputsScale(_Outputs):
    """Intermediate class used to get outputs from
    scale operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.scale()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    """

    def __init__(self, op: Operator):
        super().__init__(scale._spec().outputs, op)
        self._field = Output(scale._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)

    @property
    def field(self) -> Output:
        r"""Allows to get field output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale()
        >>> # Get the output from op.outputs. ...
        >>> result_field = op.outputs.field()
        """
        return self._field
