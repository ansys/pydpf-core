"""
stft_fc
=======
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class stft_fc(Operator):
    """Perform Short Term Fourier Transform on a time scoped field having a
    TimeFreqSupport.

    Parameters
    ----------
    fields_container : FieldsContainer
    cutoff_frequency : float
        Max frequency in output
    min_freq_resolution : float
        Minimum frequency resolution (difference
        between each frequency in output)
    slice_number : int
        Number of stft slices
    overlap : float
        Overlapping of between slices
    window : int
        Connect max number subdivisions, used to
        avoid huge number of sudivisions


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.stft_fc()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_cutoff_frequency = float()
    >>> op.inputs.cutoff_frequency.connect(my_cutoff_frequency)
    >>> my_min_freq_resolution = float()
    >>> op.inputs.min_freq_resolution.connect(my_min_freq_resolution)
    >>> my_slice_number = int()
    >>> op.inputs.slice_number.connect(my_slice_number)
    >>> my_overlap = float()
    >>> op.inputs.overlap.connect(my_overlap)
    >>> my_window = int()
    >>> op.inputs.window.connect(my_window)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.stft_fc(
    ...     fields_container=my_fields_container,
    ...     cutoff_frequency=my_cutoff_frequency,
    ...     min_freq_resolution=my_min_freq_resolution,
    ...     slice_number=my_slice_number,
    ...     overlap=my_overlap,
    ...     window=my_window,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        cutoff_frequency=None,
        min_freq_resolution=None,
        slice_number=None,
        overlap=None,
        window=None,
        config=None,
        server=None,
    ):
        super().__init__(name="stft_fc", config=config, server=server)
        self._inputs = InputsStftFc(self)
        self._outputs = OutputsStftFc(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if cutoff_frequency is not None:
            self.inputs.cutoff_frequency.connect(cutoff_frequency)
        if min_freq_resolution is not None:
            self.inputs.min_freq_resolution.connect(min_freq_resolution)
        if slice_number is not None:
            self.inputs.slice_number.connect(slice_number)
        if overlap is not None:
            self.inputs.overlap.connect(overlap)
        if window is not None:
            self.inputs.window.connect(window)

    @staticmethod
    def _spec():
        description = """Perform Short Term Fourier Transform on a time scoped field having a
            TimeFreqSupport."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="cutoff_frequency",
                    type_names=["double"],
                    optional=False,
                    document="""Max frequency in output""",
                ),
                2: PinSpecification(
                    name="min_freq_resolution",
                    type_names=["double"],
                    optional=False,
                    document="""Minimum frequency resolution (difference
        between each frequency in output)""",
                ),
                3: PinSpecification(
                    name="slice_number",
                    type_names=["int32"],
                    optional=False,
                    document="""Number of stft slices""",
                ),
                4: PinSpecification(
                    name="overlap",
                    type_names=["double"],
                    optional=False,
                    document="""Overlapping of between slices""",
                ),
                5: PinSpecification(
                    name="window",
                    type_names=["int32"],
                    optional=False,
                    document="""Connect max number subdivisions, used to
        avoid huge number of sudivisions""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fields container having slice label, each
        field representing a fft on slice.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="stft_fc", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsStftFc
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsStftFc
        """
        return super().outputs


class InputsStftFc(_Inputs):
    """Intermediate class used to connect user inputs to
    stft_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.stft_fc()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_cutoff_frequency = float()
    >>> op.inputs.cutoff_frequency.connect(my_cutoff_frequency)
    >>> my_min_freq_resolution = float()
    >>> op.inputs.min_freq_resolution.connect(my_min_freq_resolution)
    >>> my_slice_number = int()
    >>> op.inputs.slice_number.connect(my_slice_number)
    >>> my_overlap = float()
    >>> op.inputs.overlap.connect(my_overlap)
    >>> my_window = int()
    >>> op.inputs.window.connect(my_window)
    """

    def __init__(self, op: Operator):
        super().__init__(stft_fc._spec().inputs, op)
        self._fields_container = Input(stft_fc._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._fields_container)
        self._cutoff_frequency = Input(stft_fc._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._cutoff_frequency)
        self._min_freq_resolution = Input(stft_fc._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._min_freq_resolution)
        self._slice_number = Input(stft_fc._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._slice_number)
        self._overlap = Input(stft_fc._spec().input_pin(4), 4, op, -1)
        self._inputs.append(self._overlap)
        self._window = Input(stft_fc._spec().input_pin(5), 5, op, -1)
        self._inputs.append(self._window)

    @property
    def fields_container(self):
        """Allows to connect fields_container input to the operator.

        Parameters
        ----------
        my_fields_container : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.stft_fc()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def cutoff_frequency(self):
        """Allows to connect cutoff_frequency input to the operator.

        Max frequency in output

        Parameters
        ----------
        my_cutoff_frequency : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.stft_fc()
        >>> op.inputs.cutoff_frequency.connect(my_cutoff_frequency)
        >>> # or
        >>> op.inputs.cutoff_frequency(my_cutoff_frequency)
        """
        return self._cutoff_frequency

    @property
    def min_freq_resolution(self):
        """Allows to connect min_freq_resolution input to the operator.

        Minimum frequency resolution (difference
        between each frequency in output)

        Parameters
        ----------
        my_min_freq_resolution : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.stft_fc()
        >>> op.inputs.min_freq_resolution.connect(my_min_freq_resolution)
        >>> # or
        >>> op.inputs.min_freq_resolution(my_min_freq_resolution)
        """
        return self._min_freq_resolution

    @property
    def slice_number(self):
        """Allows to connect slice_number input to the operator.

        Number of stft slices

        Parameters
        ----------
        my_slice_number : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.stft_fc()
        >>> op.inputs.slice_number.connect(my_slice_number)
        >>> # or
        >>> op.inputs.slice_number(my_slice_number)
        """
        return self._slice_number

    @property
    def overlap(self):
        """Allows to connect overlap input to the operator.

        Overlapping of between slices

        Parameters
        ----------
        my_overlap : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.stft_fc()
        >>> op.inputs.overlap.connect(my_overlap)
        >>> # or
        >>> op.inputs.overlap(my_overlap)
        """
        return self._overlap

    @property
    def window(self):
        """Allows to connect window input to the operator.

        Connect max number subdivisions, used to
        avoid huge number of sudivisions

        Parameters
        ----------
        my_window : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.stft_fc()
        >>> op.inputs.window.connect(my_window)
        >>> # or
        >>> op.inputs.window(my_window)
        """
        return self._window


class OutputsStftFc(_Outputs):
    """Intermediate class used to get outputs from
    stft_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.stft_fc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(stft_fc._spec().outputs, op)
        self._fields_container = Output(stft_fc._spec().output_pin(0), 0, op)
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self):
        """Allows to get fields_container output of the operator

        Returns
        ----------
        my_fields_container : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.stft_fc()
        >>> # Connect inputs : op.inputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """  # noqa: E501
        return self._fields_container
