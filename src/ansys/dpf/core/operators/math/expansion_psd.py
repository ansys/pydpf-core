"""
expansion_psd

Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class expansion_psd(Operator):
    """Computes the PSD response for one-sigma solution.

    Parameters
    ----------
    mode_shapes : FieldsContainer
        Fields container containing the mode shapes
        from modal analysis file: mode shapes
        for dynamic and pseudo-static
        displacements
    static_shapes : FieldsContainer, optional
        Fields container containing the static shapes
        (base excitations) from spectral
        analysis file
    rel_rel_covar_matrix : FieldsContainer
        Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        mode-mode shapes
    stat_stat_covar_matrix : FieldsContainer, optional
        Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        static-static shapes
    rel_stat_covar_matrix : FieldsContainer, optional
        Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        mode-static shapes

    Returns
    -------
    psd : FieldsContainer
        Psd solution per label

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.expansion_psd()

    >>> # Make input connections
    >>> my_mode_shapes = dpf.FieldsContainer()
    >>> op.inputs.mode_shapes.connect(my_mode_shapes)
    >>> my_static_shapes = dpf.FieldsContainer()
    >>> op.inputs.static_shapes.connect(my_static_shapes)
    >>> my_rel_rel_covar_matrix = dpf.FieldsContainer()
    >>> op.inputs.rel_rel_covar_matrix.connect(my_rel_rel_covar_matrix)
    >>> my_stat_stat_covar_matrix = dpf.FieldsContainer()
    >>> op.inputs.stat_stat_covar_matrix.connect(my_stat_stat_covar_matrix)
    >>> my_rel_stat_covar_matrix = dpf.FieldsContainer()
    >>> op.inputs.rel_stat_covar_matrix.connect(my_rel_stat_covar_matrix)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.expansion_psd(
    ...     mode_shapes=my_mode_shapes,
    ...     static_shapes=my_static_shapes,
    ...     rel_rel_covar_matrix=my_rel_rel_covar_matrix,
    ...     stat_stat_covar_matrix=my_stat_stat_covar_matrix,
    ...     rel_stat_covar_matrix=my_rel_stat_covar_matrix,
    ... )

    >>> # Get output data
    >>> result_psd = op.outputs.psd()
    """

    def __init__(
        self,
        mode_shapes=None,
        static_shapes=None,
        rel_rel_covar_matrix=None,
        stat_stat_covar_matrix=None,
        rel_stat_covar_matrix=None,
        config=None,
        server=None,
    ):
        super().__init__(name="expansion::psd", config=config, server=server)
        self._inputs = InputsExpansionPsd(self)
        self._outputs = OutputsExpansionPsd(self)
        if mode_shapes is not None:
            self.inputs.mode_shapes.connect(mode_shapes)
        if static_shapes is not None:
            self.inputs.static_shapes.connect(static_shapes)
        if rel_rel_covar_matrix is not None:
            self.inputs.rel_rel_covar_matrix.connect(rel_rel_covar_matrix)
        if stat_stat_covar_matrix is not None:
            self.inputs.stat_stat_covar_matrix.connect(stat_stat_covar_matrix)
        if rel_stat_covar_matrix is not None:
            self.inputs.rel_stat_covar_matrix.connect(rel_stat_covar_matrix)

    @staticmethod
    def _spec():
        description = """Computes the PSD response for one-sigma solution."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="mode_shapes",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fields container containing the mode shapes
        from modal analysis file: mode shapes
        for dynamic and pseudo-static
        displacements""",
                    aliases=[],
                ),
                1: PinSpecification(
                    name="static_shapes",
                    type_names=["fields_container"],
                    optional=True,
                    document="""Fields container containing the static shapes
        (base excitations) from spectral
        analysis file""",
                    aliases=[],
                ),
                2: PinSpecification(
                    name="rel_rel_covar_matrix",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        mode-mode shapes""",
                    aliases=[],
                ),
                3: PinSpecification(
                    name="stat_stat_covar_matrix",
                    type_names=["fields_container"],
                    optional=True,
                    document="""Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        static-static shapes""",
                    aliases=[],
                ),
                4: PinSpecification(
                    name="rel_stat_covar_matrix",
                    type_names=["fields_container"],
                    optional=True,
                    document="""Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        mode-static shapes""",
                    aliases=[],
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="psd",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Psd solution per label""",
                    aliases=[],
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="expansion::psd", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsExpansionPsd
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsExpansionPsd
        """
        return super().outputs


class InputsExpansionPsd(_Inputs):
    """Intermediate class used to connect user inputs to
    expansion_psd operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.expansion_psd()
    >>> my_mode_shapes = dpf.FieldsContainer()
    >>> op.inputs.mode_shapes.connect(my_mode_shapes)
    >>> my_static_shapes = dpf.FieldsContainer()
    >>> op.inputs.static_shapes.connect(my_static_shapes)
    >>> my_rel_rel_covar_matrix = dpf.FieldsContainer()
    >>> op.inputs.rel_rel_covar_matrix.connect(my_rel_rel_covar_matrix)
    >>> my_stat_stat_covar_matrix = dpf.FieldsContainer()
    >>> op.inputs.stat_stat_covar_matrix.connect(my_stat_stat_covar_matrix)
    >>> my_rel_stat_covar_matrix = dpf.FieldsContainer()
    >>> op.inputs.rel_stat_covar_matrix.connect(my_rel_stat_covar_matrix)
    """

    def __init__(self, op: Operator):
        super().__init__(expansion_psd._spec().inputs, op)
        self._mode_shapes = Input(expansion_psd._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._mode_shapes)
        self._static_shapes = Input(expansion_psd._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._static_shapes)
        self._rel_rel_covar_matrix = Input(
            expansion_psd._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._rel_rel_covar_matrix)
        self._stat_stat_covar_matrix = Input(
            expansion_psd._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._stat_stat_covar_matrix)
        self._rel_stat_covar_matrix = Input(
            expansion_psd._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._rel_stat_covar_matrix)

    @property
    def mode_shapes(self):
        """Allows to connect mode_shapes input to the operator.

        Fields container containing the mode shapes
        from modal analysis file: mode shapes
        for dynamic and pseudo-static
        displacements

        Parameters
        ----------
        my_mode_shapes : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.expansion_psd()
        >>> op.inputs.mode_shapes.connect(my_mode_shapes)
        >>> # or
        >>> op.inputs.mode_shapes(my_mode_shapes)
        """
        return self._mode_shapes

    @property
    def static_shapes(self):
        """Allows to connect static_shapes input to the operator.

        Fields container containing the static shapes
        (base excitations) from spectral
        analysis file

        Parameters
        ----------
        my_static_shapes : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.expansion_psd()
        >>> op.inputs.static_shapes.connect(my_static_shapes)
        >>> # or
        >>> op.inputs.static_shapes(my_static_shapes)
        """
        return self._static_shapes

    @property
    def rel_rel_covar_matrix(self):
        """Allows to connect rel_rel_covar_matrix input to the operator.

        Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        mode-mode shapes

        Parameters
        ----------
        my_rel_rel_covar_matrix : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.expansion_psd()
        >>> op.inputs.rel_rel_covar_matrix.connect(my_rel_rel_covar_matrix)
        >>> # or
        >>> op.inputs.rel_rel_covar_matrix(my_rel_rel_covar_matrix)
        """
        return self._rel_rel_covar_matrix

    @property
    def stat_stat_covar_matrix(self):
        """Allows to connect stat_stat_covar_matrix input to the operator.

        Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        static-static shapes

        Parameters
        ----------
        my_stat_stat_covar_matrix : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.expansion_psd()
        >>> op.inputs.stat_stat_covar_matrix.connect(my_stat_stat_covar_matrix)
        >>> # or
        >>> op.inputs.stat_stat_covar_matrix(my_stat_stat_covar_matrix)
        """
        return self._stat_stat_covar_matrix

    @property
    def rel_stat_covar_matrix(self):
        """Allows to connect rel_stat_covar_matrix input to the operator.

        Fields container containing covariance
        matrices from a psd file: covariance
        matrix terms for
        displacement/velocity/acceleration
        mode-static shapes

        Parameters
        ----------
        my_rel_stat_covar_matrix : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.expansion_psd()
        >>> op.inputs.rel_stat_covar_matrix.connect(my_rel_stat_covar_matrix)
        >>> # or
        >>> op.inputs.rel_stat_covar_matrix(my_rel_stat_covar_matrix)
        """
        return self._rel_stat_covar_matrix

    def __getattr__(self, name):
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )


class OutputsExpansionPsd(_Outputs):
    """Intermediate class used to get outputs from
    expansion_psd operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.expansion_psd()
    >>> # Connect inputs : op.inputs. ...
    >>> result_psd = op.outputs.psd()
    """

    def __init__(self, op: Operator):
        super().__init__(expansion_psd._spec().outputs, op)
        self._psd = Output(expansion_psd._spec().output_pin(0), 0, op)
        self._outputs.append(self._psd)

    @property
    def psd(self):
        """Allows to get psd output of the operator

        Returns
        ----------
        my_psd : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.expansion_psd()
        >>> # Connect inputs : op.inputs. ...
        >>> result_psd = op.outputs.psd()
        """  # noqa: E501
        return self._psd

    def __getattr__(self, name):
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )
