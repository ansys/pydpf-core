"""
correlation

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class correlation(Operator):
    r"""Takes two fields and a weighting and computes their correlation:
    aMb/(\||aMa|\|.||bMb|\|). If several b fields are provided (via a fields
    container), correlation is computed for each of them.


    Parameters
    ----------
    fieldA: Field or float
        Field a. The reference field.
    fieldB: Field or FieldsContainer
        Field b. If a fields container is provided, correlation is computed for each field.
    weights: Field or FieldsContainer
        Field M, optional weighting for correlation computation.
    absoluteValue: bool
        If true, correlation factor is ||aMb||/(||aMa||.||bMb||)

    Returns
    -------
    field: Field
        Correlation factor for each input field b.
    index: int
        If several b are provided, this output contains the index of the highest correlation factor.

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.correlation()

    >>> # Make input connections
    >>> my_fieldA = dpf.Field()
    >>> op.inputs.fieldA.connect(my_fieldA)
    >>> my_fieldB = dpf.Field()
    >>> op.inputs.fieldB.connect(my_fieldB)
    >>> my_weights = dpf.Field()
    >>> op.inputs.weights.connect(my_weights)
    >>> my_absoluteValue = bool()
    >>> op.inputs.absoluteValue.connect(my_absoluteValue)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.correlation(
    ...     fieldA=my_fieldA,
    ...     fieldB=my_fieldB,
    ...     weights=my_weights,
    ...     absoluteValue=my_absoluteValue,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    >>> result_index = op.outputs.index()
    """

    def __init__(
        self,
        fieldA=None,
        fieldB=None,
        weights=None,
        absoluteValue=None,
        config=None,
        server=None,
        ponderation=None,
    ):
        super().__init__(name="correlation", config=config, server=server)
        self._inputs = InputsCorrelation(self)
        self._outputs = OutputsCorrelation(self)
        if fieldA is not None:
            self.inputs.fieldA.connect(fieldA)
        if fieldB is not None:
            self.inputs.fieldB.connect(fieldB)
        if weights is not None:
            self.inputs.weights.connect(weights)
        elif ponderation is not None:
            warn(
                DeprecationWarning(
                    f'Operator correlation: Input name "ponderation" is deprecated in favor of "weights".'
                )
            )
            self.inputs.weights.connect(ponderation)
        if absoluteValue is not None:
            self.inputs.absoluteValue.connect(absoluteValue)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Takes two fields and a weighting and computes their correlation:
aMb/(\||aMa|\|.||bMb|\|). If several b fields are provided (via a fields
container), correlation is computed for each of them.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fieldA",
                    type_names=["field", "double", "vector<double>"],
                    optional=False,
                    document=r"""Field a. The reference field.""",
                ),
                1: PinSpecification(
                    name="fieldB",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document=r"""Field b. If a fields container is provided, correlation is computed for each field.""",
                ),
                2: PinSpecification(
                    name="weights",
                    type_names=["field", "fields_container"],
                    optional=False,
                    document=r"""Field M, optional weighting for correlation computation.""",
                    aliases=["ponderation"],
                ),
                3: PinSpecification(
                    name="absoluteValue",
                    type_names=["bool"],
                    optional=False,
                    document=r"""If true, correlation factor is ||aMb||/(||aMa||.||bMb||)""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document=r"""Correlation factor for each input field b.""",
                ),
                1: PinSpecification(
                    name="index",
                    type_names=["int32"],
                    optional=False,
                    document=r"""If several b are provided, this output contains the index of the highest correlation factor.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="correlation", server=server)

    @property
    def inputs(self) -> InputsCorrelation:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsCorrelation.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsCorrelation:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsCorrelation.
        """
        return super().outputs


class InputsCorrelation(_Inputs):
    """Intermediate class used to connect user inputs to
    correlation operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.correlation()
    >>> my_fieldA = dpf.Field()
    >>> op.inputs.fieldA.connect(my_fieldA)
    >>> my_fieldB = dpf.Field()
    >>> op.inputs.fieldB.connect(my_fieldB)
    >>> my_weights = dpf.Field()
    >>> op.inputs.weights.connect(my_weights)
    >>> my_absoluteValue = bool()
    >>> op.inputs.absoluteValue.connect(my_absoluteValue)
    """

    def __init__(self, op: Operator):
        super().__init__(correlation._spec().inputs, op)
        self._fieldA = Input(correlation._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._fieldA)
        self._fieldB = Input(correlation._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._fieldB)
        self._weights = Input(correlation._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._weights)
        self._absoluteValue = Input(correlation._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._absoluteValue)

    @property
    def fieldA(self) -> Input:
        r"""Allows to connect fieldA input to the operator.

        Field a. The reference field.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.correlation()
        >>> op.inputs.fieldA.connect(my_fieldA)
        >>> # or
        >>> op.inputs.fieldA(my_fieldA)
        """
        return self._fieldA

    @property
    def fieldB(self) -> Input:
        r"""Allows to connect fieldB input to the operator.

        Field b. If a fields container is provided, correlation is computed for each field.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.correlation()
        >>> op.inputs.fieldB.connect(my_fieldB)
        >>> # or
        >>> op.inputs.fieldB(my_fieldB)
        """
        return self._fieldB

    @property
    def weights(self) -> Input:
        r"""Allows to connect weights input to the operator.

        Field M, optional weighting for correlation computation.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.correlation()
        >>> op.inputs.weights.connect(my_weights)
        >>> # or
        >>> op.inputs.weights(my_weights)
        """
        return self._weights

    @property
    def absoluteValue(self) -> Input:
        r"""Allows to connect absoluteValue input to the operator.

        If true, correlation factor is ||aMb||/(||aMa||.||bMb||)

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.correlation()
        >>> op.inputs.absoluteValue.connect(my_absoluteValue)
        >>> # or
        >>> op.inputs.absoluteValue(my_absoluteValue)
        """
        return self._absoluteValue

    def __getattr__(self, name):
        if name in ["ponderation"]:
            warn(
                DeprecationWarning(
                    f'Operator correlation: Input name "{name}" is deprecated in favor of "weights".'
                )
            )
            return self.weights
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )


class OutputsCorrelation(_Outputs):
    """Intermediate class used to get outputs from
    correlation operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.correlation()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    >>> result_index = op.outputs.index()
    """

    def __init__(self, op: Operator):
        super().__init__(correlation._spec().outputs, op)
        self._field = Output(correlation._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)
        self._index = Output(correlation._spec().output_pin(1), 1, op)
        self._outputs.append(self._index)

    @property
    def field(self) -> Output:
        r"""Allows to get field output of the operator

        Correlation factor for each input field b.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.correlation()
        >>> # Get the output from op.outputs. ...
        >>> result_field = op.outputs.field()
        """
        return self._field

    @property
    def index(self) -> Output:
        r"""Allows to get index output of the operator

        If several b are provided, this output contains the index of the highest correlation factor.

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.correlation()
        >>> # Get the output from op.outputs. ...
        >>> result_index = op.outputs.index()
        """
        return self._index
