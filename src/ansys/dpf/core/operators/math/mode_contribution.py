"""
mode_contribution
=================
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class mode_contribution(Operator):
    """Compute the mode contribution

    Parameters
    ----------
    evalution_solution : FieldsContainer
        Evalution solution
    mode_solution : FieldsContainer
        Mode solution
    mode_shapes : FieldsContainer
    result_type : str
        Result type
    output_dof_index : int, optional
        The output dof index


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.mode_contribution()

    >>> # Make input connections
    >>> my_evalution_solution = dpf.FieldsContainer()
    >>> op.inputs.evalution_solution.connect(my_evalution_solution)
    >>> my_mode_solution = dpf.FieldsContainer()
    >>> op.inputs.mode_solution.connect(my_mode_solution)
    >>> my_mode_shapes = dpf.FieldsContainer()
    >>> op.inputs.mode_shapes.connect(my_mode_shapes)
    >>> my_result_type = str()
    >>> op.inputs.result_type.connect(my_result_type)
    >>> my_output_dof_index = int()
    >>> op.inputs.output_dof_index.connect(my_output_dof_index)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.mode_contribution(
    ...     evalution_solution=my_evalution_solution,
    ...     mode_solution=my_mode_solution,
    ...     mode_shapes=my_mode_shapes,
    ...     result_type=my_result_type,
    ...     output_dof_index=my_output_dof_index,
    ... )

    >>> # Get output data
    >>> result_output = op.outputs.output()
    >>> result_output_component = op.outputs.output_component()
    """

    def __init__(
        self,
        evalution_solution=None,
        mode_solution=None,
        mode_shapes=None,
        result_type=None,
        output_dof_index=None,
        config=None,
        server=None,
    ):
        super().__init__(name="mode_contribution", config=config, server=server)
        self._inputs = InputsModeContribution(self)
        self._outputs = OutputsModeContribution(self)
        if evalution_solution is not None:
            self.inputs.evalution_solution.connect(evalution_solution)
        if mode_solution is not None:
            self.inputs.mode_solution.connect(mode_solution)
        if mode_shapes is not None:
            self.inputs.mode_shapes.connect(mode_shapes)
        if result_type is not None:
            self.inputs.result_type.connect(result_type)
        if output_dof_index is not None:
            self.inputs.output_dof_index.connect(output_dof_index)

    @staticmethod
    def _spec():
        description = """Compute the mode contribution"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="evalution_solution",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Evalution solution""",
                ),
                1: PinSpecification(
                    name="mode_solution",
                    type_names=["fields_container"],
                    optional=False,
                    document="""Mode solution""",
                ),
                2: PinSpecification(
                    name="mode_shapes",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
                3: PinSpecification(
                    name="result_type",
                    type_names=["string"],
                    optional=False,
                    document="""Result type""",
                ),
                4: PinSpecification(
                    name="output_dof_index",
                    type_names=["int32"],
                    optional=True,
                    document="""The output dof index""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="output",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="output_component",
                    type_names=["fields_container"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="mode_contribution", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsModeContribution
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsModeContribution
        """
        return super().outputs


class InputsModeContribution(_Inputs):
    """Intermediate class used to connect user inputs to
    mode_contribution operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.mode_contribution()
    >>> my_evalution_solution = dpf.FieldsContainer()
    >>> op.inputs.evalution_solution.connect(my_evalution_solution)
    >>> my_mode_solution = dpf.FieldsContainer()
    >>> op.inputs.mode_solution.connect(my_mode_solution)
    >>> my_mode_shapes = dpf.FieldsContainer()
    >>> op.inputs.mode_shapes.connect(my_mode_shapes)
    >>> my_result_type = str()
    >>> op.inputs.result_type.connect(my_result_type)
    >>> my_output_dof_index = int()
    >>> op.inputs.output_dof_index.connect(my_output_dof_index)
    """

    def __init__(self, op: Operator):
        super().__init__(mode_contribution._spec().inputs, op)
        self._evalution_solution = Input(
            mode_contribution._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._evalution_solution)
        self._mode_solution = Input(mode_contribution._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._mode_solution)
        self._mode_shapes = Input(mode_contribution._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._mode_shapes)
        self._result_type = Input(mode_contribution._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._result_type)
        self._output_dof_index = Input(
            mode_contribution._spec().input_pin(4), 4, op, -1
        )
        self._inputs.append(self._output_dof_index)

    @property
    def evalution_solution(self):
        """Allows to connect evalution_solution input to the operator.

        Evalution solution

        Parameters
        ----------
        my_evalution_solution : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mode_contribution()
        >>> op.inputs.evalution_solution.connect(my_evalution_solution)
        >>> # or
        >>> op.inputs.evalution_solution(my_evalution_solution)
        """
        return self._evalution_solution

    @property
    def mode_solution(self):
        """Allows to connect mode_solution input to the operator.

        Mode solution

        Parameters
        ----------
        my_mode_solution : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mode_contribution()
        >>> op.inputs.mode_solution.connect(my_mode_solution)
        >>> # or
        >>> op.inputs.mode_solution(my_mode_solution)
        """
        return self._mode_solution

    @property
    def mode_shapes(self):
        """Allows to connect mode_shapes input to the operator.

        Parameters
        ----------
        my_mode_shapes : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mode_contribution()
        >>> op.inputs.mode_shapes.connect(my_mode_shapes)
        >>> # or
        >>> op.inputs.mode_shapes(my_mode_shapes)
        """
        return self._mode_shapes

    @property
    def result_type(self):
        """Allows to connect result_type input to the operator.

        Result type

        Parameters
        ----------
        my_result_type : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mode_contribution()
        >>> op.inputs.result_type.connect(my_result_type)
        >>> # or
        >>> op.inputs.result_type(my_result_type)
        """
        return self._result_type

    @property
    def output_dof_index(self):
        """Allows to connect output_dof_index input to the operator.

        The output dof index

        Parameters
        ----------
        my_output_dof_index : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mode_contribution()
        >>> op.inputs.output_dof_index.connect(my_output_dof_index)
        >>> # or
        >>> op.inputs.output_dof_index(my_output_dof_index)
        """
        return self._output_dof_index


class OutputsModeContribution(_Outputs):
    """Intermediate class used to get outputs from
    mode_contribution operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.mode_contribution()
    >>> # Connect inputs : op.inputs. ...
    >>> result_output = op.outputs.output()
    >>> result_output_component = op.outputs.output_component()
    """

    def __init__(self, op: Operator):
        super().__init__(mode_contribution._spec().outputs, op)
        self._output = Output(mode_contribution._spec().output_pin(0), 0, op)
        self._outputs.append(self._output)
        self._output_component = Output(mode_contribution._spec().output_pin(1), 1, op)
        self._outputs.append(self._output_component)

    @property
    def output(self):
        """Allows to get output output of the operator

        Returns
        ----------
        my_output : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mode_contribution()
        >>> # Connect inputs : op.inputs. ...
        >>> result_output = op.outputs.output()
        """  # noqa: E501
        return self._output

    @property
    def output_component(self):
        """Allows to get output_component output of the operator

        Returns
        ----------
        my_output_component : FieldsContainer

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.mode_contribution()
        >>> # Connect inputs : op.inputs. ...
        >>> result_output_component = op.outputs.output_component()
        """  # noqa: E501
        return self._output_component
