"""
sampler
=======
Autogenerated DPF operator classes.
"""

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class sampler(Operator):
    """Linearly sample a field having a time freq support in input.

    Parameters
    ----------
    field : Field
        Time scoped field having a timefreqsupport
    frequency : float
        Sampling frequency.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.sampler()

    >>> # Make input connections
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_frequency = float()
    >>> op.inputs.frequency.connect(my_frequency)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.sampler(
    ...     field=my_field,
    ...     frequency=my_frequency,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    >>> result_time_freq_support = op.outputs.time_freq_support()
    """

    def __init__(self, field=None, frequency=None, config=None, server=None):
        super().__init__(name="sampler", config=config, server=server)
        self._inputs = InputsSampler(self)
        self._outputs = OutputsSampler(self)
        if field is not None:
            self.inputs.field.connect(field)
        if frequency is not None:
            self.inputs.frequency.connect(frequency)

    @staticmethod
    def _spec():
        description = """Linearly sample a field having a time freq support in input."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""Time scoped field having a timefreqsupport""",
                ),
                1: PinSpecification(
                    name="frequency",
                    type_names=["double"],
                    optional=False,
                    document="""Sampling frequency.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="time_freq_support",
                    type_names=["time_freq_support"],
                    optional=False,
                    document="""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="sampler", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsSampler
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsSampler
        """
        return super().outputs


class InputsSampler(_Inputs):
    """Intermediate class used to connect user inputs to
    sampler operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.sampler()
    >>> my_field = dpf.Field()
    >>> op.inputs.field.connect(my_field)
    >>> my_frequency = float()
    >>> op.inputs.frequency.connect(my_frequency)
    """

    def __init__(self, op: Operator):
        super().__init__(sampler._spec().inputs, op)
        self._field = Input(sampler._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._field)
        self._frequency = Input(sampler._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._frequency)

    @property
    def field(self):
        """Allows to connect field input to the operator.

        Time scoped field having a timefreqsupport

        Parameters
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.sampler()
        >>> op.inputs.field.connect(my_field)
        >>> # or
        >>> op.inputs.field(my_field)
        """
        return self._field

    @property
    def frequency(self):
        """Allows to connect frequency input to the operator.

        Sampling frequency.

        Parameters
        ----------
        my_frequency : float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.sampler()
        >>> op.inputs.frequency.connect(my_frequency)
        >>> # or
        >>> op.inputs.frequency(my_frequency)
        """
        return self._frequency


class OutputsSampler(_Outputs):
    """Intermediate class used to get outputs from
    sampler operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.sampler()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    >>> result_time_freq_support = op.outputs.time_freq_support()
    """

    def __init__(self, op: Operator):
        super().__init__(sampler._spec().outputs, op)
        self._field = Output(sampler._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)
        self._time_freq_support = Output(sampler._spec().output_pin(1), 1, op)
        self._outputs.append(self._time_freq_support)

    @property
    def field(self):
        """Allows to get field output of the operator

        Returns
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.sampler()
        >>> # Connect inputs : op.inputs. ...
        >>> result_field = op.outputs.field()
        """  # noqa: E501
        return self._field

    @property
    def time_freq_support(self):
        """Allows to get time_freq_support output of the operator

        Returns
        ----------
        my_time_freq_support : TimeFreqSupport

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.sampler()
        >>> # Connect inputs : op.inputs. ...
        >>> result_time_freq_support = op.outputs.time_freq_support()
        """  # noqa: E501
        return self._time_freq_support
