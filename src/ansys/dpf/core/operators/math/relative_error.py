"""
relative_error
==============
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class relative_error(Operator):
    """Computes the relative error between a reference scalar field and
    another scalar field.

    Parameters
    ----------
    value : Field or FieldsContainer or float
        Field or fields container with only one field
        is expected
    reference : Field or FieldsContainer or float
        Field or fields container with only one field
        is expected


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.relative_error()

    >>> # Make input connections
    >>> my_value = dpf.Field()
    >>> op.inputs.value.connect(my_value)
    >>> my_reference = dpf.Field()
    >>> op.inputs.reference.connect(my_reference)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.relative_error(
    ...     value=my_value,
    ...     reference=my_reference,
    ... )

    >>> # Get output data
    >>> result_field = op.outputs.field()
    >>> result_zero_ref_scoping = op.outputs.zero_ref_scoping()
    >>> result_no_ref_scoping = op.outputs.no_ref_scoping()
    """

    def __init__(self, value=None, reference=None, config=None, server=None):
        super().__init__(name="relative_error", config=config, server=server)
        self._inputs = InputsRelativeError(self)
        self._outputs = OutputsRelativeError(self)
        if value is not None:
            self.inputs.value.connect(value)
        if reference is not None:
            self.inputs.reference.connect(reference)

    @staticmethod
    def _spec():
        description = """Computes the relative error between a reference scalar field and
            another scalar field."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="value",
                    type_names=[
                        "field",
                        "fields_container",
                        "double",
                        "vector<double>",
                    ],
                    optional=False,
                    document="""Field or fields container with only one field
        is expected""",
                ),
                1: PinSpecification(
                    name="reference",
                    type_names=[
                        "field",
                        "fields_container",
                        "double",
                        "vector<double>",
                    ],
                    optional=False,
                    document="""Field or fields container with only one field
        is expected""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="field",
                    type_names=["field"],
                    optional=False,
                    document="""""",
                ),
                1: PinSpecification(
                    name="zero_ref_scoping",
                    type_names=["scoping"],
                    optional=False,
                    document="""Ids of entities where reference value is
        zero.""",
                ),
                2: PinSpecification(
                    name="no_ref_scoping",
                    type_names=["scoping"],
                    optional=False,
                    document="""Ids of entities where there are no reference
        value.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(name="relative_error", server=server)

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsRelativeError
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsRelativeError
        """
        return super().outputs


class InputsRelativeError(_Inputs):
    """Intermediate class used to connect user inputs to
    relative_error operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.relative_error()
    >>> my_value = dpf.Field()
    >>> op.inputs.value.connect(my_value)
    >>> my_reference = dpf.Field()
    >>> op.inputs.reference.connect(my_reference)
    """

    def __init__(self, op: Operator):
        super().__init__(relative_error._spec().inputs, op)
        self._value = Input(relative_error._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._value)
        self._reference = Input(relative_error._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._reference)

    @property
    def value(self):
        """Allows to connect value input to the operator.

        Field or fields container with only one field
        is expected

        Parameters
        ----------
        my_value : Field or FieldsContainer or float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.relative_error()
        >>> op.inputs.value.connect(my_value)
        >>> # or
        >>> op.inputs.value(my_value)
        """
        return self._value

    @property
    def reference(self):
        """Allows to connect reference input to the operator.

        Field or fields container with only one field
        is expected

        Parameters
        ----------
        my_reference : Field or FieldsContainer or float

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.relative_error()
        >>> op.inputs.reference.connect(my_reference)
        >>> # or
        >>> op.inputs.reference(my_reference)
        """
        return self._reference


class OutputsRelativeError(_Outputs):
    """Intermediate class used to get outputs from
    relative_error operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.relative_error()
    >>> # Connect inputs : op.inputs. ...
    >>> result_field = op.outputs.field()
    >>> result_zero_ref_scoping = op.outputs.zero_ref_scoping()
    >>> result_no_ref_scoping = op.outputs.no_ref_scoping()
    """

    def __init__(self, op: Operator):
        super().__init__(relative_error._spec().outputs, op)
        self._field = Output(relative_error._spec().output_pin(0), 0, op)
        self._outputs.append(self._field)
        self._zero_ref_scoping = Output(relative_error._spec().output_pin(1), 1, op)
        self._outputs.append(self._zero_ref_scoping)
        self._no_ref_scoping = Output(relative_error._spec().output_pin(2), 2, op)
        self._outputs.append(self._no_ref_scoping)

    @property
    def field(self):
        """Allows to get field output of the operator

        Returns
        ----------
        my_field : Field

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.relative_error()
        >>> # Connect inputs : op.inputs. ...
        >>> result_field = op.outputs.field()
        """  # noqa: E501
        return self._field

    @property
    def zero_ref_scoping(self):
        """Allows to get zero_ref_scoping output of the operator

        Returns
        ----------
        my_zero_ref_scoping : Scoping

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.relative_error()
        >>> # Connect inputs : op.inputs. ...
        >>> result_zero_ref_scoping = op.outputs.zero_ref_scoping()
        """  # noqa: E501
        return self._zero_ref_scoping

    @property
    def no_ref_scoping(self):
        """Allows to get no_ref_scoping output of the operator

        Returns
        ----------
        my_no_ref_scoping : Scoping

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.relative_error()
        >>> # Connect inputs : op.inputs. ...
        >>> result_no_ref_scoping = op.outputs.no_ref_scoping()
        """  # noqa: E501
        return self._no_ref_scoping
