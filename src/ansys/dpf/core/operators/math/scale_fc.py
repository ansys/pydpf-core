"""
scale_fc

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class scale_fc(Operator):
    r"""Scales a fields container by a constant factor. This factor can be a
    scalar, a vector a field, a fields container, where each value of the
    vector represents a scaler per component. Number of the components are
    corresponding to the input field dimensionality


    Parameters
    ----------
    fields_container: FieldsContainer
        fields container to be scaled
    weights: float or Field or FieldsContainer
        Double/Vector of doubles/Field/FieldsContainer. When scoped on overall, same value(s) applied on all the data, when scoped elsewhere, corresponding values will be multiplied due to the scoping
    boolean: bool, optional
        Default is false. If set to true, output of scale is made dimensionless
    algorithm: int, optional
        Default is 0 use mkl. If set to 1, don't

    Returns
    -------
    fields_container: FieldsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.scale_fc()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_weights = float()
    >>> op.inputs.weights.connect(my_weights)
    >>> my_boolean = bool()
    >>> op.inputs.boolean.connect(my_boolean)
    >>> my_algorithm = int()
    >>> op.inputs.algorithm.connect(my_algorithm)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.scale_fc(
    ...     fields_container=my_fields_container,
    ...     weights=my_weights,
    ...     boolean=my_boolean,
    ...     algorithm=my_algorithm,
    ... )

    >>> # Get output data
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(
        self,
        fields_container=None,
        weights=None,
        boolean=None,
        algorithm=None,
        config=None,
        server=None,
        ponderation=None,
    ):
        super().__init__(name="scale_fc", config=config, server=server)
        self._inputs = InputsScaleFc(self)
        self._outputs = OutputsScaleFc(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if weights is not None:
            self.inputs.weights.connect(weights)
        elif ponderation is not None:
            warn(
                DeprecationWarning(
                    f'Operator scale_fc: Input name "ponderation" is deprecated in favor of "weights".'
                )
            )
            self.inputs.weights.connect(ponderation)
        if boolean is not None:
            self.inputs.boolean.connect(boolean)
        if algorithm is not None:
            self.inputs.algorithm.connect(algorithm)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Scales a fields container by a constant factor. This factor can be a
scalar, a vector a field, a fields container, where each value of the
vector represents a scaler per component. Number of the components are
corresponding to the input field dimensionality
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""fields container to be scaled""",
                ),
                1: PinSpecification(
                    name="weights",
                    type_names=[
                        "double",
                        "field",
                        "vector<double>",
                        "fields_container",
                    ],
                    optional=False,
                    document=r"""Double/Vector of doubles/Field/FieldsContainer. When scoped on overall, same value(s) applied on all the data, when scoped elsewhere, corresponding values will be multiplied due to the scoping""",
                    aliases=["ponderation"],
                ),
                2: PinSpecification(
                    name="boolean",
                    type_names=["bool"],
                    optional=True,
                    document=r"""Default is false. If set to true, output of scale is made dimensionless""",
                ),
                3: PinSpecification(
                    name="algorithm",
                    type_names=["int32"],
                    optional=True,
                    document=r"""Default is 0 use mkl. If set to 1, don't""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="scale_fc", server=server)

    @property
    def inputs(self) -> InputsScaleFc:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsScaleFc.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsScaleFc:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsScaleFc.
        """
        return super().outputs


class InputsScaleFc(_Inputs):
    """Intermediate class used to connect user inputs to
    scale_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.scale_fc()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_weights = float()
    >>> op.inputs.weights.connect(my_weights)
    >>> my_boolean = bool()
    >>> op.inputs.boolean.connect(my_boolean)
    >>> my_algorithm = int()
    >>> op.inputs.algorithm.connect(my_algorithm)
    """

    def __init__(self, op: Operator):
        super().__init__(scale_fc._spec().inputs, op)
        self._fields_container = Input(scale_fc._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._fields_container)
        self._weights = Input(scale_fc._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._weights)
        self._boolean = Input(scale_fc._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._boolean)
        self._algorithm = Input(scale_fc._spec().input_pin(3), 3, op, -1)
        self._inputs.append(self._algorithm)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        fields container to be scaled

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale_fc()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def weights(self) -> Input:
        r"""Allows to connect weights input to the operator.

        Double/Vector of doubles/Field/FieldsContainer. When scoped on overall, same value(s) applied on all the data, when scoped elsewhere, corresponding values will be multiplied due to the scoping

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale_fc()
        >>> op.inputs.weights.connect(my_weights)
        >>> # or
        >>> op.inputs.weights(my_weights)
        """
        return self._weights

    @property
    def boolean(self) -> Input:
        r"""Allows to connect boolean input to the operator.

        Default is false. If set to true, output of scale is made dimensionless

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale_fc()
        >>> op.inputs.boolean.connect(my_boolean)
        >>> # or
        >>> op.inputs.boolean(my_boolean)
        """
        return self._boolean

    @property
    def algorithm(self) -> Input:
        r"""Allows to connect algorithm input to the operator.

        Default is 0 use mkl. If set to 1, don't

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale_fc()
        >>> op.inputs.algorithm.connect(my_algorithm)
        >>> # or
        >>> op.inputs.algorithm(my_algorithm)
        """
        return self._algorithm

    def __getattr__(self, name):
        if name in ["ponderation"]:
            warn(
                DeprecationWarning(
                    f'Operator scale_fc: Input name "{name}" is deprecated in favor of "weights".'
                )
            )
            return self.weights
        raise AttributeError(
            f"'{self.__class__.__name__}' object has no attribute '{name}'."
        )


class OutputsScaleFc(_Outputs):
    """Intermediate class used to get outputs from
    scale_fc operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.scale_fc()
    >>> # Connect inputs : op.inputs. ...
    >>> result_fields_container = op.outputs.fields_container()
    """

    def __init__(self, op: Operator):
        super().__init__(scale_fc._spec().outputs, op)
        self._fields_container = Output(scale_fc._spec().output_pin(0), 0, op)
        self._outputs.append(self._fields_container)

    @property
    def fields_container(self) -> Output:
        r"""Allows to get fields_container output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.scale_fc()
        >>> # Get the output from op.outputs. ...
        >>> result_fields_container = op.outputs.fields_container()
        """
        return self._fields_container
