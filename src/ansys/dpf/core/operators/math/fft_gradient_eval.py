"""
fft_gradient_eval

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class fft_gradient_eval(Operator):
    r"""Evaluate min max based on the fast fourier transform at a given field,
    using gradient method for adaptative time step.


    Parameters
    ----------
    fields_container: FieldsContainer
    time_scoping: Scoping, optional
        if specified only the results at these set ids are used
    fs_ratio: int, optional
        default value = 20

    Returns
    -------
    coefficients: FieldsContainer

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.math.fft_gradient_eval()

    >>> # Make input connections
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_time_scoping = dpf.Scoping()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_fs_ratio = int()
    >>> op.inputs.fs_ratio.connect(my_fs_ratio)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.math.fft_gradient_eval(
    ...     fields_container=my_fields_container,
    ...     time_scoping=my_time_scoping,
    ...     fs_ratio=my_fs_ratio,
    ... )

    >>> # Get output data
    >>> result_coefficients = op.outputs.coefficients()
    """

    def __init__(
        self,
        fields_container=None,
        time_scoping=None,
        fs_ratio=None,
        config=None,
        server=None,
    ):
        super().__init__(name="fft_eval_gr", config=config, server=server)
        self._inputs = InputsFftGradientEval(self)
        self._outputs = OutputsFftGradientEval(self)
        if fields_container is not None:
            self.inputs.fields_container.connect(fields_container)
        if time_scoping is not None:
            self.inputs.time_scoping.connect(time_scoping)
        if fs_ratio is not None:
            self.inputs.fs_ratio.connect(fs_ratio)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Evaluate min max based on the fast fourier transform at a given field,
using gradient method for adaptative time step.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="fields_container",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="time_scoping",
                    type_names=["scoping"],
                    optional=True,
                    document=r"""if specified only the results at these set ids are used""",
                ),
                2: PinSpecification(
                    name="fs_ratio",
                    type_names=["int32"],
                    optional=True,
                    document=r"""default value = 20""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="coefficients",
                    type_names=["fields_container"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="fft_eval_gr", server=server)

    @property
    def inputs(self) -> InputsFftGradientEval:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsFftGradientEval.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsFftGradientEval:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsFftGradientEval.
        """
        return super().outputs


class InputsFftGradientEval(_Inputs):
    """Intermediate class used to connect user inputs to
    fft_gradient_eval operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.fft_gradient_eval()
    >>> my_fields_container = dpf.FieldsContainer()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_time_scoping = dpf.Scoping()
    >>> op.inputs.time_scoping.connect(my_time_scoping)
    >>> my_fs_ratio = int()
    >>> op.inputs.fs_ratio.connect(my_fs_ratio)
    """

    def __init__(self, op: Operator):
        super().__init__(fft_gradient_eval._spec().inputs, op)
        self._fields_container = Input(
            fft_gradient_eval._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._fields_container)
        self._time_scoping = Input(fft_gradient_eval._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._time_scoping)
        self._fs_ratio = Input(fft_gradient_eval._spec().input_pin(2), 2, op, -1)
        self._inputs.append(self._fs_ratio)

    @property
    def fields_container(self) -> Input:
        r"""Allows to connect fields_container input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.fft_gradient_eval()
        >>> op.inputs.fields_container.connect(my_fields_container)
        >>> # or
        >>> op.inputs.fields_container(my_fields_container)
        """
        return self._fields_container

    @property
    def time_scoping(self) -> Input:
        r"""Allows to connect time_scoping input to the operator.

        if specified only the results at these set ids are used

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.fft_gradient_eval()
        >>> op.inputs.time_scoping.connect(my_time_scoping)
        >>> # or
        >>> op.inputs.time_scoping(my_time_scoping)
        """
        return self._time_scoping

    @property
    def fs_ratio(self) -> Input:
        r"""Allows to connect fs_ratio input to the operator.

        default value = 20

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.fft_gradient_eval()
        >>> op.inputs.fs_ratio.connect(my_fs_ratio)
        >>> # or
        >>> op.inputs.fs_ratio(my_fs_ratio)
        """
        return self._fs_ratio


class OutputsFftGradientEval(_Outputs):
    """Intermediate class used to get outputs from
    fft_gradient_eval operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.math.fft_gradient_eval()
    >>> # Connect inputs : op.inputs. ...
    >>> result_coefficients = op.outputs.coefficients()
    """

    def __init__(self, op: Operator):
        super().__init__(fft_gradient_eval._spec().outputs, op)
        self._coefficients = Output(fft_gradient_eval._spec().output_pin(0), 0, op)
        self._outputs.append(self._coefficients)

    @property
    def coefficients(self) -> Output:
        r"""Allows to get coefficients output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.math.fft_gradient_eval()
        >>> # Get the output from op.outputs. ...
        >>> result_coefficients = op.outputs.coefficients()
        """
        return self._coefficients
