"""
{{class_name}}

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
{{#has_internal_name_alias}}
from ansys.dpf.core.core import errors
{{/has_internal_name_alias}}
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
{{#outputs}}
from ansys.dpf.core.outputs import Output, _Outputs
{{/outputs}}
{{^outputs}}
from ansys.dpf.core.outputs import _Outputs
{{/outputs}}
{{#multiple_output_types}}
from ansys.dpf.core.outputs import _modify_output_spec_with_one_type
{{/multiple_output_types}}
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class {{class_name}}(Operator):
    r"""{{{docstring}}}

    Parameters
    ----------
    {{#input_pins}}
    {{#optional}}
    {{name}}:{{#types_for_docstring}} {{types_for_docstring}},{{/types_for_docstring}} optional
    {{/optional}}
    {{^optional}}
    {{name}}:{{#types_for_docstring}} {{types_for_docstring}}{{/types_for_docstring}}
    {{/optional}}
    {{#document_pin_docstring}}
        {{{document_pin_docstring}}}
    {{/document_pin_docstring}}
    {{/input_pins}}

    Returns
    -------
    {{#output_pins}}
    {{#optional}}
    {{name}}:{{#types_for_docstring}} {{types_for_docstring}},{{/types_for_docstring}} optional
    {{/optional}}
    {{^optional}}
    {{name}}:{{#types_for_docstring}} {{types_for_docstring}}{{/types_for_docstring}}
    {{/optional}}
    {{#document_pin_docstring}}
        {{{document_pin_docstring}}}
    {{/document_pin_docstring}}
    {{/output_pins}}

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.{{category}}.{{class_name}}()

    >>> # Make input connections
    {{#input_pins}}
    >>> my_{{name}} = {{^built_in_main_type}}dpf.{{/built_in_main_type}}{{main_type}}()
    >>> op.inputs.{{name}}.connect(my_{{name}})
    {{/input_pins}}

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.{{category}}.{{class_name}}(
    {{#input_pins}}
    ...     {{name}}=my_{{name}},
    {{/input_pins}}
    ... )

    {{#outputs}}
    >>> # Get output data
    {{#output_pins}}
    >>> result_{{name}} = op.outputs.{{name}}()
    {{/output_pins}}
    {{/outputs}}
    """

    def __init__(self, {{#input_pins}}{{name}}=None, {{/input_pins}}config=None, server=None{{#has_input_aliases}}, {{#input_pins}}{{#aliases_list}}{{alias}}=None, {{/aliases_list}}{{/input_pins}}{{/has_input_aliases}}):
        {{^has_internal_name_alias}}
        super().__init__(name="{{operator_name}}", config=config, server=server)
        {{/has_internal_name_alias}}
        {{#has_internal_name_alias}}
        try:
            super().__init__(name="{{operator_name}}", config=config, server=server)
        except (KeyError, errors.DPFServerException) as e:
            if "doesn't exist in the registry" in str(e):
                super().__init__(name="{{internal_name_alias}}", config=config, server=server)
            else:
                raise e
        {{/has_internal_name_alias}}
        self._inputs = Inputs{{capital_class_name}}(self)
        self._outputs = Outputs{{capital_class_name}}(self)
        {{#input_pins}}
        if {{name}} is not None:
            self.inputs.{{name}}.connect({{name}})
        {{#has_input_aliases}}
        {{#aliases_list}}
        elif {{alias}} is not None:
            warn(DeprecationWarning(f"Operator {{class_name}}: Input name \"{{alias}}\" is deprecated in favor of \"{{name}}\"."))
            self.inputs.{{name}}.connect({{alias}})
        {{/aliases_list}}
        {{/has_input_aliases}}
        {{/input_pins}}

    @staticmethod
    def _spec() -> Specification:
        description = r"""{{{specification_description}}}"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                {{#input_pins}}
                {{id}}: PinSpecification(
                    name="{{pin_name}}",
                    {{#has_types}}
                    type_names={{{types}}},
                    {{/has_types}}
                    {{^has_types}}
                    type_names=["any"],
                    {{/has_types}}
                    optional={{optional}},
                    document=r"""{{{document}}}""",
                    {{#has_derived_class}}
                    name_derived_class=["{{{derived_type_name}}}"],
                    {{/has_derived_class}}
                    {{#has_aliases}}
                    aliases={{{aliases}}},
                    {{/has_aliases}}
                ),
                {{/input_pins}}
            },
            map_output_pin_spec={
                {{#output_pins}}
                {{id}}: PinSpecification(
                    name="{{name}}",
                    {{#has_types}}
                    type_names={{{types}}},
                    {{/has_types}}
                    optional={{optional}},
                    document=r"""{{{document}}}""",
                    {{#has_derived_class}}
                    name_derived_class=["{{{derived_type_name}}}"],
                    {{/has_derived_class}}
                    {{#has_aliases}}
                    aliases={{{aliases}}},
                    {{/has_aliases}}
                ),
                {{/output_pins}}
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="{{operator_name}}", server=server)

    @property
    def inputs(self) -> Inputs{{capital_class_name}}:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of Inputs{{capital_class_name}}.
        """
        return super().inputs

    @property
    def outputs(self) -> Outputs{{capital_class_name}}:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of Outputs{{capital_class_name}}.
        """
        return super().outputs


class Inputs{{capital_class_name}}(_Inputs):
    """Intermediate class used to connect user inputs to
    {{class_name}} operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.{{category}}.{{class_name}}()
    {{#input_pins}}
    >>> my_{{name}} = {{^built_in_main_type}}dpf.{{/built_in_main_type}}{{main_type}}()
    >>> op.inputs.{{name}}.connect(my_{{name}})
    {{/input_pins}}
    """

    def __init__(self, op: Operator):
        super().__init__({{class_name}}._spec().inputs, op)
        {{#input_pins}}
        self._{{name}} = Input({{class_name}}._spec().input_pin({{id}}), {{id}}, op, {{ellipsis}})
        self._inputs.append(self._{{name}})
        {{/input_pins}}
    {{#input_pins}}

    @property
    def {{name}}(self) -> Input:
        r"""Allows to connect {{name}} input to the operator.
        {{#document_pin_docstring}}

        {{{document_pin_docstring}}}
        {{/document_pin_docstring}}

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.{{category}}.{{class_name}}()
        >>> op.inputs.{{name}}.connect(my_{{name}})
        >>> # or
        >>> op.inputs.{{name}}(my_{{name}})
        """
        return self._{{name}}
    {{/input_pins}}
    {{#has_input_aliases}}

    def __getattr__(self, name):
        {{#input_pins}}
        {{#has_aliases}}
        if name in {{{aliases}}}:
            warn(DeprecationWarning(f"Operator {{class_name}}: Input name \"{name}\" is deprecated in favor of \"{{name}}\"."))
            return self.{{name}}
        {{/has_aliases}}
        {{/input_pins}}
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'.")
    {{/has_input_aliases}}


class Outputs{{capital_class_name}}(_Outputs):
    """Intermediate class used to get outputs from
    {{class_name}} operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.{{category}}.{{class_name}}()
    >>> # Connect inputs : op.inputs. ...
    {{#output_pins}}
    >>> result_{{name}} = op.outputs.{{name}}()
    {{/output_pins}}
    """

    def __init__(self, op: Operator):
        super().__init__({{class_name}}._spec().outputs, op)
        {{#output_pins}}
        {{#multiple_types}}
        {{#printable_type_names}}
        self.{{name}}_as_{{.}} = Output(_modify_output_spec_with_one_type({{class_name}}._spec().output_pin({{id}}), "{{.}}"), {{id}}, op) 
        self._outputs.append(self.{{name}}_as_{{.}})
        {{/printable_type_names}}
        {{/multiple_types}}
        {{^multiple_types}}
        self._{{name}} = Output({{class_name}}._spec().output_pin({{id}}), {{id}}, op)
        self._outputs.append(self._{{name}})
        {{/multiple_types}}
        {{/output_pins}}
{{#output_pins}}
{{^multiple_types}}

    @property
    def {{name}}(self) -> Output:
        r"""Allows to get {{name}} output of the operator
        {{#document_pin_docstring}}

        {{{document_pin_docstring}}}
        {{/document_pin_docstring}}

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.{{category}}.{{class_name}}()
        >>> # Get the output from op.outputs. ...
        >>> result_{{name}} = op.outputs.{{name}}()
        """
        return self._{{name}}
{{/multiple_types}}{{/output_pins}}
{{#has_output_aliases}}

    def __getattr__(self, name):
        {{#output_pins}}
        {{#has_aliases}}
        if name in {{{aliases}}}:
            warn(DeprecationWarning(f"Operator {{class_name}}: Output name \"{name}\" is deprecated in favor of \"{{name}}\"."))
            return self.{{name}}
        {{/has_aliases}}
        {{/output_pins}}
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'.")
{{/has_output_aliases}}
