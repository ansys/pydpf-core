"""
serializer

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class serializer(Operator):
    r"""Take any input and serialize them in a file.


    Parameters
    ----------
    stream_type: int
        0 for ASCII (default), and 1 for binary
    file_path: str
    any_input1: Any
        any input
    any_input2: Any
        any input

    Returns
    -------
    file_path: str

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.serialization.serializer()

    >>> # Make input connections
    >>> my_stream_type = int()
    >>> op.inputs.stream_type.connect(my_stream_type)
    >>> my_file_path = str()
    >>> op.inputs.file_path.connect(my_file_path)
    >>> my_any_input1 = dpf.Any()
    >>> op.inputs.any_input1.connect(my_any_input1)
    >>> my_any_input2 = dpf.Any()
    >>> op.inputs.any_input2.connect(my_any_input2)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.serialization.serializer(
    ...     stream_type=my_stream_type,
    ...     file_path=my_file_path,
    ...     any_input1=my_any_input1,
    ...     any_input2=my_any_input2,
    ... )

    >>> # Get output data
    >>> result_file_path = op.outputs.file_path()
    """

    def __init__(
        self,
        stream_type=None,
        file_path=None,
        any_input1=None,
        any_input2=None,
        config=None,
        server=None,
    ):
        super().__init__(name="serializer", config=config, server=server)
        self._inputs = InputsSerializer(self)
        self._outputs = OutputsSerializer(self)
        if stream_type is not None:
            self.inputs.stream_type.connect(stream_type)
        if file_path is not None:
            self.inputs.file_path.connect(file_path)
        if any_input1 is not None:
            self.inputs.any_input1.connect(any_input1)
        if any_input2 is not None:
            self.inputs.any_input2.connect(any_input2)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Take any input and serialize them in a file.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                -1: PinSpecification(
                    name="stream_type",
                    type_names=["int32"],
                    optional=False,
                    document=r"""0 for ASCII (default), and 1 for binary""",
                ),
                0: PinSpecification(
                    name="file_path",
                    type_names=["string"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="any_input",
                    type_names=["any"],
                    optional=False,
                    document=r"""any input""",
                ),
                2: PinSpecification(
                    name="any_input",
                    type_names=["any"],
                    optional=False,
                    document=r"""any input""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="file_path",
                    type_names=["string"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="serializer", server=server)

    @property
    def inputs(self) -> InputsSerializer:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsSerializer.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsSerializer:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsSerializer.
        """
        return super().outputs


class InputsSerializer(_Inputs):
    """Intermediate class used to connect user inputs to
    serializer operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.serializer()
    >>> my_stream_type = int()
    >>> op.inputs.stream_type.connect(my_stream_type)
    >>> my_file_path = str()
    >>> op.inputs.file_path.connect(my_file_path)
    >>> my_any_input1 = dpf.Any()
    >>> op.inputs.any_input1.connect(my_any_input1)
    >>> my_any_input2 = dpf.Any()
    >>> op.inputs.any_input2.connect(my_any_input2)
    """

    def __init__(self, op: Operator):
        super().__init__(serializer._spec().inputs, op)
        self._stream_type = Input(serializer._spec().input_pin(-1), -1, op, -1)
        self._inputs.append(self._stream_type)
        self._file_path = Input(serializer._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._file_path)
        self._any_input1 = Input(serializer._spec().input_pin(1), 1, op, 0)
        self._inputs.append(self._any_input1)
        self._any_input2 = Input(serializer._spec().input_pin(2), 2, op, 1)
        self._inputs.append(self._any_input2)

    @property
    def stream_type(self) -> Input:
        r"""Allows to connect stream_type input to the operator.

        0 for ASCII (default), and 1 for binary

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.serializer()
        >>> op.inputs.stream_type.connect(my_stream_type)
        >>> # or
        >>> op.inputs.stream_type(my_stream_type)
        """
        return self._stream_type

    @property
    def file_path(self) -> Input:
        r"""Allows to connect file_path input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.serializer()
        >>> op.inputs.file_path.connect(my_file_path)
        >>> # or
        >>> op.inputs.file_path(my_file_path)
        """
        return self._file_path

    @property
    def any_input1(self) -> Input:
        r"""Allows to connect any_input1 input to the operator.

        any input

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.serializer()
        >>> op.inputs.any_input1.connect(my_any_input1)
        >>> # or
        >>> op.inputs.any_input1(my_any_input1)
        """
        return self._any_input1

    @property
    def any_input2(self) -> Input:
        r"""Allows to connect any_input2 input to the operator.

        any input

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.serializer()
        >>> op.inputs.any_input2.connect(my_any_input2)
        >>> # or
        >>> op.inputs.any_input2(my_any_input2)
        """
        return self._any_input2


class OutputsSerializer(_Outputs):
    """Intermediate class used to get outputs from
    serializer operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.serializer()
    >>> # Connect inputs : op.inputs. ...
    >>> result_file_path = op.outputs.file_path()
    """

    def __init__(self, op: Operator):
        super().__init__(serializer._spec().outputs, op)
        self._file_path = Output(serializer._spec().output_pin(0), 0, op)
        self._outputs.append(self._file_path)

    @property
    def file_path(self) -> Output:
        r"""Allows to get file_path output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.serializer()
        >>> # Get the output from op.outputs. ...
        >>> result_file_path = op.outputs.file_path()
        """
        return self._file_path
