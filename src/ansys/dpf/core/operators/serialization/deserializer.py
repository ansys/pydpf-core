"""
deserializer

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class deserializer(Operator):
    r"""Takes a file generated by the serializer and deserializes it into DPFâ€™s
    entities.


    Parameters
    ----------
    stream_type: int
        0 for ASCII (default), and 1 for binary
    file_path: str
        file path

    Returns
    -------
    any_output1: Any
        number and types of outputs corresponding of the inputs used in the serialization
    any_output2: Any
        number and types of outputs corresponding of the inputs used in the serialization

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.serialization.deserializer()

    >>> # Make input connections
    >>> my_stream_type = int()
    >>> op.inputs.stream_type.connect(my_stream_type)
    >>> my_file_path = str()
    >>> op.inputs.file_path.connect(my_file_path)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.serialization.deserializer(
    ...     stream_type=my_stream_type,
    ...     file_path=my_file_path,
    ... )

    >>> # Get output data
    >>> result_any_output1 = op.outputs.any_output1()
    >>> result_any_output2 = op.outputs.any_output2()
    """

    def __init__(self, stream_type=None, file_path=None, config=None, server=None):
        super().__init__(name="deserializer", config=config, server=server)
        self._inputs = InputsDeserializer(self)
        self._outputs = OutputsDeserializer(self)
        if stream_type is not None:
            self.inputs.stream_type.connect(stream_type)
        if file_path is not None:
            self.inputs.file_path.connect(file_path)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Takes a file generated by the serializer and deserializes it into DPFâ€™s
entities.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                -1: PinSpecification(
                    name="stream_type",
                    type_names=["int32"],
                    optional=False,
                    document=r"""0 for ASCII (default), and 1 for binary""",
                ),
                0: PinSpecification(
                    name="file_path",
                    type_names=["string"],
                    optional=False,
                    document=r"""file path""",
                ),
            },
            map_output_pin_spec={
                1: PinSpecification(
                    name="any_output1",
                    type_names=["any"],
                    optional=False,
                    document=r"""number and types of outputs corresponding of the inputs used in the serialization""",
                ),
                2: PinSpecification(
                    name="any_output2",
                    type_names=["any"],
                    optional=False,
                    document=r"""number and types of outputs corresponding of the inputs used in the serialization""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="deserializer", server=server)

    @property
    def inputs(self) -> InputsDeserializer:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsDeserializer.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsDeserializer:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsDeserializer.
        """
        return super().outputs


class InputsDeserializer(_Inputs):
    """Intermediate class used to connect user inputs to
    deserializer operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.deserializer()
    >>> my_stream_type = int()
    >>> op.inputs.stream_type.connect(my_stream_type)
    >>> my_file_path = str()
    >>> op.inputs.file_path.connect(my_file_path)
    """

    def __init__(self, op: Operator):
        super().__init__(deserializer._spec().inputs, op)
        self._stream_type = Input(deserializer._spec().input_pin(-1), -1, op, -1)
        self._inputs.append(self._stream_type)
        self._file_path = Input(deserializer._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._file_path)

    @property
    def stream_type(self) -> Input:
        r"""Allows to connect stream_type input to the operator.

        0 for ASCII (default), and 1 for binary

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.deserializer()
        >>> op.inputs.stream_type.connect(my_stream_type)
        >>> # or
        >>> op.inputs.stream_type(my_stream_type)
        """
        return self._stream_type

    @property
    def file_path(self) -> Input:
        r"""Allows to connect file_path input to the operator.

        file path

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.deserializer()
        >>> op.inputs.file_path.connect(my_file_path)
        >>> # or
        >>> op.inputs.file_path(my_file_path)
        """
        return self._file_path


class OutputsDeserializer(_Outputs):
    """Intermediate class used to get outputs from
    deserializer operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.deserializer()
    >>> # Connect inputs : op.inputs. ...
    >>> result_any_output1 = op.outputs.any_output1()
    >>> result_any_output2 = op.outputs.any_output2()
    """

    def __init__(self, op: Operator):
        super().__init__(deserializer._spec().outputs, op)
        self._any_output1 = Output(deserializer._spec().output_pin(1), 1, op)
        self._outputs.append(self._any_output1)
        self._any_output2 = Output(deserializer._spec().output_pin(2), 2, op)
        self._outputs.append(self._any_output2)

    @property
    def any_output1(self) -> Output:
        r"""Allows to get any_output1 output of the operator

        number and types of outputs corresponding of the inputs used in the serialization

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.deserializer()
        >>> # Get the output from op.outputs. ...
        >>> result_any_output1 = op.outputs.any_output1()
        """
        return self._any_output1

    @property
    def any_output2(self) -> Output:
        r"""Allows to get any_output2 output of the operator

        number and types of outputs corresponding of the inputs used in the serialization

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.deserializer()
        >>> # Get the output from op.outputs. ...
        >>> result_any_output2 = op.outputs.any_output2()
        """
        return self._any_output2
