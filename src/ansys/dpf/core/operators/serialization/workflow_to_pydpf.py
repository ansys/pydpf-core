"""
workflow_to_pydpf

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class workflow_to_pydpf(Operator):
    r"""Generates a PyDPF script that can recreate the given workflow. The
    script is returned as a string, and can optionally be saved to a
    specified path.


    Parameters
    ----------
    workflow: Workflow
    output_path: str, optional

    Returns
    -------
    pydpf_code: str

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.serialization.workflow_to_pydpf()

    >>> # Make input connections
    >>> my_workflow = dpf.Workflow()
    >>> op.inputs.workflow.connect(my_workflow)
    >>> my_output_path = str()
    >>> op.inputs.output_path.connect(my_output_path)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.serialization.workflow_to_pydpf(
    ...     workflow=my_workflow,
    ...     output_path=my_output_path,
    ... )

    >>> # Get output data
    >>> result_pydpf_code = op.outputs.pydpf_code()
    """

    def __init__(self, workflow=None, output_path=None, config=None, server=None):
        super().__init__(name="workflow_to_pydpf", config=config, server=server)
        self._inputs = InputsWorkflowToPydpf(self)
        self._outputs = OutputsWorkflowToPydpf(self)
        if workflow is not None:
            self.inputs.workflow.connect(workflow)
        if output_path is not None:
            self.inputs.output_path.connect(output_path)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Generates a PyDPF script that can recreate the given workflow. The
script is returned as a string, and can optionally be saved to a
specified path.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="workflow",
                    type_names=["workflow"],
                    optional=False,
                    document=r"""""",
                ),
                1: PinSpecification(
                    name="output_path",
                    type_names=["string"],
                    optional=True,
                    document=r"""""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="pydpf_code",
                    type_names=["string"],
                    optional=False,
                    document=r"""""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="workflow_to_pydpf", server=server)

    @property
    def inputs(self) -> InputsWorkflowToPydpf:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsWorkflowToPydpf.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsWorkflowToPydpf:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsWorkflowToPydpf.
        """
        return super().outputs


class InputsWorkflowToPydpf(_Inputs):
    """Intermediate class used to connect user inputs to
    workflow_to_pydpf operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.workflow_to_pydpf()
    >>> my_workflow = dpf.Workflow()
    >>> op.inputs.workflow.connect(my_workflow)
    >>> my_output_path = str()
    >>> op.inputs.output_path.connect(my_output_path)
    """

    def __init__(self, op: Operator):
        super().__init__(workflow_to_pydpf._spec().inputs, op)
        self._workflow = Input(workflow_to_pydpf._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._workflow)
        self._output_path = Input(workflow_to_pydpf._spec().input_pin(1), 1, op, -1)
        self._inputs.append(self._output_path)

    @property
    def workflow(self) -> Input:
        r"""Allows to connect workflow input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.workflow_to_pydpf()
        >>> op.inputs.workflow.connect(my_workflow)
        >>> # or
        >>> op.inputs.workflow(my_workflow)
        """
        return self._workflow

    @property
    def output_path(self) -> Input:
        r"""Allows to connect output_path input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.workflow_to_pydpf()
        >>> op.inputs.output_path.connect(my_output_path)
        >>> # or
        >>> op.inputs.output_path(my_output_path)
        """
        return self._output_path


class OutputsWorkflowToPydpf(_Outputs):
    """Intermediate class used to get outputs from
    workflow_to_pydpf operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.workflow_to_pydpf()
    >>> # Connect inputs : op.inputs. ...
    >>> result_pydpf_code = op.outputs.pydpf_code()
    """

    def __init__(self, op: Operator):
        super().__init__(workflow_to_pydpf._spec().outputs, op)
        self._pydpf_code = Output(workflow_to_pydpf._spec().output_pin(0), 0, op)
        self._outputs.append(self._pydpf_code)

    @property
    def pydpf_code(self) -> Output:
        r"""Allows to get pydpf_code output of the operator

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.workflow_to_pydpf()
        >>> # Get the output from op.outputs. ...
        >>> result_pydpf_code = op.outputs.pydpf_code()
        """
        return self._pydpf_code
