"""
export_mesh_with_prime
======================
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class export_mesh_with_prime(Operator):
    """Transfer DPF's meshed region into an external layer prime model and
    serialize it into a given file format.

    Parameters
    ----------
    path : str
        Path(with the file extension) to export
    mesh : MeshedRegion


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.serialization.export_mesh_with_prime()

    >>> # Make input connections
    >>> my_path = str()
    >>> op.inputs.path.connect(my_path)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.serialization.export_mesh_with_prime(
    ...     path=my_path,
    ...     mesh=my_mesh,
    ... )

    """

    def __init__(self, path=None, mesh=None, config=None, server=None):
        super().__init__(
            name="serialization::export_mesh_with_prime", config=config, server=server
        )
        self._inputs = InputsExportMeshWithPrime(self)
        self._outputs = OutputsExportMeshWithPrime(self)
        if path is not None:
            self.inputs.path.connect(path)
        if mesh is not None:
            self.inputs.mesh.connect(mesh)

    @staticmethod
    def _spec():
        description = """Transfer DPF's meshed region into an external layer prime model and
            serialize it into a given file format."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                0: PinSpecification(
                    name="path",
                    type_names=["string"],
                    optional=False,
                    document="""Path(with the file extension) to export""",
                ),
                7: PinSpecification(
                    name="mesh",
                    type_names=["abstract_meshed_region"],
                    optional=False,
                    document="""""",
                ),
            },
            map_output_pin_spec={},
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="serialization::export_mesh_with_prime", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsExportMeshWithPrime
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsExportMeshWithPrime
        """
        return super().outputs


class InputsExportMeshWithPrime(_Inputs):
    """Intermediate class used to connect user inputs to
    export_mesh_with_prime operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.export_mesh_with_prime()
    >>> my_path = str()
    >>> op.inputs.path.connect(my_path)
    >>> my_mesh = dpf.MeshedRegion()
    >>> op.inputs.mesh.connect(my_mesh)
    """

    def __init__(self, op: Operator):
        super().__init__(export_mesh_with_prime._spec().inputs, op)
        self._path = Input(export_mesh_with_prime._spec().input_pin(0), 0, op, -1)
        self._inputs.append(self._path)
        self._mesh = Input(export_mesh_with_prime._spec().input_pin(7), 7, op, -1)
        self._inputs.append(self._mesh)

    @property
    def path(self):
        """Allows to connect path input to the operator.

        Path(with the file extension) to export

        Parameters
        ----------
        my_path : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.export_mesh_with_prime()
        >>> op.inputs.path.connect(my_path)
        >>> # or
        >>> op.inputs.path(my_path)
        """
        return self._path

    @property
    def mesh(self):
        """Allows to connect mesh input to the operator.

        Parameters
        ----------
        my_mesh : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.export_mesh_with_prime()
        >>> op.inputs.mesh.connect(my_mesh)
        >>> # or
        >>> op.inputs.mesh(my_mesh)
        """
        return self._mesh


class OutputsExportMeshWithPrime(_Outputs):
    """Intermediate class used to get outputs from
    export_mesh_with_prime operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.export_mesh_with_prime()
    >>> # Connect inputs : op.inputs. ...
    """

    def __init__(self, op: Operator):
        super().__init__(export_mesh_with_prime._spec().outputs, op)
