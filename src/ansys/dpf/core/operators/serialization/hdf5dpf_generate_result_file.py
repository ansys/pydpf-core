"""
hdf5dpf_generate_result_file
============================
Autogenerated DPF operator classes.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification


class hdf5dpf_generate_result_file(Operator):
    """Generate a dpf result file from provided information.

    Parameters
    ----------
    export_floats : bool, optional
        Converts double to float to reduce file size
        (default is true)
    filename : str
        Name of the output file that will be
        generated (utf8).
    mesh_provider_out : MeshedRegion, optional
        Defines the meshedregion that is exported and
        provided by meshprovider.
    time_freq_support_out : TimeFreqSupport, optional
        Defines the timefreqsupport that is exported
        and provided by
        timefreqsupportprovider.
    ansys_unit_system_id : int, optional
        Defines the unitsystem the results are
        exported with.
    input_name1 : str or Any, optional
        Set of even and odd pins to serialize
        results. odd pins (4, 6, 8...) are
        strings, and they represent the names
        of the results to be serialized. even
        pins (5, 7, 9...) are dpf types, and
        they represent the results to be
        serialized. they should go in pairs
        (for each result name, there should
        be a result) and connected
        sequentially.
    input_name2 : str or Any, optional
        Set of even and odd pins to serialize
        results. odd pins (4, 6, 8...) are
        strings, and they represent the names
        of the results to be serialized. even
        pins (5, 7, 9...) are dpf types, and
        they represent the results to be
        serialized. they should go in pairs
        (for each result name, there should
        be a result) and connected
        sequentially.


    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()

    >>> # Make input connections
    >>> my_export_floats = bool()
    >>> op.inputs.export_floats.connect(my_export_floats)
    >>> my_filename = str()
    >>> op.inputs.filename.connect(my_filename)
    >>> my_mesh_provider_out = dpf.MeshedRegion()
    >>> op.inputs.mesh_provider_out.connect(my_mesh_provider_out)
    >>> my_time_freq_support_out = dpf.TimeFreqSupport()
    >>> op.inputs.time_freq_support_out.connect(my_time_freq_support_out)
    >>> my_ansys_unit_system_id = int()
    >>> op.inputs.ansys_unit_system_id.connect(my_ansys_unit_system_id)
    >>> my_input_name1 = str()
    >>> op.inputs.input_name1.connect(my_input_name1)
    >>> my_input_name2 = str()
    >>> op.inputs.input_name2.connect(my_input_name2)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file(
    ...     export_floats=my_export_floats,
    ...     filename=my_filename,
    ...     mesh_provider_out=my_mesh_provider_out,
    ...     time_freq_support_out=my_time_freq_support_out,
    ...     ansys_unit_system_id=my_ansys_unit_system_id,
    ...     input_name1=my_input_name1,
    ...     input_name2=my_input_name2,
    ... )

    >>> # Get output data
    >>> result_data_sources = op.outputs.data_sources()
    """

    def __init__(
        self,
        export_floats=None,
        filename=None,
        mesh_provider_out=None,
        time_freq_support_out=None,
        ansys_unit_system_id=None,
        input_name1=None,
        input_name2=None,
        config=None,
        server=None,
    ):
        super().__init__(
            name="hdf5::h5dpf::make_result_file", config=config, server=server
        )
        self._inputs = InputsHdf5DpfGenerateResultFile(self)
        self._outputs = OutputsHdf5DpfGenerateResultFile(self)
        if export_floats is not None:
            self.inputs.export_floats.connect(export_floats)
        if filename is not None:
            self.inputs.filename.connect(filename)
        if mesh_provider_out is not None:
            self.inputs.mesh_provider_out.connect(mesh_provider_out)
        if time_freq_support_out is not None:
            self.inputs.time_freq_support_out.connect(time_freq_support_out)
        if ansys_unit_system_id is not None:
            self.inputs.ansys_unit_system_id.connect(ansys_unit_system_id)
        if input_name1 is not None:
            self.inputs.input_name1.connect(input_name1)
        if input_name2 is not None:
            self.inputs.input_name2.connect(input_name2)

    @staticmethod
    def _spec():
        description = """Generate a dpf result file from provided information."""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                -1: PinSpecification(
                    name="export_floats",
                    type_names=["bool"],
                    optional=True,
                    document="""Converts double to float to reduce file size
        (default is true)""",
                ),
                0: PinSpecification(
                    name="filename",
                    type_names=["string"],
                    optional=False,
                    document="""Name of the output file that will be
        generated (utf8).""",
                ),
                1: PinSpecification(
                    name="mesh_provider_out",
                    type_names=["abstract_meshed_region"],
                    optional=True,
                    document="""Defines the meshedregion that is exported and
        provided by meshprovider.""",
                ),
                2: PinSpecification(
                    name="time_freq_support_out",
                    type_names=["time_freq_support"],
                    optional=True,
                    document="""Defines the timefreqsupport that is exported
        and provided by
        timefreqsupportprovider.""",
                ),
                3: PinSpecification(
                    name="ansys_unit_system_id",
                    type_names=["int32"],
                    optional=True,
                    document="""Defines the unitsystem the results are
        exported with.""",
                ),
                4: PinSpecification(
                    name="input_name",
                    type_names=["string", "any"],
                    optional=True,
                    document="""Set of even and odd pins to serialize
        results. odd pins (4, 6, 8...) are
        strings, and they represent the names
        of the results to be serialized. even
        pins (5, 7, 9...) are dpf types, and
        they represent the results to be
        serialized. they should go in pairs
        (for each result name, there should
        be a result) and connected
        sequentially.""",
                ),
                5: PinSpecification(
                    name="input_name",
                    type_names=["string", "any"],
                    optional=True,
                    document="""Set of even and odd pins to serialize
        results. odd pins (4, 6, 8...) are
        strings, and they represent the names
        of the results to be serialized. even
        pins (5, 7, 9...) are dpf types, and
        they represent the results to be
        serialized. they should go in pairs
        (for each result name, there should
        be a result) and connected
        sequentially.""",
                ),
            },
            map_output_pin_spec={
                0: PinSpecification(
                    name="data_sources",
                    type_names=["data_sources"],
                    optional=False,
                    document="""Data_sources filed with the h5 generated file
        path.""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server=None):
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server : server.DPFServer, optional
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.
        """
        return Operator.default_config(
            name="hdf5::h5dpf::make_result_file", server=server
        )

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : InputsHdf5DpfGenerateResultFile
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs : OutputsHdf5DpfGenerateResultFile
        """
        return super().outputs


class InputsHdf5DpfGenerateResultFile(_Inputs):
    """Intermediate class used to connect user inputs to
    hdf5dpf_generate_result_file operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
    >>> my_export_floats = bool()
    >>> op.inputs.export_floats.connect(my_export_floats)
    >>> my_filename = str()
    >>> op.inputs.filename.connect(my_filename)
    >>> my_mesh_provider_out = dpf.MeshedRegion()
    >>> op.inputs.mesh_provider_out.connect(my_mesh_provider_out)
    >>> my_time_freq_support_out = dpf.TimeFreqSupport()
    >>> op.inputs.time_freq_support_out.connect(my_time_freq_support_out)
    >>> my_ansys_unit_system_id = int()
    >>> op.inputs.ansys_unit_system_id.connect(my_ansys_unit_system_id)
    >>> my_input_name1 = str()
    >>> op.inputs.input_name1.connect(my_input_name1)
    >>> my_input_name2 = str()
    >>> op.inputs.input_name2.connect(my_input_name2)
    """

    def __init__(self, op: Operator):
        super().__init__(hdf5dpf_generate_result_file._spec().inputs, op)
        self._export_floats = Input(
            hdf5dpf_generate_result_file._spec().input_pin(-1), -1, op, -1
        )
        self._inputs.append(self._export_floats)
        self._filename = Input(
            hdf5dpf_generate_result_file._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._filename)
        self._mesh_provider_out = Input(
            hdf5dpf_generate_result_file._spec().input_pin(1), 1, op, -1
        )
        self._inputs.append(self._mesh_provider_out)
        self._time_freq_support_out = Input(
            hdf5dpf_generate_result_file._spec().input_pin(2), 2, op, -1
        )
        self._inputs.append(self._time_freq_support_out)
        self._ansys_unit_system_id = Input(
            hdf5dpf_generate_result_file._spec().input_pin(3), 3, op, -1
        )
        self._inputs.append(self._ansys_unit_system_id)
        self._input_name1 = Input(
            hdf5dpf_generate_result_file._spec().input_pin(4), 4, op, 0
        )
        self._inputs.append(self._input_name1)
        self._input_name2 = Input(
            hdf5dpf_generate_result_file._spec().input_pin(5), 5, op, 1
        )
        self._inputs.append(self._input_name2)

    @property
    def export_floats(self):
        """Allows to connect export_floats input to the operator.

        Converts double to float to reduce file size
        (default is true)

        Parameters
        ----------
        my_export_floats : bool

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
        >>> op.inputs.export_floats.connect(my_export_floats)
        >>> # or
        >>> op.inputs.export_floats(my_export_floats)
        """
        return self._export_floats

    @property
    def filename(self):
        """Allows to connect filename input to the operator.

        Name of the output file that will be
        generated (utf8).

        Parameters
        ----------
        my_filename : str

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
        >>> op.inputs.filename.connect(my_filename)
        >>> # or
        >>> op.inputs.filename(my_filename)
        """
        return self._filename

    @property
    def mesh_provider_out(self):
        """Allows to connect mesh_provider_out input to the operator.

        Defines the meshedregion that is exported and
        provided by meshprovider.

        Parameters
        ----------
        my_mesh_provider_out : MeshedRegion

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
        >>> op.inputs.mesh_provider_out.connect(my_mesh_provider_out)
        >>> # or
        >>> op.inputs.mesh_provider_out(my_mesh_provider_out)
        """
        return self._mesh_provider_out

    @property
    def time_freq_support_out(self):
        """Allows to connect time_freq_support_out input to the operator.

        Defines the timefreqsupport that is exported
        and provided by
        timefreqsupportprovider.

        Parameters
        ----------
        my_time_freq_support_out : TimeFreqSupport

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
        >>> op.inputs.time_freq_support_out.connect(my_time_freq_support_out)
        >>> # or
        >>> op.inputs.time_freq_support_out(my_time_freq_support_out)
        """
        return self._time_freq_support_out

    @property
    def ansys_unit_system_id(self):
        """Allows to connect ansys_unit_system_id input to the operator.

        Defines the unitsystem the results are
        exported with.

        Parameters
        ----------
        my_ansys_unit_system_id : int

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
        >>> op.inputs.ansys_unit_system_id.connect(my_ansys_unit_system_id)
        >>> # or
        >>> op.inputs.ansys_unit_system_id(my_ansys_unit_system_id)
        """
        return self._ansys_unit_system_id

    @property
    def input_name1(self):
        """Allows to connect input_name1 input to the operator.

        Set of even and odd pins to serialize
        results. odd pins (4, 6, 8...) are
        strings, and they represent the names
        of the results to be serialized. even
        pins (5, 7, 9...) are dpf types, and
        they represent the results to be
        serialized. they should go in pairs
        (for each result name, there should
        be a result) and connected
        sequentially.

        Parameters
        ----------
        my_input_name1 : str or Any

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
        >>> op.inputs.input_name1.connect(my_input_name1)
        >>> # or
        >>> op.inputs.input_name1(my_input_name1)
        """
        return self._input_name1

    @property
    def input_name2(self):
        """Allows to connect input_name2 input to the operator.

        Set of even and odd pins to serialize
        results. odd pins (4, 6, 8...) are
        strings, and they represent the names
        of the results to be serialized. even
        pins (5, 7, 9...) are dpf types, and
        they represent the results to be
        serialized. they should go in pairs
        (for each result name, there should
        be a result) and connected
        sequentially.

        Parameters
        ----------
        my_input_name2 : str or Any

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
        >>> op.inputs.input_name2.connect(my_input_name2)
        >>> # or
        >>> op.inputs.input_name2(my_input_name2)
        """
        return self._input_name2


class OutputsHdf5DpfGenerateResultFile(_Outputs):
    """Intermediate class used to get outputs from
    hdf5dpf_generate_result_file operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
    >>> # Connect inputs : op.inputs. ...
    >>> result_data_sources = op.outputs.data_sources()
    """

    def __init__(self, op: Operator):
        super().__init__(hdf5dpf_generate_result_file._spec().outputs, op)
        self._data_sources = Output(
            hdf5dpf_generate_result_file._spec().output_pin(0), 0, op
        )
        self._outputs.append(self._data_sources)

    @property
    def data_sources(self):
        """Allows to get data_sources output of the operator

        Returns
        ----------
        my_data_sources : DataSources

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.hdf5dpf_generate_result_file()
        >>> # Connect inputs : op.inputs. ...
        >>> result_data_sources = op.outputs.data_sources()
        """  # noqa: E501
        return self._data_sources
