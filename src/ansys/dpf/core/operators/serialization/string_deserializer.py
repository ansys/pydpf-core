"""
string_deserializer

Autogenerated DPF operator classes.
"""

from __future__ import annotations

from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
from ansys.dpf.core.outputs import Output, _Outputs
from ansys.dpf.core.operators.specification import PinSpecification, Specification
from ansys.dpf.core.config import Config
from ansys.dpf.core.server_types import AnyServerType


class string_deserializer(Operator):
    r"""Takes a string generated by the serializer and deserializes it into
    DPFâ€™s entities.


    Parameters
    ----------
    stream_type: int
        0 for string (default), and 1 for binary
    serialized_string: str

    Returns
    -------
    any_output1: Any
        number and types of outputs corresponding of the inputs used in the serialization
    any_output2: Any
        number and types of outputs corresponding of the inputs used in the serialization

    Examples
    --------
    >>> from ansys.dpf import core as dpf

    >>> # Instantiate operator
    >>> op = dpf.operators.serialization.string_deserializer()

    >>> # Make input connections
    >>> my_stream_type = int()
    >>> op.inputs.stream_type.connect(my_stream_type)
    >>> my_serialized_string = str()
    >>> op.inputs.serialized_string.connect(my_serialized_string)

    >>> # Instantiate operator and connect inputs in one line
    >>> op = dpf.operators.serialization.string_deserializer(
    ...     stream_type=my_stream_type,
    ...     serialized_string=my_serialized_string,
    ... )

    >>> # Get output data
    >>> result_any_output1 = op.outputs.any_output1()
    >>> result_any_output2 = op.outputs.any_output2()
    """

    def __init__(
        self, stream_type=None, serialized_string=None, config=None, server=None
    ):
        super().__init__(name="string_deserializer", config=config, server=server)
        self._inputs = InputsStringDeserializer(self)
        self._outputs = OutputsStringDeserializer(self)
        if stream_type is not None:
            self.inputs.stream_type.connect(stream_type)
        if serialized_string is not None:
            self.inputs.serialized_string.connect(serialized_string)

    @staticmethod
    def _spec() -> Specification:
        description = r"""Takes a string generated by the serializer and deserializes it into
DPFâ€™s entities.
"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                -1: PinSpecification(
                    name="stream_type",
                    type_names=["int32"],
                    optional=False,
                    document=r"""0 for string (default), and 1 for binary""",
                ),
                0: PinSpecification(
                    name="serialized_string",
                    type_names=["string"],
                    optional=False,
                    document=r"""""",
                ),
            },
            map_output_pin_spec={
                1: PinSpecification(
                    name="any_output1",
                    type_names=["any"],
                    optional=False,
                    document=r"""number and types of outputs corresponding of the inputs used in the serialization""",
                ),
                2: PinSpecification(
                    name="any_output2",
                    type_names=["any"],
                    optional=False,
                    document=r"""number and types of outputs corresponding of the inputs used in the serialization""",
                ),
            },
        )
        return spec

    @staticmethod
    def default_config(server: AnyServerType = None) -> Config:
        """Returns the default config of the operator.

        This config can then be changed to the user needs and be used to
        instantiate the operator. The Configuration allows to customize
        how the operation will be processed by the operator.

        Parameters
        ----------
        server:
            Server with channel connected to the remote or local instance. When
            ``None``, attempts to use the global server.

        Returns
        -------
        config:
            A new Config instance equivalent to the default config for this operator.
        """
        return Operator.default_config(name="string_deserializer", server=server)

    @property
    def inputs(self) -> InputsStringDeserializer:
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs:
            An instance of InputsStringDeserializer.
        """
        return super().inputs

    @property
    def outputs(self) -> OutputsStringDeserializer:
        """Enables to get outputs of the operator by evaluating it

        Returns
        --------
        outputs:
            An instance of OutputsStringDeserializer.
        """
        return super().outputs


class InputsStringDeserializer(_Inputs):
    """Intermediate class used to connect user inputs to
    string_deserializer operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.string_deserializer()
    >>> my_stream_type = int()
    >>> op.inputs.stream_type.connect(my_stream_type)
    >>> my_serialized_string = str()
    >>> op.inputs.serialized_string.connect(my_serialized_string)
    """

    def __init__(self, op: Operator):
        super().__init__(string_deserializer._spec().inputs, op)
        self._stream_type = Input(string_deserializer._spec().input_pin(-1), -1, op, -1)
        self._inputs.append(self._stream_type)
        self._serialized_string = Input(
            string_deserializer._spec().input_pin(0), 0, op, -1
        )
        self._inputs.append(self._serialized_string)

    @property
    def stream_type(self) -> Input:
        r"""Allows to connect stream_type input to the operator.

        0 for string (default), and 1 for binary

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.string_deserializer()
        >>> op.inputs.stream_type.connect(my_stream_type)
        >>> # or
        >>> op.inputs.stream_type(my_stream_type)
        """
        return self._stream_type

    @property
    def serialized_string(self) -> Input:
        r"""Allows to connect serialized_string input to the operator.

        Returns
        -------
        input:
            An Input instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.string_deserializer()
        >>> op.inputs.serialized_string.connect(my_serialized_string)
        >>> # or
        >>> op.inputs.serialized_string(my_serialized_string)
        """
        return self._serialized_string


class OutputsStringDeserializer(_Outputs):
    """Intermediate class used to get outputs from
    string_deserializer operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.serialization.string_deserializer()
    >>> # Connect inputs : op.inputs. ...
    >>> result_any_output1 = op.outputs.any_output1()
    >>> result_any_output2 = op.outputs.any_output2()
    """

    def __init__(self, op: Operator):
        super().__init__(string_deserializer._spec().outputs, op)
        self._any_output1 = Output(string_deserializer._spec().output_pin(1), 1, op)
        self._outputs.append(self._any_output1)
        self._any_output2 = Output(string_deserializer._spec().output_pin(2), 2, op)
        self._outputs.append(self._any_output2)

    @property
    def any_output1(self) -> Output:
        r"""Allows to get any_output1 output of the operator

        number and types of outputs corresponding of the inputs used in the serialization

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.string_deserializer()
        >>> # Get the output from op.outputs. ...
        >>> result_any_output1 = op.outputs.any_output1()
        """
        return self._any_output1

    @property
    def any_output2(self) -> Output:
        r"""Allows to get any_output2 output of the operator

        number and types of outputs corresponding of the inputs used in the serialization

        Returns
        -------
        output:
            An Output instance for this pin.

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.serialization.string_deserializer()
        >>> # Get the output from op.outputs. ...
        >>> result_any_output2 = op.outputs.any_output2()
        """
        return self._any_output2
