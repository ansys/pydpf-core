





:class:`AvailableResult`
========================

.. py:class:: ansys.dpf.core.available_result.AvailableResult(availableresult)

   Represents a result that can be requested via an operator.

   :param availableresult:
   :type availableresult: available_result_pb2.AvailableResult message.

   .. rubric:: Examples

   Explore an available result from the model.

   >>> from ansys.dpf import core as dpf
   >>> from ansys.dpf.core import examples
   >>> transient = examples.download_transient_result()
   >>> model = dpf.Model(transient)
   >>> result_info = model.metadata.result_info
   >>> res = result_info.available_results[0]
   >>> res.name
   'displacement'
   >>> res.homogeneity
   'length'
   >>> res.dimensionality
   'vector'

   Create the operator of the given available result.

   >>> disp = model.results.displacement()





.. py:currentmodule:: AvailableResult

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~name`
            - Result operator.
          * - :py:attr:`~n_components`
            - Number of components of the result.
          * - :py:attr:`~dimensionality`
            - Dimensionality nature of the result, such as a vector, scalar, or tensor.
          * - :py:attr:`~homogeneity`
            - Homogeneity of the result.
          * - :py:attr:`~unit`
            - Unit of the result.
          * - :py:attr:`~operator_name`
            - Name of the corresponding operator.
          * - :py:attr:`~sub_results`
            - List of the subresult.
          * - :py:attr:`~native_location`
            - Native location of the result.
          * - :py:attr:`~native_scoping_location`
            - Native scoping location of the result.
          * - :py:attr:`~physical_name`
            - Name of the result with spaces.
          * - :py:attr:`~qualifiers`
            - Returns the list of qualifiers (equivalent to label spaces) available for a given Result.
          * - :py:attr:`~qualifier_labels`
            - Returns a dictionary of available labels for each available qualifier.
          * - :py:attr:`~qualifier_combinations`
            - Returns the list of valid qualifier combinations for this result.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - Construct an informal string representation of available result.
          * - :py:attr:`~__repr__`
            - Construct a formal string representation of available result.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.available_result import AvailableResult

Property detail
---------------

.. py:property:: name

   Result operator.

.. py:property:: n_components

   Number of components of the result.

.. py:property:: dimensionality

   Dimensionality nature of the result, such as a vector, scalar, or tensor.

.. py:property:: homogeneity

   Homogeneity of the result.

.. py:property:: unit

   Unit of the result.

.. py:property:: operator_name

   Name of the corresponding operator.

.. py:property:: sub_results

   List of the subresult.

.. py:property:: native_location

   Native location of the result.

.. py:property:: native_scoping_location

   Native scoping location of the result.

.. py:property:: physical_name
   :type: str


   Name of the result with spaces.

.. py:property:: qualifiers
   :type: list


   Returns the list of qualifiers (equivalent to label spaces) available for a given Result.

   These qualifiers can then be used to request the result
   on specified locations/properties.

.. py:property:: qualifier_labels
   :type: dict


   Returns a dictionary of available labels for each available qualifier.

.. py:property:: qualifier_combinations
   :type: List[dict]


   Returns the list of valid qualifier combinations for this result.

   Each combination is a dictionary which can be used for a result request.




Method detail
-------------

.. py:method:: __str__()

   Construct an informal string representation of available result.

   :returns: Informal string representation of available result.
   :rtype: str


.. py:method:: __repr__()

   Construct a formal string representation of available result.

   :returns: Formal string representation of available result.
   :rtype: str





