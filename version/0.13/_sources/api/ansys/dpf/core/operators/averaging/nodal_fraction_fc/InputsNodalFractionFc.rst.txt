





:class:`InputsNodalFractionFc`
==============================

.. py:class:: ansys.dpf.core.operators.averaging.nodal_fraction_fc.InputsNodalFractionFc(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   nodal_fraction_fc operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.nodal_fraction_fc()
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> my_denominator = dpf.FieldsContainer()
   >>> op.inputs.denominator.connect(my_denominator)






.. py:currentmodule:: InputsNodalFractionFc

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~scoping`
            - Allows to connect scoping input to the operator.
          * - :py:attr:`~denominator`
            - Allows to connect denominator input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.nodal_fraction_fc import InputsNodalFractionFc

Property detail
---------------

.. py:property:: fields_container
   :type: ansys.dpf.core.inputs.Input


   Allows to connect fields_container input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.nodal_fraction_fc()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: mesh
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mesh input to the operator.

   The mesh region in this pin is used to perform the averaging. It is used if there is no fields support.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.nodal_fraction_fc()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect scoping input to the operator.

   Average only on these nodes. If it is a scoping container, the label must correspond to the one of the fields containers.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.nodal_fraction_fc()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> # or
   >>> op.inputs.scoping(my_scoping)

.. py:property:: denominator
   :type: ansys.dpf.core.inputs.Input


   Allows to connect denominator input to the operator.

   If a fields container is set in this pin, it is used as the denominator of the fraction instead of elemental_nodal_To_nodal_fc.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.nodal_fraction_fc()
   >>> op.inputs.denominator.connect(my_denominator)
   >>> # or
   >>> op.inputs.denominator(my_denominator)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




