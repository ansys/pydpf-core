





:class:`InputsMapdlSection`
===========================

.. py:class:: ansys.dpf.core.operators.result.mapdl_section.InputsMapdlSection(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   mapdl_section operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.mapdl_section()
   >>> my_properties_name = str()
   >>> op.inputs.properties_name.connect(my_properties_name)
   >>> my_section = dpf.PropertyField()
   >>> op.inputs.section.connect(my_section)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_layer_property = bool()
   >>> op.inputs.layer_property.connect(my_layer_property)
   >>> my_layers_requested = dpf.()
   >>> op.inputs.layers_requested.connect(my_layers_requested)






.. py:currentmodule:: InputsMapdlSection

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~properties_name`
            - Allows to connect properties_name input to the operator.
          * - :py:attr:`~section`
            - Allows to connect section input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~layer_property`
            - Allows to connect layer_property input to the operator.
          * - :py:attr:`~layers_requested`
            - Allows to connect layers_requested input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.mapdl_section import InputsMapdlSection

Property detail
---------------

.. py:property:: properties_name
   :type: ansys.dpf.core.inputs.Input


   Allows to connect properties_name input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.mapdl_section()
   >>> op.inputs.properties_name.connect(my_properties_name)
   >>> # or
   >>> op.inputs.properties_name(my_properties_name)

.. py:property:: section
   :type: ansys.dpf.core.inputs.Input


   Allows to connect section input to the operator.

   Property field that contains a section id per element.(optional)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.mapdl_section()
   >>> op.inputs.section.connect(my_section)
   >>> # or
   >>> op.inputs.section(my_section)

.. py:property:: streams_container
   :type: ansys.dpf.core.inputs.Input


   Allows to connect streams_container input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.mapdl_section()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources
   :type: ansys.dpf.core.inputs.Input


   Allows to connect data_sources input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.mapdl_section()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: layer_property
   :type: ansys.dpf.core.inputs.Input


   Allows to connect layer_property input to the operator.

   Property requested is layered. Default = False.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.mapdl_section()
   >>> op.inputs.layer_property.connect(my_layer_property)
   >>> # or
   >>> op.inputs.layer_property(my_layer_property)

.. py:property:: layers_requested
   :type: ansys.dpf.core.inputs.Input


   Allows to connect layers_requested input to the operator.

   Array with layers requested for the section. Default = AllLayers.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.mapdl_section()
   >>> op.inputs.layers_requested.connect(my_layers_requested)
   >>> # or
   >>> op.inputs.layers_requested(my_layers_requested)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




