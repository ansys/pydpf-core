





:class:`InputsWriteMotionDfmfFile`
==================================

.. py:class:: ansys.dpf.core.operators.result.write_motion_dfmf_file.InputsWriteMotionDfmfFile(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   write_motion_dfmf_file operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> my_model_data = dpf.PropertyField()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> my_mode_shapes = dpf.FieldsContainer()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> my_lumped_mass = dpf.FieldsContainer()
   >>> op.inputs.lumped_mass.connect(my_lumped_mass)
   >>> my_field_coordinates = dpf.Field()
   >>> op.inputs.field_coordinates.connect(my_field_coordinates)
   >>> my_nod = dpf.()
   >>> op.inputs.nod.connect(my_nod)
   >>> my_used_node_index = dpf.()
   >>> op.inputs.used_node_index.connect(my_used_node_index)
   >>> my_eigenvalue = dpf.()
   >>> op.inputs.eigenvalue.connect(my_eigenvalue)
   >>> my_translational_mode_shape = dpf.()
   >>> op.inputs.translational_mode_shape.connect(my_translational_mode_shape)
   >>> my_rotational_mode_shape = dpf.()
   >>> op.inputs.rotational_mode_shape.connect(my_rotational_mode_shape)
   >>> my_invrt_1 = float()
   >>> op.inputs.invrt_1.connect(my_invrt_1)
   >>> my_invrt_2 = dpf.()
   >>> op.inputs.invrt_2.connect(my_invrt_2)
   >>> my_invrt_3 = dpf.()
   >>> op.inputs.invrt_3.connect(my_invrt_3)
   >>> my_invrt_4 = dpf.()
   >>> op.inputs.invrt_4.connect(my_invrt_4)
   >>> my_invrt_5 = dpf.()
   >>> op.inputs.invrt_5.connect(my_invrt_5)
   >>> my_invrt_6 = dpf.()
   >>> op.inputs.invrt_6.connect(my_invrt_6)
   >>> my_invrt_7 = dpf.()
   >>> op.inputs.invrt_7.connect(my_invrt_7)
   >>> my_invrt_8 = dpf.()
   >>> op.inputs.invrt_8.connect(my_invrt_8)
   >>> my_dfmffile_path = str()
   >>> op.inputs.dfmffile_path.connect(my_dfmffile_path)
   >>> my_rstfile_path = str()
   >>> op.inputs.rstfile_path.connect(my_rstfile_path)






.. py:currentmodule:: InputsWriteMotionDfmfFile

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~model_data`
            - Allows to connect model_data input to the operator.
          * - :py:attr:`~mode_shapes`
            - Allows to connect mode_shapes input to the operator.
          * - :py:attr:`~lumped_mass`
            - Allows to connect lumped_mass input to the operator.
          * - :py:attr:`~field_coordinates`
            - Allows to connect field_coordinates input to the operator.
          * - :py:attr:`~nod`
            - Allows to connect nod input to the operator.
          * - :py:attr:`~used_node_index`
            - Allows to connect used_node_index input to the operator.
          * - :py:attr:`~eigenvalue`
            - Allows to connect eigenvalue input to the operator.
          * - :py:attr:`~translational_mode_shape`
            - Allows to connect translational_mode_shape input to the operator.
          * - :py:attr:`~rotational_mode_shape`
            - Allows to connect rotational_mode_shape input to the operator.
          * - :py:attr:`~invrt_1`
            - Allows to connect invrt_1 input to the operator.
          * - :py:attr:`~invrt_2`
            - Allows to connect invrt_2 input to the operator.
          * - :py:attr:`~invrt_3`
            - Allows to connect invrt_3 input to the operator.
          * - :py:attr:`~invrt_4`
            - Allows to connect invrt_4 input to the operator.
          * - :py:attr:`~invrt_5`
            - Allows to connect invrt_5 input to the operator.
          * - :py:attr:`~invrt_6`
            - Allows to connect invrt_6 input to the operator.
          * - :py:attr:`~invrt_7`
            - Allows to connect invrt_7 input to the operator.
          * - :py:attr:`~invrt_8`
            - Allows to connect invrt_8 input to the operator.
          * - :py:attr:`~dfmffile_path`
            - Allows to connect dfmffile_path input to the operator.
          * - :py:attr:`~rstfile_path`
            - Allows to connect rstfile_path input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.write_motion_dfmf_file import InputsWriteMotionDfmfFile

Property detail
---------------

.. py:property:: model_data
   :type: ansys.dpf.core.inputs.Input


   Allows to connect model_data input to the operator.

   data describing the finite element model

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> # or
   >>> op.inputs.model_data(my_model_data)

.. py:property:: mode_shapes
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mode_shapes input to the operator.

   FieldsContainers containing the mode shapes, which are CST and NOR for the cms method

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> # or
   >>> op.inputs.mode_shapes(my_mode_shapes)

.. py:property:: lumped_mass
   :type: ansys.dpf.core.inputs.Input


   Allows to connect lumped_mass input to the operator.

   FieldsContainers containing the lumped mass

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.lumped_mass.connect(my_lumped_mass)
   >>> # or
   >>> op.inputs.lumped_mass(my_lumped_mass)

.. py:property:: field_coordinates
   :type: ansys.dpf.core.inputs.Input


   Allows to connect field_coordinates input to the operator.

   coordinates of all nodes

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.field_coordinates.connect(my_field_coordinates)
   >>> # or
   >>> op.inputs.field_coordinates(my_field_coordinates)

.. py:property:: nod
   :type: ansys.dpf.core.inputs.Input


   Allows to connect nod input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.nod.connect(my_nod)
   >>> # or
   >>> op.inputs.nod(my_nod)

.. py:property:: used_node_index
   :type: ansys.dpf.core.inputs.Input


   Allows to connect used_node_index input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.used_node_index.connect(my_used_node_index)
   >>> # or
   >>> op.inputs.used_node_index(my_used_node_index)

.. py:property:: eigenvalue
   :type: ansys.dpf.core.inputs.Input


   Allows to connect eigenvalue input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.eigenvalue.connect(my_eigenvalue)
   >>> # or
   >>> op.inputs.eigenvalue(my_eigenvalue)

.. py:property:: translational_mode_shape
   :type: ansys.dpf.core.inputs.Input


   Allows to connect translational_mode_shape input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.translational_mode_shape.connect(my_translational_mode_shape)
   >>> # or
   >>> op.inputs.translational_mode_shape(my_translational_mode_shape)

.. py:property:: rotational_mode_shape
   :type: ansys.dpf.core.inputs.Input


   Allows to connect rotational_mode_shape input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.rotational_mode_shape.connect(my_rotational_mode_shape)
   >>> # or
   >>> op.inputs.rotational_mode_shape(my_rotational_mode_shape)

.. py:property:: invrt_1
   :type: ansys.dpf.core.inputs.Input


   Allows to connect invrt_1 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.invrt_1.connect(my_invrt_1)
   >>> # or
   >>> op.inputs.invrt_1(my_invrt_1)

.. py:property:: invrt_2
   :type: ansys.dpf.core.inputs.Input


   Allows to connect invrt_2 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.invrt_2.connect(my_invrt_2)
   >>> # or
   >>> op.inputs.invrt_2(my_invrt_2)

.. py:property:: invrt_3
   :type: ansys.dpf.core.inputs.Input


   Allows to connect invrt_3 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.invrt_3.connect(my_invrt_3)
   >>> # or
   >>> op.inputs.invrt_3(my_invrt_3)

.. py:property:: invrt_4
   :type: ansys.dpf.core.inputs.Input


   Allows to connect invrt_4 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.invrt_4.connect(my_invrt_4)
   >>> # or
   >>> op.inputs.invrt_4(my_invrt_4)

.. py:property:: invrt_5
   :type: ansys.dpf.core.inputs.Input


   Allows to connect invrt_5 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.invrt_5.connect(my_invrt_5)
   >>> # or
   >>> op.inputs.invrt_5(my_invrt_5)

.. py:property:: invrt_6
   :type: ansys.dpf.core.inputs.Input


   Allows to connect invrt_6 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.invrt_6.connect(my_invrt_6)
   >>> # or
   >>> op.inputs.invrt_6(my_invrt_6)

.. py:property:: invrt_7
   :type: ansys.dpf.core.inputs.Input


   Allows to connect invrt_7 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.invrt_7.connect(my_invrt_7)
   >>> # or
   >>> op.inputs.invrt_7(my_invrt_7)

.. py:property:: invrt_8
   :type: ansys.dpf.core.inputs.Input


   Allows to connect invrt_8 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.invrt_8.connect(my_invrt_8)
   >>> # or
   >>> op.inputs.invrt_8(my_invrt_8)

.. py:property:: dfmffile_path
   :type: ansys.dpf.core.inputs.Input


   Allows to connect dfmffile_path input to the operator.

   path with motion dfmf extension where the export occurs

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.dfmffile_path.connect(my_dfmffile_path)
   >>> # or
   >>> op.inputs.dfmffile_path(my_dfmffile_path)

.. py:property:: rstfile_path
   :type: ansys.dpf.core.inputs.Input


   Allows to connect rstfile_path input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.write_motion_dfmf_file()
   >>> op.inputs.rstfile_path.connect(my_rstfile_path)
   >>> # or
   >>> op.inputs.rstfile_path(my_rstfile_path)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




