





:class:`InputsPretension`
=========================

.. py:class:: ansys.dpf.core.operators.result.pretension.InputsPretension(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   pretension operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> my_time_scoping = dpf.ScopingsContainer()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mesh_scoping = dpf.ScopingsContainer()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_read_cyclic = int()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> my_expanded_meshed_region = dpf.MeshedRegion()
   >>> op.inputs.expanded_meshed_region.connect(my_expanded_meshed_region)
   >>> my_sectors_to_expand = dpf.Scoping()
   >>> op.inputs.sectors_to_expand.connect(my_sectors_to_expand)
   >>> my_phi = float()
   >>> op.inputs.phi.connect(my_phi)






.. py:currentmodule:: InputsPretension

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~read_cyclic`
            - Allows to connect read_cyclic input to the operator.
          * - :py:attr:`~expanded_meshed_region`
            - Allows to connect expanded_meshed_region input to the operator.
          * - :py:attr:`~sectors_to_expand`
            - Allows to connect sectors_to_expand input to the operator.
          * - :py:attr:`~phi`
            - Allows to connect phi input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.pretension import InputsPretension

Property detail
---------------

.. py:property:: time_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect time_scoping input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: mesh_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mesh_scoping input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: fields_container
   :type: ansys.dpf.core.inputs.Input


   Allows to connect fields_container input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: streams_container
   :type: ansys.dpf.core.inputs.Input


   Allows to connect streams_container input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources
   :type: ansys.dpf.core.inputs.Input


   Allows to connect data_sources input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: mesh
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mesh input to the operator.

   mesh. If cylic expansion is to be done, mesh of the base sector

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: read_cyclic
   :type: ansys.dpf.core.inputs.Input


   Allows to connect read_cyclic input to the operator.

   if 0 cyclic symmetry is ignored, if 1 cyclic sector is read, if 2 cyclic expansion is done, if 3 cyclic expansion is done and stages are merged (default is 1)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> # or
   >>> op.inputs.read_cyclic(my_read_cyclic)

.. py:property:: expanded_meshed_region
   :type: ansys.dpf.core.inputs.Input


   Allows to connect expanded_meshed_region input to the operator.

   mesh expanded, use if cyclic expansion is to be done.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.expanded_meshed_region.connect(my_expanded_meshed_region)
   >>> # or
   >>> op.inputs.expanded_meshed_region(my_expanded_meshed_region)

.. py:property:: sectors_to_expand
   :type: ansys.dpf.core.inputs.Input


   Allows to connect sectors_to_expand input to the operator.

   sectors to expand (start at 0), for multistage: use scopings container with 'stage' label, use if cyclic expansion is to be done.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.sectors_to_expand.connect(my_sectors_to_expand)
   >>> # or
   >>> op.inputs.sectors_to_expand(my_sectors_to_expand)

.. py:property:: phi
   :type: ansys.dpf.core.inputs.Input


   Allows to connect phi input to the operator.

   angle phi in degrees (default value 0.0), use if cyclic expansion is to be done.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.pretension()
   >>> op.inputs.phi.connect(my_phi)
   >>> # or
   >>> op.inputs.phi(my_phi)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




