





:class:`InputsComputeInvariantTermsRbd`
=======================================

.. py:class:: ansys.dpf.core.operators.result.compute_invariant_terms_rbd.InputsComputeInvariantTermsRbd(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   compute_invariant_terms_rbd operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> my_rom_matrices = dpf.FieldsContainer()
   >>> op.inputs.rom_matrices.connect(my_rom_matrices)
   >>> my_mode_shapes = dpf.FieldsContainer()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> my_lumped_mass = dpf.FieldsContainer()
   >>> op.inputs.lumped_mass.connect(my_lumped_mass)
   >>> my_model_data = dpf.FieldsContainer()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> my_center_of_mass = dpf.FieldsContainer()
   >>> op.inputs.center_of_mass.connect(my_center_of_mass)
   >>> my_inertia_relief = dpf.FieldsContainer()
   >>> op.inputs.inertia_relief.connect(my_inertia_relief)
   >>> my_model_size = float()
   >>> op.inputs.model_size.connect(my_model_size)
   >>> my_field_coordinates = dpf.Field()
   >>> op.inputs.field_coordinates.connect(my_field_coordinates)
   >>> my_nod = dpf.()
   >>> op.inputs.nod.connect(my_nod)
   >>> my_constraint_mode_check = bool()
   >>> op.inputs.constraint_mode_check.connect(my_constraint_mode_check)






.. py:currentmodule:: InputsComputeInvariantTermsRbd

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~rom_matrices`
            - Allows to connect rom_matrices input to the operator.
          * - :py:attr:`~mode_shapes`
            - Allows to connect mode_shapes input to the operator.
          * - :py:attr:`~lumped_mass`
            - Allows to connect lumped_mass input to the operator.
          * - :py:attr:`~model_data`
            - Allows to connect model_data input to the operator.
          * - :py:attr:`~center_of_mass`
            - Allows to connect center_of_mass input to the operator.
          * - :py:attr:`~inertia_relief`
            - Allows to connect inertia_relief input to the operator.
          * - :py:attr:`~model_size`
            - Allows to connect model_size input to the operator.
          * - :py:attr:`~field_coordinates`
            - Allows to connect field_coordinates input to the operator.
          * - :py:attr:`~nod`
            - Allows to connect nod input to the operator.
          * - :py:attr:`~constraint_mode_check`
            - Allows to connect constraint_mode_check input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.compute_invariant_terms_rbd import InputsComputeInvariantTermsRbd

Property detail
---------------

.. py:property:: rom_matrices
   :type: ansys.dpf.core.inputs.Input


   Allows to connect rom_matrices input to the operator.

   FieldsContainers containing the reduced matrices

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.rom_matrices.connect(my_rom_matrices)
   >>> # or
   >>> op.inputs.rom_matrices(my_rom_matrices)

.. py:property:: mode_shapes
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mode_shapes input to the operator.

   FieldsContainers containing the mode shapes, which are CST and NOR for the cms method

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> # or
   >>> op.inputs.mode_shapes(my_mode_shapes)

.. py:property:: lumped_mass
   :type: ansys.dpf.core.inputs.Input


   Allows to connect lumped_mass input to the operator.

   FieldsContainers containing the lumped mass

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.lumped_mass.connect(my_lumped_mass)
   >>> # or
   >>> op.inputs.lumped_mass(my_lumped_mass)

.. py:property:: model_data
   :type: ansys.dpf.core.inputs.Input


   Allows to connect model_data input to the operator.

   data describing the finite element model

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> # or
   >>> op.inputs.model_data(my_model_data)

.. py:property:: center_of_mass
   :type: ansys.dpf.core.inputs.Input


   Allows to connect center_of_mass input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.center_of_mass.connect(my_center_of_mass)
   >>> # or
   >>> op.inputs.center_of_mass(my_center_of_mass)

.. py:property:: inertia_relief
   :type: ansys.dpf.core.inputs.Input


   Allows to connect inertia_relief input to the operator.

   inertia matrix

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.inertia_relief.connect(my_inertia_relief)
   >>> # or
   >>> op.inputs.inertia_relief(my_inertia_relief)

.. py:property:: model_size
   :type: ansys.dpf.core.inputs.Input


   Allows to connect model_size input to the operator.

   model size

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.model_size.connect(my_model_size)
   >>> # or
   >>> op.inputs.model_size(my_model_size)

.. py:property:: field_coordinates
   :type: ansys.dpf.core.inputs.Input


   Allows to connect field_coordinates input to the operator.

   coordinates of all nodes

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.field_coordinates.connect(my_field_coordinates)
   >>> # or
   >>> op.inputs.field_coordinates(my_field_coordinates)

.. py:property:: nod
   :type: ansys.dpf.core.inputs.Input


   Allows to connect nod input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.nod.connect(my_nod)
   >>> # or
   >>> op.inputs.nod(my_nod)

.. py:property:: constraint_mode_check
   :type: ansys.dpf.core.inputs.Input


   Allows to connect constraint_mode_check input to the operator.

   if true, the orthogonality of the constraint modes are checked. Default is false.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()
   >>> op.inputs.constraint_mode_check.connect(my_constraint_mode_check)
   >>> # or
   >>> op.inputs.constraint_mode_check(my_constraint_mode_check)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




