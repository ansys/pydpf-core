





:class:`InputsExpansionPsd`
===========================

.. py:class:: ansys.dpf.core.operators.math.expansion_psd.InputsExpansionPsd(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   expansion_psd operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.expansion_psd()
   >>> my_mode_shapes = dpf.FieldsContainer()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> my_static_shapes = dpf.FieldsContainer()
   >>> op.inputs.static_shapes.connect(my_static_shapes)
   >>> my_rel_rel_covar_matrix = dpf.FieldsContainer()
   >>> op.inputs.rel_rel_covar_matrix.connect(my_rel_rel_covar_matrix)
   >>> my_stat_stat_covar_matrix = dpf.FieldsContainer()
   >>> op.inputs.stat_stat_covar_matrix.connect(my_stat_stat_covar_matrix)
   >>> my_rel_stat_covar_matrix = dpf.FieldsContainer()
   >>> op.inputs.rel_stat_covar_matrix.connect(my_rel_stat_covar_matrix)






.. py:currentmodule:: InputsExpansionPsd

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~mode_shapes`
            - Allows to connect mode_shapes input to the operator.
          * - :py:attr:`~static_shapes`
            - Allows to connect static_shapes input to the operator.
          * - :py:attr:`~rel_rel_covar_matrix`
            - Allows to connect rel_rel_covar_matrix input to the operator.
          * - :py:attr:`~stat_stat_covar_matrix`
            - Allows to connect stat_stat_covar_matrix input to the operator.
          * - :py:attr:`~rel_stat_covar_matrix`
            - Allows to connect rel_stat_covar_matrix input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.expansion_psd import InputsExpansionPsd

Property detail
---------------

.. py:property:: mode_shapes
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mode_shapes input to the operator.

   Fields container containing the mode shapes from modal analysis file: mode shapes for dynamic and pseudo-static displacements

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.expansion_psd()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> # or
   >>> op.inputs.mode_shapes(my_mode_shapes)

.. py:property:: static_shapes
   :type: ansys.dpf.core.inputs.Input


   Allows to connect static_shapes input to the operator.

   Fields container containing the static shapes (base excitations) from spectral analysis file

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.expansion_psd()
   >>> op.inputs.static_shapes.connect(my_static_shapes)
   >>> # or
   >>> op.inputs.static_shapes(my_static_shapes)

.. py:property:: rel_rel_covar_matrix
   :type: ansys.dpf.core.inputs.Input


   Allows to connect rel_rel_covar_matrix input to the operator.

   Fields container containing covariance matrices from a psd file: covariance matrix terms for displacement/velocity/acceleration mode-mode shapes

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.expansion_psd()
   >>> op.inputs.rel_rel_covar_matrix.connect(my_rel_rel_covar_matrix)
   >>> # or
   >>> op.inputs.rel_rel_covar_matrix(my_rel_rel_covar_matrix)

.. py:property:: stat_stat_covar_matrix
   :type: ansys.dpf.core.inputs.Input


   Allows to connect stat_stat_covar_matrix input to the operator.

   Fields container containing covariance matrices from a psd file: covariance matrix terms for displacement/velocity/acceleration static-static shapes

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.expansion_psd()
   >>> op.inputs.stat_stat_covar_matrix.connect(my_stat_stat_covar_matrix)
   >>> # or
   >>> op.inputs.stat_stat_covar_matrix(my_stat_stat_covar_matrix)

.. py:property:: rel_stat_covar_matrix
   :type: ansys.dpf.core.inputs.Input


   Allows to connect rel_stat_covar_matrix input to the operator.

   Fields container containing covariance matrices from a psd file: covariance matrix terms for displacement/velocity/acceleration mode-static shapes

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.expansion_psd()
   >>> op.inputs.rel_stat_covar_matrix.connect(my_rel_stat_covar_matrix)
   >>> # or
   >>> op.inputs.rel_stat_covar_matrix(my_rel_stat_covar_matrix)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




