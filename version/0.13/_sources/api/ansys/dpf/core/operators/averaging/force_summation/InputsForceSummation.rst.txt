





:class:`InputsForceSummation`
=============================

.. py:class:: ansys.dpf.core.operators.averaging.force_summation.InputsForceSummation(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   force_summation operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation()
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_nodal_scoping = dpf.Scoping()
   >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
   >>> my_elemental_scoping = dpf.Scoping()
   >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_force_type = int()
   >>> op.inputs.force_type.connect(my_force_type)
   >>> my_spoint = dpf.Field()
   >>> op.inputs.spoint.connect(my_spoint)






.. py:currentmodule:: InputsForceSummation

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~nodal_scoping`
            - Allows to connect nodal_scoping input to the operator.
          * - :py:attr:`~elemental_scoping`
            - Allows to connect elemental_scoping input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~force_type`
            - Allows to connect force_type input to the operator.
          * - :py:attr:`~spoint`
            - Allows to connect spoint input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.force_summation import InputsForceSummation

Property detail
---------------

.. py:property:: time_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect time_scoping input to the operator.

   default = all time steps

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: nodal_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect nodal_scoping input to the operator.

   Nodal Scoping. Set of nodes in which elemental contribution forces will be accumulated (default = all nodes)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation()
   >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
   >>> # or
   >>> op.inputs.nodal_scoping(my_nodal_scoping)

.. py:property:: elemental_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect elemental_scoping input to the operator.

   Elemental Scoping. Set of elements contributing to the force calcuation. (default = all elements)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation()
   >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
   >>> # or
   >>> op.inputs.elemental_scoping(my_elemental_scoping)

.. py:property:: streams_container
   :type: ansys.dpf.core.inputs.Input


   Allows to connect streams_container input to the operator.

   Streams container. Optional if using data sources.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources
   :type: ansys.dpf.core.inputs.Input


   Allows to connect data_sources input to the operator.

   Data sources. Optional if using a streams container.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: force_type
   :type: ansys.dpf.core.inputs.Input


   Allows to connect force_type input to the operator.

   Type of force to be processed (0 - default: Total forces (static, damping, and inertia)., 1: Static forces, 2: Damping forces, 3: Inertia forces)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation()
   >>> op.inputs.force_type.connect(my_force_type)
   >>> # or
   >>> op.inputs.force_type(my_force_type)

.. py:property:: spoint
   :type: ansys.dpf.core.inputs.Input


   Allows to connect spoint input to the operator.

   Coordinate field of a point for moment summations. Defaults to (0,0,0).

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation()
   >>> op.inputs.spoint.connect(my_spoint)
   >>> # or
   >>> op.inputs.spoint(my_spoint)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




