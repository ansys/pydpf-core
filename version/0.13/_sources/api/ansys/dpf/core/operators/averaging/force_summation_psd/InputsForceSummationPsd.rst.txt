





:class:`InputsForceSummationPsd`
================================

.. py:class:: ansys.dpf.core.operators.averaging.force_summation_psd.InputsForceSummationPsd(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   force_summation_psd operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation_psd()
   >>> my_nodal_scoping = dpf.Scoping()
   >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
   >>> my_elemental_scoping = dpf.Scoping()
   >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
   >>> my_streams = dpf.StreamsContainer()
   >>> op.inputs.streams.connect(my_streams)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_spoint = dpf.Field()
   >>> op.inputs.spoint.connect(my_spoint)
   >>> my_abs_rel_key = dpf.Field()
   >>> op.inputs.abs_rel_key.connect(my_abs_rel_key)
   >>> my_signif = float()
   >>> op.inputs.signif.connect(my_signif)






.. py:currentmodule:: InputsForceSummationPsd

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~nodal_scoping`
            - Allows to connect nodal_scoping input to the operator.
          * - :py:attr:`~elemental_scoping`
            - Allows to connect elemental_scoping input to the operator.
          * - :py:attr:`~streams`
            - Allows to connect streams input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~spoint`
            - Allows to connect spoint input to the operator.
          * - :py:attr:`~abs_rel_key`
            - Allows to connect abs_rel_key input to the operator.
          * - :py:attr:`~signif`
            - Allows to connect signif input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.force_summation_psd import InputsForceSummationPsd

Property detail
---------------

.. py:property:: nodal_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect nodal_scoping input to the operator.

   Nodal Scoping. Set of nodes in which elemental contribution forces will be accumulated. Defaults to all nodes.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation_psd()
   >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
   >>> # or
   >>> op.inputs.nodal_scoping(my_nodal_scoping)

.. py:property:: elemental_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect elemental_scoping input to the operator.

   Elemental Scoping. Set of elements contributing to the force calculation. Defaults to all elements.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation_psd()
   >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
   >>> # or
   >>> op.inputs.elemental_scoping(my_elemental_scoping)

.. py:property:: streams
   :type: ansys.dpf.core.inputs.Input


   Allows to connect streams input to the operator.

   Streams container for RST and PSD files (optional if using data sources). The operator supports both a single RST file and two separate RST files. See data sources pin specifications for details on how to define the streams for both cases.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation_psd()
   >>> op.inputs.streams.connect(my_streams)
   >>> # or
   >>> op.inputs.streams(my_streams)

.. py:property:: data_sources
   :type: ansys.dpf.core.inputs.Input


   Allows to connect data_sources input to the operator.

   Data sources containing RST and PSD files (optional if using a streams container). The operator supports both a single RST file (containing both modal and PSD results) and two separate RST files (one for modal and one for PSD analyses).The data source containing modal results must be defined as an upstream data source.If using a single RST file for PSD and modal analysis, the RST file must be in an upstream data source.If using two separate RST files, only the modal RST must be in an upstream data source.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation_psd()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: spoint
   :type: ansys.dpf.core.inputs.Input


   Allows to connect spoint input to the operator.

   Coordinate field of a point for moment summations. Defaults to (0,0,0).

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation_psd()
   >>> op.inputs.spoint.connect(my_spoint)
   >>> # or
   >>> op.inputs.spoint(my_spoint)

.. py:property:: abs_rel_key
   :type: ansys.dpf.core.inputs.Input


   Allows to connect abs_rel_key input to the operator.

   Key to select the type of response: 0 for relative response (default) or 1 for absolute response.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation_psd()
   >>> op.inputs.abs_rel_key.connect(my_abs_rel_key)
   >>> # or
   >>> op.inputs.abs_rel_key(my_abs_rel_key)

.. py:property:: signif
   :type: ansys.dpf.core.inputs.Input


   Allows to connect signif input to the operator.

   Significance threshold, defaults to 0.0001. Any mode with a significance level above this value will be included in the combination.The significance level is defined as the modal covariance matrix term, divided by the maximum modal covariance matrix term.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.force_summation_psd()
   >>> op.inputs.signif.connect(my_signif)
   >>> # or
   >>> op.inputs.signif(my_signif)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




