





:class:`InputsVtuExport`
========================

.. py:class:: ansys.dpf.core.operators.serialization.vtu_export.InputsVtuExport(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   vtu_export operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> my_directory = str()
   >>> op.inputs.directory.connect(my_directory)
   >>> my_base_name = str()
   >>> op.inputs.base_name.connect(my_base_name)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_fields1 = dpf.Field()
   >>> op.inputs.fields1.connect(my_fields1)
   >>> my_fields2 = dpf.Field()
   >>> op.inputs.fields2.connect(my_fields2)
   >>> my_write_mode = str()
   >>> op.inputs.write_mode.connect(my_write_mode)
   >>> my_as_point_cloud = bool()
   >>> op.inputs.as_point_cloud.connect(my_as_point_cloud)
   >>> my_export_faces = bool()
   >>> op.inputs.export_faces.connect(my_export_faces)
   >>> my_mesh_properties = dpf.StringField()
   >>> op.inputs.mesh_properties.connect(my_mesh_properties)






.. py:currentmodule:: InputsVtuExport

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~directory`
            - Allows to connect directory input to the operator.
          * - :py:attr:`~base_name`
            - Allows to connect base_name input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~fields1`
            - Allows to connect fields1 input to the operator.
          * - :py:attr:`~fields2`
            - Allows to connect fields2 input to the operator.
          * - :py:attr:`~write_mode`
            - Allows to connect write_mode input to the operator.
          * - :py:attr:`~as_point_cloud`
            - Allows to connect as_point_cloud input to the operator.
          * - :py:attr:`~export_faces`
            - Allows to connect export_faces input to the operator.
          * - :py:attr:`~mesh_properties`
            - Allows to connect mesh_properties input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.vtu_export import InputsVtuExport

Property detail
---------------

.. py:property:: directory
   :type: ansys.dpf.core.inputs.Input


   Allows to connect directory input to the operator.

   directory path

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.directory.connect(my_directory)
   >>> # or
   >>> op.inputs.directory(my_directory)

.. py:property:: base_name
   :type: ansys.dpf.core.inputs.Input


   Allows to connect base_name input to the operator.

   vtu base file name, (default is file)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.base_name.connect(my_base_name)
   >>> # or
   >>> op.inputs.base_name(my_base_name)

.. py:property:: mesh
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mesh input to the operator.

   mesh

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: fields1
   :type: ansys.dpf.core.inputs.Input


   Allows to connect fields1 input to the operator.

   Nodal, Face, or Elemental field, fields container (over time), or property field to export. When there is no support available in the exported mesh, that data is ignored.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.fields1.connect(my_fields1)
   >>> # or
   >>> op.inputs.fields1(my_fields1)

.. py:property:: fields2
   :type: ansys.dpf.core.inputs.Input


   Allows to connect fields2 input to the operator.

   Nodal, Face, or Elemental field, fields container (over time), or property field to export. When there is no support available in the exported mesh, that data is ignored.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.fields2.connect(my_fields2)
   >>> # or
   >>> op.inputs.fields2(my_fields2)

.. py:property:: write_mode
   :type: ansys.dpf.core.inputs.Input


   Allows to connect write_mode input to the operator.

   Available are rawbinarycompressed, rawbinary, base64appended, base64inline, ascii, default is (rawbinarycompressed)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.write_mode.connect(my_write_mode)
   >>> # or
   >>> op.inputs.write_mode(my_write_mode)

.. py:property:: as_point_cloud
   :type: ansys.dpf.core.inputs.Input


   Allows to connect as_point_cloud input to the operator.

   Whether to export the mesh as a point cloud. Default is False.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.as_point_cloud.connect(my_as_point_cloud)
   >>> # or
   >>> op.inputs.as_point_cloud(my_as_point_cloud)

.. py:property:: export_faces
   :type: ansys.dpf.core.inputs.Input


   Allows to connect export_faces input to the operator.

   Whether to also export faces as shell elements when the mesh contains cells. Default is False.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.export_faces.connect(my_export_faces)
   >>> # or
   >>> op.inputs.export_faces(my_export_faces)

.. py:property:: mesh_properties
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mesh_properties input to the operator.

   List of names of mesh properties to export.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.mesh_properties.connect(my_mesh_properties)
   >>> # or
   >>> op.inputs.mesh_properties(my_mesh_properties)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




