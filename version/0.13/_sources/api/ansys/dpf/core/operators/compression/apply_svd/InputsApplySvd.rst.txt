





:class:`InputsApplySvd`
=======================

.. py:class:: ansys.dpf.core.operators.compression.apply_svd.InputsApplySvd(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   apply_svd operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> my_field_contaner_to_compress = dpf.FieldsContainer()
   >>> op.inputs.field_contaner_to_compress.connect(my_field_contaner_to_compress)
   >>> my_scalar_int = int()
   >>> op.inputs.scalar_int.connect(my_scalar_int)
   >>> my_scalar_double = float()
   >>> op.inputs.scalar_double.connect(my_scalar_double)
   >>> my_boolean = bool()
   >>> op.inputs.boolean.connect(my_boolean)






.. py:currentmodule:: InputsApplySvd

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field_contaner_to_compress`
            - Allows to connect field_contaner_to_compress input to the operator.
          * - :py:attr:`~scalar_int`
            - Allows to connect scalar_int input to the operator.
          * - :py:attr:`~scalar_double`
            - Allows to connect scalar_double input to the operator.
          * - :py:attr:`~boolean`
            - Allows to connect boolean input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.compression.apply_svd import InputsApplySvd

Property detail
---------------

.. py:property:: field_contaner_to_compress
   :type: ansys.dpf.core.inputs.Input


   Allows to connect field_contaner_to_compress input to the operator.

   fields container to be compressed

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> op.inputs.field_contaner_to_compress.connect(my_field_contaner_to_compress)
   >>> # or
   >>> op.inputs.field_contaner_to_compress(my_field_contaner_to_compress)

.. py:property:: scalar_int
   :type: ansys.dpf.core.inputs.Input


   Allows to connect scalar_int input to the operator.

   number of vectors (r) to keep for the future reconstraction of the matrix A, ex. A[m,n]=coef[m,r]*VT[r,n], where coef=U*Sigma

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> op.inputs.scalar_int.connect(my_scalar_int)
   >>> # or
   >>> op.inputs.scalar_int(my_scalar_int)

.. py:property:: scalar_double
   :type: ansys.dpf.core.inputs.Input


   Allows to connect scalar_double input to the operator.

   threshold (precision) as a double, default value is 1e-7. If both pin1 and pin2 are provided, choose the min r-vectors

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> op.inputs.scalar_double.connect(my_scalar_double)
   >>> # or
   >>> op.inputs.scalar_double(my_scalar_double)

.. py:property:: boolean
   :type: ansys.dpf.core.inputs.Input


   Allows to connect boolean input to the operator.

   apply svd on the initial data (Default : false), otherwise use reduced data (square matrix with the smallest dimensions).

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> op.inputs.boolean.connect(my_boolean)
   >>> # or
   >>> op.inputs.boolean(my_boolean)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




