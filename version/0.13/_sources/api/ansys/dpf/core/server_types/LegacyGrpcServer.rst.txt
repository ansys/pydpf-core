





:class:`LegacyGrpcServer`
=========================

.. py:class:: ansys.dpf.core.server_types.LegacyGrpcServer(ansys_path: Union[str, None] = None, ip: str = LOCALHOST, port: str = DPF_DEFAULT_PORT, timeout: float = 5.0, as_global: bool = True, load_operators: bool = True, launch_server: bool = True, docker_config: ansys.dpf.core.server_factory.DockerConfig = RUNNING_DOCKER, use_pypim: bool = True, context: ansys.dpf.core.server_context.ServerContext = server_context.SERVER_CONTEXT)

   Bases: :py:obj:`BaseServer`


   Provides an instance of the DPF server using InProcess gRPC.

   Kept for backward-compatibility with dpf servers <0.5.0.

   :param ansys_path: Path for the DPF executable.
   :type ansys_path: str
   :param ip: IP address of the remote or local instance to connect to. The
              default is ``"LOCALHOST"``.
   :type ip: str
   :param port: Port to connect to the remote instance on. The default is
                ``"DPF_DEFAULT_PORT"``, which is 50054.
   :type port: int
   :param timeout: Maximum number of seconds for the initialization attempt.
                   The default is ``10``. Once the specified number of seconds
                   passes, the connection fails.
   :type timeout: float, optional
   :param as_global: Global variable that stores the IP address and port for the DPF
                     module. All DPF objects created in this Python session will
                     use this IP and port. The default is ``True``.
   :type as_global: bool, optional
   :param load_operators: Whether to automatically load the math operators. The default
                          is ``True``.
   :type load_operators: bool, optional
   :param launch_server: Whether to launch the server on Windows.
   :type launch_server: bool, optional
   :param docker_config: To start DPF server as a docker, specify the docker name here.
   :type docker_config: server_factory.DockerConfig, optional
   :param use_pypim: Whether to use PyPIM functionalities by default when a PyPIM environment is detected.
                     Defaults to True.
   :type use_pypim: bool, optional







.. py:currentmodule:: LegacyGrpcServer

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~get_api_for_type`
            - Get the API for the given type.
          * - :py:attr:`~create_stub_if_necessary`
            - Create and store a gRPC stub if it doesn't already exist.
          * - :py:attr:`~get_stub`
            - Retrieve the gRPC stub for the given name.
          * - :py:attr:`~shutdown`
            - Shutdown server instance.
          * - :py:attr:`~set_as_global`
            - Set the current server as global if necessary.
          * - :py:attr:`~has_client`
            - Check if server has a connected client.
          * - :py:attr:`~release`
            - Clear the available Operators and Releases licenses when necessary.
          * - :py:attr:`~apply_context`
            - Define the settings that will be used to load DPF's plugins.
          * - :py:attr:`~check_version`
            - Check if the server version matches with a required version.
          * - :py:attr:`~meet_version`
            - Check if the server version matches with a required version.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~client`
            - Get the client instance for the server.
          * - :py:attr:`~available_api_types`
            - Get the list of available API types for the server.
          * - :py:attr:`~ip`
            - IP address of the server.
          * - :py:attr:`~port`
            - Port of the server.
          * - :py:attr:`~external_ip`
            - Public IP address of the server.
          * - :py:attr:`~external_port`
            - Public Port of the server.
          * - :py:attr:`~version`
            - Version of the server.
          * - :py:attr:`~os`
            - Get the operating system of the server.
          * - :py:attr:`~info`
            - Return information about the server instance.
          * - :py:attr:`~local_server`
            - Get whether the server is running locally.
          * - :py:attr:`~config`
            - Get the server configuration for the LegacyGrpcServer server.
          * - :py:attr:`~session`
            - Plan event callbacks from the server, such as progress bars during workflow execution and logging.
          * - :py:attr:`~on_docker`
            - Whether the DPF server should be started in a Docker Container by default.
          * - :py:attr:`~docker_config`
            - Return the docker config associated with the server.
          * - :py:attr:`~context`
            - Returns the settings used to load DPF's plugins.


   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~live`
            - 
          * - :py:attr:`~channel`
            - 
          * - :py:attr:`~ansys_path`
            - 
          * - :py:attr:`~__slots__`
            - 



   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__eq__`
            - Return true, if the ip and the port are equals.
          * - :py:attr:`~__del__`
            - Clean up resources associated with the instance.
          * - :py:attr:`~__str__`
            - Return string representation of the instance.
          * - :py:attr:`~__ne__`
            - Return true, if the servers are not equal.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.server_types import LegacyGrpcServer

Property detail
---------------

.. py:property:: client

   Get the client instance for the server.

   This property returns the current instance of the server itself as the client,
   providing access to the server's functionalities through the `LegacyGrpcServer` instance.

.. py:property:: available_api_types

   Get the list of available API types for the server.

   This property returns the list of API types that are available through
   the current server instance, which are stored in the `_stubs` attribute.

   :returns: A list of available API types (stub objects) for the server.
   :rtype: list

.. py:property:: ip

   IP address of the server.

   :returns: **ip**
   :rtype: str

.. py:property:: port

   Port of the server.

   :returns: **port**
   :rtype: int

.. py:property:: external_ip

   Public IP address of the server.

   Is the same as  :func:`ansys.dpf.core.LegacyGrpcServer.ip` in all cases except
   for servers using a gateway:
   for example, servers running in Docker Images might have an internal
   :func:`ansys.dpf.core.LegacyGrpcServer.ip` different from the public
   :func:`ansys.dpf.core.LegacyGrpcServer.external_ip`, the latter should be used to get
   connected to the server from outside the Docker Image.

   :returns: **external_ip**
   :rtype: str

.. py:property:: external_port

   Public Port of the server.

   Is the same as  :func:`ansys.dpf.core.LegacyGrpcServer.port` in all cases except
   for servers using a gateway:
   for example, servers running in Docker Images might have an internal
   :func:`ansys.dpf.core.LegacyGrpcServer.port` different from the public
   :func:`ansys.dpf.core.LegacyGrpcServer.external_port`, the latter should be used to get
   connected to the server from outside the Docker Image.

   :returns: **port**
   :rtype: int

.. py:property:: version

   Version of the server.

   :returns: **version**
   :rtype: str

.. py:property:: os

   Get the operating system of the server.

   :returns: **os** -- "nt" or "posix"
   :rtype: str

.. py:property:: info

   Return information about the server instance.

.. py:property:: local_server

   Get whether the server is running locally.

   :returns: **local_server** -- True if the server is running locally, False otherwise.
   :rtype: bool

.. py:property:: config

   Get the server configuration for the LegacyGrpcServer server.

   :returns: **config** -- The server configuration for the LegacyGrpcServer server from the AvailableServerConfigs.
   :rtype: AvailableServerConfigs

.. py:property:: session

   Plan event callbacks from the server, such as progress bars during workflow execution and logging.

   :rtype: ansys.dpf.core.session.Session

.. py:property:: on_docker

   Whether the DPF server should be started in a Docker Container by default.

.. py:property:: docker_config

   Return the docker config associated with the server.

.. py:property:: context

   Returns the settings used to load DPF's plugins.

   To update the context server side, use
   :func:`ansys.dpf.core.BaseServer.server_types.apply_context`

   :rtype: ServerContext



Attribute detail
----------------

.. py:attribute:: live
   :value: False


.. py:attribute:: channel
   :value: None


.. py:attribute:: ansys_path
   :value: None


.. py:attribute:: __slots__
   :value: ()




Method detail
-------------

.. py:method:: get_api_for_type(capi, grpcapi)

   Get the API for the given type.


.. py:method:: create_stub_if_necessary(stub_name, stub_type)

   Create and store a gRPC stub if it doesn't already exist.

   This method checks if the specified stub (by `stub_name`) exists. If not, it creates
   the stub using the given `stub_type` and stores it in the `_stubs` dictionary.


.. py:method:: get_stub(stub_name)

   Retrieve the gRPC stub for the given name.

   This method checks if the stub corresponding to `stub_name` exists in the `_stubs`
   dictionary and returns it. If the stub does not exist, it returns `None`.


.. py:method:: shutdown()

   Shutdown server instance.


.. py:method:: __eq__(other_server)

   Return true, if the ip and the port are equals.


.. py:method:: __del__()

   Clean up resources associated with the instance.

   :raises Warning: If an exception occurs while attempting to delete resources.


.. py:method:: set_as_global(as_global=True)

   Set the current server as global if necessary.

   :param as_global: Global variable that stores the IP address and port for the DPF
                     module. All DPF objects created in this Python session will
                     use this IP and port. The default is ``True``.
   :type as_global: bool, optional


.. py:method:: has_client()

   Check if server has a connected client.


.. py:method:: release()

   Clear the available Operators and Releases licenses when necessary.

   .. rubric:: Notes

   Available with server's version starting at 6.0 (Ansys 2023R2).


.. py:method:: apply_context(context)

   Define the settings that will be used to load DPF's plugins.

   A DPF xml file can be used to list the plugins and set up variables.

   :param context: The context allows to choose which capabilities are available server side.
   :type context: ServerContext

   .. rubric:: Notes

   Available with server's version starting at 6.0 (Ansys 2023R2).


.. py:method:: check_version(required_version, msg=None)

   Check if the server version matches with a required version.

   :param required_version: Required version to compare with the server version.
   :type required_version: str
   :param msg: Message for the raised exception if version requirements do not match.
   :type msg: str, optional

   :raises dpf_errors : errors: errors.DpfVersionNotSupported is raised if failure.

   :returns: ``True`` if the server version meets the requirement.
   :rtype: bool


.. py:method:: meet_version(required_version)

   Check if the server version matches with a required version.

   :param required_version: Required version to compare with the server version.
   :type required_version: str

   :returns: ``True`` if the server version meets the requirement.
   :rtype: bool


.. py:method:: __str__()

   Return string representation of the instance.


.. py:method:: __ne__(other_server)

   Return true, if the servers are not equal.





