





:class:`AvailableServerConfigs`
===============================

.. py:class:: ansys.dpf.core.server_factory.AvailableServerConfigs

   Define available server configurations.

   .. attribute:: LegacyGrpcServer = ServerConfig(CommunicationProtocols.gRPC, legacy=True)

      Using gRPC communication through the python module ansys.grpc.dpf.

   .. attribute:: InProcess = ServerConfig(CommunicationProtocols.InProcess, legacy=False)

      Loading DPF in Process.

   .. attribute:: GrpcServer = ServerConfig(CommunicationProtocols.gRPC, legacy=False)

      Using gRPC communication through DPF gRPC CLayer Ans.Dpf.GrpcClient.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> in_process_config = dpf.AvailableServerConfigs.InProcessServer
   >>> grpc_config = dpf.AvailableServerConfigs.GrpcServer
   >>> legacy_grpc_config = dpf.AvailableServerConfigs.LegacyGrpcServer
   >>> in_process_server = dpf.start_local_server(config=in_process_config, as_global=False)  # doctest: +SKIP
   >>> grpc_server = dpf.start_local_server(config=grpc_config, as_global=False)  # doctest: +SKIP
   >>> legacy_grpc_server = dpf.start_local_server(config=legacy_grpc_config, as_global=False)  # doctest: +SKIP



.. py:currentmodule:: AvailableServerConfigs

Overview
--------

.. tab-set::





   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~LegacyGrpcServer`
            - 
          * - :py:attr:`~InProcessServer`
            - 
          * - :py:attr:`~GrpcServer`
            - 






Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.server_factory import AvailableServerConfigs


Attribute detail
----------------

.. py:attribute:: LegacyGrpcServer

.. py:attribute:: InProcessServer

.. py:attribute:: GrpcServer





