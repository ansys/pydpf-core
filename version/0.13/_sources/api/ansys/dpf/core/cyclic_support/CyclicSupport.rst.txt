





:class:`CyclicSupport`
======================

.. py:class:: ansys.dpf.core.cyclic_support.CyclicSupport(cyclic_support, server=None)

   Represents a cyclic support, which describes a model with cyclic symmetry.

   The model has the necessary data for cyclic (and multistage) expansion.

   :param cyclic_support: Cyclic support.
   :type cyclic_support: ansys.grpc.dpf.cyclic_support_pb2.CyclicSupport message
   :param server: Server with the channel connected to the remote or local instance. The default is
                  ``None``, in which case an attempt is made to use the global server.
   :type server: DPFServer , optional

   .. rubric:: Examples

   Get a cyclic support from a model.

   >>> from ansys.dpf import core as dpf
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> model = dpf.Model(multi_stage)
   >>> result_info = model.metadata.result_info
   >>> cyc_support = result_info.cyclic_support
   >>> cyc_support.num_sectors()
   6
   >>> cyc_support.num_stages
   2





.. py:currentmodule:: CyclicSupport

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~num_sectors`
            - Determine number of sectors to expand on 360 degrees.
          * - :py:attr:`~base_nodes_scoping`
            - Retrieve a nodal scoping containing node IDs in the base sector of the given stage.
          * - :py:attr:`~base_elements_scoping`
            - Retrieve an elemental scoping containing elements IDs in the base sector of the given stage.
          * - :py:attr:`~sectors_set_for_expansion`
            - Retrieve a sector's scoping from expanded results and mesh, or list of sectors for default expansion.
          * - :py:attr:`~expand_node_id`
            - Retrieve the node IDs corresponding to the base sector node ID given in the input after expansion.
          * - :py:attr:`~expand_element_id`
            - Retrieve the element IDs corresponding to the base sector element ID given in the input after expansion.
          * - :py:attr:`~cs`
            - Coordinate system of the cyclic support.
          * - :py:attr:`~low_high_map`
            - Retrieve a property field containing node map from low to high base sector of the given stage.
          * - :py:attr:`~high_low_map`
            - Retrieve a property field containing node map from high to low base sector of the given stage.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~num_stages`
            - Number of cyclic stages in the model.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - Describe the entity.
          * - :py:attr:`~__del__`
            - Delete this instance.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.cyclic_support import CyclicSupport

Property detail
---------------

.. py:property:: num_stages
   :type: int


   Number of cyclic stages in the model.

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> cyc_support.num_stages
   2

   :returns: Number of cyclic stages in the model.
   :rtype: int




Method detail
-------------

.. py:method:: __str__()

   Describe the entity.

   :returns: Description of the entity.
   :rtype: str


.. py:method:: num_sectors(stage_num=0) -> int

   Determine number of sectors to expand on 360 degrees.

   :param stage_num: Number of the stages required (from 0 to num_stages).
   :type stage_num: int , optional

   :returns: Number of sectors to expand on 360 degrees.
   :rtype: int

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> cyc_support.num_sectors(0)
   6
   >>> cyc_support.num_sectors(1)
   12


.. py:method:: base_nodes_scoping(stage_num=0) -> ansys.dpf.core.scoping.Scoping

   Retrieve a nodal scoping containing node IDs in the base sector of the given stage.

   :param stage_num: Number of the stage required (from 0 to num_stages).
   :type stage_num: int, optional

   :returns: **base_nodes_scoping** -- Nodes IDs in the base sector of the given stage.
   :rtype: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> base = cyc_support.base_nodes_scoping(0)


.. py:method:: base_elements_scoping(stage_num=0) -> ansys.dpf.core.scoping.Scoping

   Retrieve an elemental scoping containing elements IDs in the base sector of the given stage.

   :param stage_num: Number of the stage required (from 0 to num_stages).
   :type stage_num: int, optional

   :returns: **base_elements_scoping** -- Elements ids in the base sector of the given stage.
   :rtype: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> base = cyc_support.base_elements_scoping(stage_num=1)


.. py:method:: sectors_set_for_expansion(stage_num=0) -> ansys.dpf.core.scoping.Scoping

   Retrieve a sector's scoping from expanded results and mesh, or list of sectors for default expansion.

   A sector's scoping starts from 0, with the maximum equal to num_sectors-1.

   :param stage_num: Number of the stage required (from 0 to num_stages).
   :type stage_num: int, optional

   :returns: **sectors_set_for_expansion** -- List of sectors (starting from 0 to max = num_sectors-1).
   :rtype: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> sectors_scoping = cyc_support.sectors_set_for_expansion(stage_num=1)
   >>> print(sectors_scoping.ids)
   [...0... 1... 2... 3... 4... 5... 6... 7... 8... 9... 10... 11]


.. py:method:: expand_node_id(node_id, sectors=None, stage_num=0)

   Retrieve the node IDs corresponding to the base sector node ID given in the input after expansion.

   :param node_id: Base sector's node ID to expand.
   :type node_id: int
   :param sectors: List of sectors to expand (from 0 to ``num_sectors - 1``).
                   The default is ``None``, in which case all sectors are expanded.
   :type sectors: Scoping , list of int, optional
   :param stage_num: Number of the stage required (from 0 to ``num_stages``).
   :type stage_num: int, optional

   :returns: **sectors_set_for_expansion** -- List of sectors (starting from 0 to ``num_sectors - 1``).
   :rtype: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> expanded_scoping = cyc_support.expand_node_id(1,stage_num=0)
   >>> print(expanded_scoping.ids)
   [...1... 3596... 5816... 8036... 10256... 12476]


.. py:method:: expand_element_id(element_id, sectors=None, stage_num=0)

   Retrieve the element IDs corresponding to the base sector element ID given in the input after expansion.

   :param element_id: Base sector's element ID to expand.
   :type element_id: int
   :param sectors: List of sectors to expand (from 0 to ``num_sectors - 1``).
                   The default is ``None``, in which case all sectors are expanded.
   :type sectors: Scoping or list of int, optional
   :param stage_num: Number of the stage required (from 0 to ``num_stages``).
   :type stage_num: int, optional

   :returns: **sectors_set_for_expansion** -- List of sectors (starting from 0 to ``num_sectors - 1``).
   :rtype: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> expanded_scoping = cyc_support.expand_element_id(1,stage_num=0)
   >>> print(expanded_scoping.ids)
   [...1... 1558... 2533... 3508... 4483... 5458]


.. py:method:: cs() -> ansys.dpf.core.field.Field

   Coordinate system of the cyclic support.

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> cs = cyc_support.cs()


.. py:method:: low_high_map(stage_num: int = 0) -> ansys.dpf.core.property_field.PropertyField

   Retrieve a property field containing node map from low to high base sector of the given stage.

   :param stage_num: Number of the stage required (from 0 to num_stages).

   :returns: Node correspondence between low to high in the base sector of the given stage.
   :rtype: low_high_map

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> low_high_map = cyc_support.low_high_map(0)


.. py:method:: high_low_map(stage_num: int = 0) -> ansys.dpf.core.property_field.PropertyField

   Retrieve a property field containing node map from high to low base sector of the given stage.

   :param stage_num: Number of the stage required (from 0 to num_stages).

   :returns: Node correspondence between high to low in the base sector of the given stage.
   :rtype: low_high_map

   .. rubric:: Examples

   >>> from ansys.dpf.core import Model
   >>> from ansys.dpf.core import examples
   >>> multi_stage = examples.download_multi_stage_cyclic_result()
   >>> cyc_support = Model(multi_stage).metadata.result_info.cyclic_support
   >>> high_low_map = cyc_support.high_low_map(0)


.. py:method:: __del__()

   Delete this instance.





