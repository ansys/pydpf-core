





:class:`FieldDefinition`
========================

.. py:class:: ansys.dpf.core.field_definition.FieldDefinition(field_definition=None, server=None)

   Contains the physical and mathematical description of the field.

   :param field_definition: The default is ``None``.
   :type field_definition: optional
   :param server: Server with the channel connected to the remote or local instance.
                  The default is ``None``, in which case an attempt is made to use
                  the global server.
   :type server: ansys.dpf.core.server, optional




.. py:currentmodule:: FieldDefinition

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~add_quantity_type`
            - Add a new Quantity Type.
          * - :py:attr:`~num_quantity_types`
            - Return number of available quantity types.
          * - :py:attr:`~is_of_quantity_type`
            - Check if the field definition is of a given quantity type.
          * - :py:attr:`~deep_copy`
            - Create a deep copy of the field_definition's data on a given server.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~location`
            - Field location.
          * - :py:attr:`~name`
            - Field name.
          * - :py:attr:`~unit`
            - Units of the field.
          * - :py:attr:`~shell_layers`
            - Order of the shell layers.
          * - :py:attr:`~dimensionality`
            - Dimensionality.
          * - :py:attr:`~quantity_types`
            - Getter for Quantity Types.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__del__`
            - Delete the current instance.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.field_definition import FieldDefinition

Property detail
---------------

.. py:property:: location

   Field location.

   :returns: Location string, such as :class:`ansys.dpf.core.locations.nodal`,
             :class:`ansys.dpf.core.locations.elemental` or
             :class:`ansys.dpf.core.locations.time_freq`.
   :rtype: str

.. py:property:: name

   Field name.

   :rtype: str

.. py:property:: unit

   Units of the field.

   :returns: Units of the field.
   :rtype: str

.. py:property:: shell_layers

   Order of the shell layers.

   :returns: **shell_layers** -- ``LayerIndependent`` is returned for fields unrelated to layers.
   :rtype: shell_layers

.. py:property:: dimensionality

   Dimensionality.

   :returns: **dimensionality** -- Nature and size of the elementary data.
   :rtype: Dimensionality

.. py:property:: quantity_types

   Getter for Quantity Types.

   :returns: All quantity types of the elementary data for this FieldDefinition.
   :rtype: str




Method detail
-------------

.. py:method:: add_quantity_type(quantity_type_to_add)

   Add a new Quantity Type.

   :param quantity_type_to_add: Quantity type to add
   :type quantity_type_to_add: str


.. py:method:: num_quantity_types()

   Return number of available quantity types.

   :returns: **num_quantity_types** -- Number of quantity types
   :rtype: int


.. py:method:: is_of_quantity_type(quantity_type)

   Check if the field definition is of a given quantity type.

   :param quantity_type: Quantity type to check
   :type quantity_type: str

   :returns: **is_of_quantity_type** -- True if the field definition is of the given quantity type
   :rtype: bool


.. py:method:: deep_copy(server=None)

   Create a deep copy of the field_definition's data on a given server.

   This can be useful to pass data from one server instance to another.

   :param server:
   :type server: DPFServer, optional

   :returns: **field_definition_copy**
   :rtype: FieldDefinition


.. py:method:: __del__()

   Delete the current instance.





