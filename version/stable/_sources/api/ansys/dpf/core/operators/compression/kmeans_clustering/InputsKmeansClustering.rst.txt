





:class:`InputsKmeansClustering`
===============================

.. py:class:: ansys.dpf.core.operators.compression.kmeans_clustering.InputsKmeansClustering(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   kmeans_clustering operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.kmeans_clustering()
   >>> my_clusters_number = int()
   >>> op.inputs.clusters_number.connect(my_clusters_number)
   >>> my_formula = str()
   >>> op.inputs.formula.connect(my_formula)
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_component_number = int()
   >>> op.inputs.component_number.connect(my_component_number)






.. py:currentmodule:: InputsKmeansClustering

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~clusters_number`
            - Allows to connect clusters_number input to the operator.
          * - :py:attr:`~formula`
            - Allows to connect formula input to the operator.
          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~component_number`
            - Allows to connect component_number input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.compression.kmeans_clustering import InputsKmeansClustering

Property detail
---------------

.. py:property:: clusters_number
   :type: ansys.dpf.core.inputs.Input


   Allows to connect clusters_number input to the operator.

   number of the clusters (dafault is 3)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.kmeans_clustering()
   >>> op.inputs.clusters_number.connect(my_clusters_number)
   >>> # or
   >>> op.inputs.clusters_number(my_clusters_number)

.. py:property:: formula
   :type: ansys.dpf.core.inputs.Input


   Allows to connect formula input to the operator.

   formula ('dist'/'dotprod'), default is 'dist'

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.kmeans_clustering()
   >>> op.inputs.formula.connect(my_formula)
   >>> # or
   >>> op.inputs.formula(my_formula)

.. py:property:: fields_container
   :type: ansys.dpf.core.inputs.Input


   Allows to connect fields_container input to the operator.

   an iunput fields container containing the data which will be used for the clustering

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.kmeans_clustering()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: component_number
   :type: ansys.dpf.core.inputs.Input


   Allows to connect component_number input to the operator.

   component number as an int (default is 0), ex '0' for X-displacement, '1' for Y-displacement,...

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.kmeans_clustering()
   >>> op.inputs.component_number.connect(my_component_number)
   >>> # or
   >>> op.inputs.component_number(my_component_number)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




