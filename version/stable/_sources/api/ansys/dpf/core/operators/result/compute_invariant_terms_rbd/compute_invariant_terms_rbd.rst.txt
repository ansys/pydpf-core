





:class:`compute_invariant_terms_rbd`
====================================

.. py:class:: ansys.dpf.core.operators.result.compute_invariant_terms_rbd.compute_invariant_terms_rbd(rom_matrices=None, mode_shapes=None, lumped_mass=None, model_data=None, center_of_mass=None, inertia_relief=None, model_size=None, field_coordinates=None, nod=None, constraint_mode_check=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Set the required data for the invariant terms computation (reduced
   matrices, lumped mass matrix, modes â€¦)


   :param rom_matrices: FieldsContainers containing the reduced matrices
   :type rom_matrices: FieldsContainer
   :param mode_shapes: FieldsContainers containing the mode shapes, which are CST and NOR for the cms method
   :type mode_shapes: FieldsContainer
   :param lumped_mass: FieldsContainers containing the lumped mass
   :type lumped_mass: FieldsContainer
   :param model_data: data describing the finite element model
   :type model_data: FieldsContainer
   :param center_of_mass:
   :type center_of_mass: FieldsContainer
   :param inertia_relief: inertia matrix
   :type inertia_relief: FieldsContainer
   :param model_size: model size
   :type model_size: float
   :param field_coordinates: coordinates of all nodes
   :type field_coordinates: Field
   :param nod:
   :param constraint_mode_check: if true, the orthogonality of the constraint modes are checked. Default is false.
   :type constraint_mode_check: bool, optional

   :returns: * **model_data** (*PropertyField*) -- data describing the finite element model
             * **center_of_mass** (*Field*) -- center of mass of the body
             * **inertia_relief** (*Field*) -- inertia matrix
             * **model_size** (*PropertyField*)
             * *master_node_coordinates*
             * *v_trsf* -- translational and rotational shape functions
             * **k_mat** (*Field*)
             * **mass_mat** (*Field*)
             * **c_mat** (*Field*)
             * **rhs** (*Field*)
             * *dn*
             * *dr_cross_n*
             * *drn*
             * *dn_cross_n*
             * *dnx_y*
             * *dny_y*
             * *dnz_y*
             * *dyx_n*
             * *dyy_n*
             * *dyz_n*
             * *dnxn*
             * *dnyn*
             * *dnzn*

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.compute_invariant_terms_rbd()

   >>> # Make input connections
   >>> my_rom_matrices = dpf.FieldsContainer()
   >>> op.inputs.rom_matrices.connect(my_rom_matrices)
   >>> my_mode_shapes = dpf.FieldsContainer()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> my_lumped_mass = dpf.FieldsContainer()
   >>> op.inputs.lumped_mass.connect(my_lumped_mass)
   >>> my_model_data = dpf.FieldsContainer()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> my_center_of_mass = dpf.FieldsContainer()
   >>> op.inputs.center_of_mass.connect(my_center_of_mass)
   >>> my_inertia_relief = dpf.FieldsContainer()
   >>> op.inputs.inertia_relief.connect(my_inertia_relief)
   >>> my_model_size = float()
   >>> op.inputs.model_size.connect(my_model_size)
   >>> my_field_coordinates = dpf.Field()
   >>> op.inputs.field_coordinates.connect(my_field_coordinates)
   >>> my_nod = dpf.()
   >>> op.inputs.nod.connect(my_nod)
   >>> my_constraint_mode_check = bool()
   >>> op.inputs.constraint_mode_check.connect(my_constraint_mode_check)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.compute_invariant_terms_rbd(
   ...     rom_matrices=my_rom_matrices,
   ...     mode_shapes=my_mode_shapes,
   ...     lumped_mass=my_lumped_mass,
   ...     model_data=my_model_data,
   ...     center_of_mass=my_center_of_mass,
   ...     inertia_relief=my_inertia_relief,
   ...     model_size=my_model_size,
   ...     field_coordinates=my_field_coordinates,
   ...     nod=my_nod,
   ...     constraint_mode_check=my_constraint_mode_check,
   ... )

   >>> # Get output data
   >>> result_model_data = op.outputs.model_data()
   >>> result_center_of_mass = op.outputs.center_of_mass()
   >>> result_inertia_relief = op.outputs.inertia_relief()
   >>> result_model_size = op.outputs.model_size()
   >>> result_master_node_coordinates = op.outputs.master_node_coordinates()
   >>> result_v_trsf = op.outputs.v_trsf()
   >>> result_k_mat = op.outputs.k_mat()
   >>> result_mass_mat = op.outputs.mass_mat()
   >>> result_c_mat = op.outputs.c_mat()
   >>> result_rhs = op.outputs.rhs()
   >>> result_dn = op.outputs.dn()
   >>> result_dr_cross_n = op.outputs.dr_cross_n()
   >>> result_drn = op.outputs.drn()
   >>> result_dn_cross_n = op.outputs.dn_cross_n()
   >>> result_dnx_y = op.outputs.dnx_y()
   >>> result_dny_y = op.outputs.dny_y()
   >>> result_dnz_y = op.outputs.dnz_y()
   >>> result_dyx_n = op.outputs.dyx_n()
   >>> result_dyy_n = op.outputs.dyy_n()
   >>> result_dyz_n = op.outputs.dyz_n()
   >>> result_dnxn = op.outputs.dnxn()
   >>> result_dnyn = op.outputs.dnyn()
   >>> result_dnzn = op.outputs.dnzn()












.. py:currentmodule:: compute_invariant_terms_rbd

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect an input on the operator using a pin number.
          * - :py:attr:`~connect_operator_as_input`
            - Connect an operator as an input on a pin.
          * - :py:attr:`~get_output`
            - Retrieve the output of the operator on the pin number.
          * - :py:attr:`~run`
            - Evaluate this operator.
          * - :py:attr:`~eval`
            - Evaluate this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it
          * - :py:attr:`~progress_bar`
            - Enable or disable progress bar display when requesting the operator's output.
          * - :py:attr:`~config`
            - Copy of the operator's current configuration.
          * - :py:attr:`~id`
            - Retrieve the unique identifier of the operator.
          * - :py:attr:`~specification`
            - Returns the Specification (or documentation) of this Operator.


   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~name`
            - 


   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.
          * - :py:attr:`~operator_specification`
            - Documents an Operator with its description (what the Operator does),its inputs and outputs and some properties.


   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__del__`
            - Delete this instance.
          * - :py:attr:`~__str__`
            - Describe the entity.
          * - :py:attr:`~__add__`
            - Add two fields or two fields containers.
          * - :py:attr:`~__sub__`
            - Subtract two fields or two fields containers.
          * - :py:attr:`~__pow__`
            - Raise each element of a field or a fields container to power 2.
          * - :py:attr:`~__mul__`
            - Multiply two fields or two fields containers.
          * - :py:attr:`~__truediv__`
            - Perform division with another operator or a scalar.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.compute_invariant_terms_rbd import compute_invariant_terms_rbd

Property detail
---------------

.. py:property:: inputs
   :type: InputsComputeInvariantTermsRbd


   Enables to connect inputs to the operator

   :returns: An instance of InputsComputeInvariantTermsRbd.
   :rtype: inputs

.. py:property:: outputs
   :type: OutputsComputeInvariantTermsRbd


   Enables to get outputs of the operator by evaluating it

   :returns: An instance of OutputsComputeInvariantTermsRbd.
   :rtype: outputs

.. py:property:: progress_bar
   :type: bool


   Enable or disable progress bar display when requesting the operator's output.

   With this property, the user can choose to print a progress bar when
   the operator's output is requested, default is False

.. py:property:: config

   Copy of the operator's current configuration.

   You can modify the copy of the configuration and then use ``operator.config = new_config``
   or instantiate an operator with the new configuration as a parameter.

   For information on an operator's options, see the documentation for that operator.

   :returns: Copy of the operator's current configuration.
   :rtype: :class:`ansys.dpf.core.config.Config`

   .. rubric:: Examples

   Modify the copy of an operator's configuration and set it as current config
   of the operator.

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.add()
   >>> config_add = op.config
   >>> config_add.set_work_by_index_option(True)
   >>> op.config = config_add

.. py:property:: id
   :type: int


   Retrieve the unique identifier of the operator.

   This property returns the unique ID associated with the operator.
   This property is lazily initialized.

   :returns: The unique identifier of the operator.
   :rtype: int

   .. rubric:: Notes

   Property available with server's version starting at 10.0.

.. py:property:: specification

   Returns the Specification (or documentation) of this Operator.

   :rtype: Specification



Attribute detail
----------------

.. py:attribute:: name
   :value: None




Method detail
-------------

.. py:method:: default_config(server: ansys.dpf.core.server_types.AnyServerType = None) -> ansys.dpf.core.config.Config
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.

   :returns: A new Config instance equivalent to the default config for this operator.
   :rtype: config


.. py:method:: connect(pin, inpt, pin_out=0)

   Connect an input on the operator using a pin number.

   :param pin: Number of the input pin.
   :type pin: int
   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping,
   :param ScopingsContainer: Operator, os.PathLike Object to connect to.
   :param MeshedRegion: Operator, os.PathLike Object to connect to.
   :param MeshesContainer: Operator, os.PathLike Object to connect to.
   :param DataSources: Operator, os.PathLike Object to connect to.
   :param CyclicSupport: Operator, os.PathLike Object to connect to.
   :param dict: Operator, os.PathLike Object to connect to.
   :param Outputs: Operator, os.PathLike Object to connect to.
   :param pin_out: If the input is an operator, the output pin of the input operator. The default is ``0``.
   :type pin_out: int, optional

   .. rubric:: Examples

   Compute the minimum of displacement by chaining the ``"U"`` and ``"min_max_fc"`` operators.

   >>> from ansys.dpf import core as dpf
   >>> from ansys.dpf.core import examples
   >>> data_src = dpf.DataSources(examples.find_multishells_rst())
   >>> disp_op = dpf.operators.result.displacement()
   >>> disp_op.inputs.data_sources(data_src)
   >>> max_fc_op = dpf.operators.min_max.min_max_fc()
   >>> max_fc_op.inputs.connect(disp_op.outputs)
   >>> max_field = max_fc_op.outputs.field_max()
   >>> max_field.data
   DPFArray([[0.59428386, 0.00201751, 0.0006032 ]]...


.. py:method:: connect_operator_as_input(pin, op)

   Connect an operator as an input on a pin.

   :param pin: Number of the output pin. The default is ``0``.
   :type pin: int
   :param op: Requested type of the output. The default is ``None``.
   :type op: :class:`ansys.dpf.core.dpf_operator.Operator`


.. py:method:: get_output(pin=0, output_type=None)

   Retrieve the output of the operator on the pin number.

   To activate the progress bar for server version higher or equal to 3.0,
   use ``my_op.progress_bar=True``

   :param pin: Number of the output pin. The default is ``0``.
   :type pin: int, optional
   :param output_type: Requested type of the output. The default is ``None``.
   :type output_type: :class:`ansys.dpf.core.common.types`, type,  optional

   :returns: Output of the operator.
   :rtype: type


.. py:method:: __del__()

   Delete this instance.


.. py:method:: __str__()

   Describe the entity.

   :returns: Description of the entity.
   :rtype: str


.. py:method:: run()

   Evaluate this operator.


.. py:method:: eval(pin=None)

   Evaluate this operator.

   :param pin: Number of the output pin. The default is ``None``.
   :type pin: int

   :returns: **output** -- Returns the first output of the operator by default and the output of a
             given pin when specified. Or, it only evaluates the operator without output.
   :rtype: FieldsContainer, Field, MeshedRegion, Scoping

   .. rubric:: Examples

   Use the ``eval`` method.

   >>> from ansys.dpf import core as dpf
   >>> import ansys.dpf.core.operators.math as math
   >>> from ansys.dpf.core import examples
   >>> data_src = dpf.DataSources(examples.find_multishells_rst())
   >>> disp_op = dpf.operators.result.displacement()
   >>> disp_op.inputs.data_sources(data_src)
   >>> normfc = math.norm_fc(disp_op).eval()


.. py:method:: __add__(fields_b)

   Add two fields or two fields containers.

   :returns: **add**
   :rtype: operators.math.add_fc


.. py:method:: __sub__(fields_b)

   Subtract two fields or two fields containers.

   :returns: **minus**
   :rtype: operators.math.minus_fc


.. py:method:: __pow__(value)

   Raise each element of a field or a fields container to power 2.


.. py:method:: __mul__(value)

   Multiply two fields or two fields containers.

   :returns: **mul**
   :rtype: operators.math.generalized_inner_product_fc


.. py:method:: operator_specification(op_name, server=None)
   :staticmethod:


   Documents an Operator with its description (what the Operator does),its inputs and outputs and some properties.


.. py:method:: __truediv__(inpt)

   Perform division with another operator or a scalar.

   This method allows the use of the division operator (`/`) between an
   `Operator` instance and either another `Operator` or a scalar value (float).





