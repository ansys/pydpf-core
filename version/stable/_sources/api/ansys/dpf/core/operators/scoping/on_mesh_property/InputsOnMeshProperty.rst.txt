





:class:`InputsOnMeshProperty`
=============================

.. py:class:: ansys.dpf.core.operators.scoping.on_mesh_property.InputsOnMeshProperty(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   on_mesh_property operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_id = int()
   >>> op.inputs.property_id.connect(my_property_id)
   >>> my_inclusive = int()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)






.. py:currentmodule:: InputsOnMeshProperty

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~requested_location`
            - Allows to connect requested_location input to the operator.
          * - :py:attr:`~property_name`
            - Allows to connect property_name input to the operator.
          * - :py:attr:`~property_id`
            - Allows to connect property_id input to the operator.
          * - :py:attr:`~inclusive`
            - Allows to connect inclusive input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.scoping.on_mesh_property import InputsOnMeshProperty

Property detail
---------------

.. py:property:: requested_location
   :type: ansys.dpf.core.inputs.Input


   Allows to connect requested_location input to the operator.

   Nodal or Elemental location are expected

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> # or
   >>> op.inputs.requested_location(my_requested_location)

.. py:property:: property_name
   :type: ansys.dpf.core.inputs.Input


   Allows to connect property_name input to the operator.

   ex "apdl_element_type", "elprops", "mat", "eltype", "connectivity", "shell_elements", "solid_elements", "skin_elements", "beam_elements", "point_elements"...

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> # or
   >>> op.inputs.property_name(my_property_name)

.. py:property:: property_id
   :type: ansys.dpf.core.inputs.Input


   Allows to connect property_id input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.property_id.connect(my_property_id)
   >>> # or
   >>> op.inputs.property_id(my_property_id)

.. py:property:: inclusive
   :type: ansys.dpf.core.inputs.Input


   Allows to connect inclusive input to the operator.

   Default is 1 (inclusive is true). Only used if 'shape_values' property is requested. If inclusive is set to 1 and 'elprops' property field is available, it will select all elements that are set on the corresponding property. If inclusive is set to 0 (exclusive) and 'elprops' property field is available, it will select the elements that are only set on this property.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> # or
   >>> op.inputs.inclusive(my_inclusive)

.. py:property:: mesh
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mesh input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




