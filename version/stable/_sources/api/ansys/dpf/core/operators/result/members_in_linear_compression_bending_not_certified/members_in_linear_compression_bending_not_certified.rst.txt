





:class:`members_in_linear_compression_bending_not_certified`
============================================================

.. py:class:: ansys.dpf.core.operators.result.members_in_linear_compression_bending_not_certified.members_in_linear_compression_bending_not_certified(time_scoping=None, field_yield_strength=None, field_end_condition=None, streams=None, data_sources=None, manufacture=None, partial_factor=None, mesh=None, bending_moment_y=None, bending_moment_z=None, axial_force=None, class_cross_section=None, fabrication_type=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   This operator is a non-certified example of buckling resistance
   verification for the compression and bending members for Class I, 2 and
   3 cross-sections. It is only provided as an example if you want to
   develop your own compute norm operator. This norm is linear summation of
   the utilization ratios of compression members and bending members. The
   results computed by this beta operator have not been certified by ANSYS.
   ANSYS declines all responsibility for the use of this operator.


   :param time_scoping:
   :type time_scoping: Scoping or int, optional
   :param field_yield_strength: This pin contains field of beam's Yield Strength defined by the user.
   :type field_yield_strength: Field
   :param field_end_condition: This pin contains file csv or field of beam's end condition defined by the user. If no input at this pin found, it would take end conditions value of all beams as 1
   :type field_end_condition: DataSources or Field, optional
   :param streams: result file container allowed to be kept open to cache data.
   :type streams: StreamsContainer, optional
   :param data_sources: result file path container, used if no streams are set.
   :type data_sources: DataSources, optional
   :param manufacture: Manufacturing processus:hot finished if TRUE or cold formed if FALSE. Default value : hot finished.
   :type manufacture: bool, optional
   :param partial_factor: partial factor for resistance of members to instability assessed by member checks. Default value: 1.0
   :type partial_factor: float, optional
   :param mesh: Mesh containing beam's properties defined by user
   :type mesh: MeshedRegion
   :param bending_moment_y: Fields Container of bending moment on axis y defined by user
   :type bending_moment_y: FieldsContainer
   :param bending_moment_z: Fields Container of bending moment on axis z defined by user
   :type bending_moment_z: FieldsContainer
   :param axial_force: Fields Container of axial force defined by user
   :type axial_force: FieldsContainer
   :param class_cross_section: Selection for a cross-section. True: Class 1 or 2 cross-sections. False: Class 3 cross section. If the user defines the cross section as class 1 or 2, the section modulus would be plastic section modulus. If it's class 3- cross section,the section modulus would be elastic section modulus
   :type class_cross_section: bool
   :param fabrication_type: Selection of fabrication's type if there are beams I in the structure. TRUE: Rolled Section, False: Welded Section. Default: Rolled Section.
   :type fabrication_type: bool, optional

   :returns: **buckling_resistance_linear_summation_utilization_ratios** -- Linear summation of the utilization ratios in all members submitted under a combination of both bending and compression. These factors should be less than 1 and positive.
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.members_in_linear_compression_bending_not_certified()

   >>> # Make input connections
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_field_yield_strength = dpf.Field()
   >>> op.inputs.field_yield_strength.connect(my_field_yield_strength)
   >>> my_field_end_condition = dpf.DataSources()
   >>> op.inputs.field_end_condition.connect(my_field_end_condition)
   >>> my_streams = dpf.StreamsContainer()
   >>> op.inputs.streams.connect(my_streams)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_manufacture = bool()
   >>> op.inputs.manufacture.connect(my_manufacture)
   >>> my_partial_factor = float()
   >>> op.inputs.partial_factor.connect(my_partial_factor)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_bending_moment_y = dpf.FieldsContainer()
   >>> op.inputs.bending_moment_y.connect(my_bending_moment_y)
   >>> my_bending_moment_z = dpf.FieldsContainer()
   >>> op.inputs.bending_moment_z.connect(my_bending_moment_z)
   >>> my_axial_force = dpf.FieldsContainer()
   >>> op.inputs.axial_force.connect(my_axial_force)
   >>> my_class_cross_section = bool()
   >>> op.inputs.class_cross_section.connect(my_class_cross_section)
   >>> my_fabrication_type = bool()
   >>> op.inputs.fabrication_type.connect(my_fabrication_type)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.members_in_linear_compression_bending_not_certified(
   ...     time_scoping=my_time_scoping,
   ...     field_yield_strength=my_field_yield_strength,
   ...     field_end_condition=my_field_end_condition,
   ...     streams=my_streams,
   ...     data_sources=my_data_sources,
   ...     manufacture=my_manufacture,
   ...     partial_factor=my_partial_factor,
   ...     mesh=my_mesh,
   ...     bending_moment_y=my_bending_moment_y,
   ...     bending_moment_z=my_bending_moment_z,
   ...     axial_force=my_axial_force,
   ...     class_cross_section=my_class_cross_section,
   ...     fabrication_type=my_fabrication_type,
   ... )

   >>> # Get output data
   >>> result_buckling_resistance_linear_summation_utilization_ratios = op.outputs.buckling_resistance_linear_summation_utilization_ratios()












.. py:currentmodule:: members_in_linear_compression_bending_not_certified

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect an input on the operator using a pin number.
          * - :py:attr:`~connect_operator_as_input`
            - Connect an operator as an input on a pin.
          * - :py:attr:`~get_output`
            - Retrieve the output of the operator on the pin number.
          * - :py:attr:`~run`
            - Evaluate this operator.
          * - :py:attr:`~eval`
            - Evaluate this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it
          * - :py:attr:`~progress_bar`
            - Enable or disable progress bar display when requesting the operator's output.
          * - :py:attr:`~config`
            - Copy of the operator's current configuration.
          * - :py:attr:`~id`
            - Retrieve the unique identifier of the operator.
          * - :py:attr:`~specification`
            - Returns the Specification (or documentation) of this Operator.


   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~name`
            - 


   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.
          * - :py:attr:`~operator_specification`
            - Documents an Operator with its description (what the Operator does),its inputs and outputs and some properties.


   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__del__`
            - Delete this instance.
          * - :py:attr:`~__str__`
            - Describe the entity.
          * - :py:attr:`~__add__`
            - Add two fields or two fields containers.
          * - :py:attr:`~__sub__`
            - Subtract two fields or two fields containers.
          * - :py:attr:`~__pow__`
            - Raise each element of a field or a fields container to power 2.
          * - :py:attr:`~__mul__`
            - Multiply two fields or two fields containers.
          * - :py:attr:`~__truediv__`
            - Perform division with another operator or a scalar.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.members_in_linear_compression_bending_not_certified import members_in_linear_compression_bending_not_certified

Property detail
---------------

.. py:property:: inputs
   :type: InputsMembersInLinearCompressionBendingNotCertified


   Enables to connect inputs to the operator

   :returns: An instance of InputsMembersInLinearCompressionBendingNotCertified.
   :rtype: inputs

.. py:property:: outputs
   :type: OutputsMembersInLinearCompressionBendingNotCertified


   Enables to get outputs of the operator by evaluating it

   :returns: An instance of OutputsMembersInLinearCompressionBendingNotCertified.
   :rtype: outputs

.. py:property:: progress_bar
   :type: bool


   Enable or disable progress bar display when requesting the operator's output.

   With this property, the user can choose to print a progress bar when
   the operator's output is requested, default is False

.. py:property:: config

   Copy of the operator's current configuration.

   You can modify the copy of the configuration and then use ``operator.config = new_config``
   or instantiate an operator with the new configuration as a parameter.

   For information on an operator's options, see the documentation for that operator.

   :returns: Copy of the operator's current configuration.
   :rtype: :class:`ansys.dpf.core.config.Config`

   .. rubric:: Examples

   Modify the copy of an operator's configuration and set it as current config
   of the operator.

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.add()
   >>> config_add = op.config
   >>> config_add.set_work_by_index_option(True)
   >>> op.config = config_add

.. py:property:: id
   :type: int


   Retrieve the unique identifier of the operator.

   This property returns the unique ID associated with the operator.
   This property is lazily initialized.

   :returns: The unique identifier of the operator.
   :rtype: int

   .. rubric:: Notes

   Property available with server's version starting at 10.0.

.. py:property:: specification

   Returns the Specification (or documentation) of this Operator.

   :rtype: Specification



Attribute detail
----------------

.. py:attribute:: name
   :value: None




Method detail
-------------

.. py:method:: default_config(server: ansys.dpf.core.server_types.AnyServerType = None) -> ansys.dpf.core.config.Config
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.

   :returns: A new Config instance equivalent to the default config for this operator.
   :rtype: config


.. py:method:: connect(pin, inpt, pin_out=0)

   Connect an input on the operator using a pin number.

   :param pin: Number of the input pin.
   :type pin: int
   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping,
   :param ScopingsContainer: Operator, os.PathLike Object to connect to.
   :param MeshedRegion: Operator, os.PathLike Object to connect to.
   :param MeshesContainer: Operator, os.PathLike Object to connect to.
   :param DataSources: Operator, os.PathLike Object to connect to.
   :param CyclicSupport: Operator, os.PathLike Object to connect to.
   :param dict: Operator, os.PathLike Object to connect to.
   :param Outputs: Operator, os.PathLike Object to connect to.
   :param pin_out: If the input is an operator, the output pin of the input operator. The default is ``0``.
   :type pin_out: int, optional

   .. rubric:: Examples

   Compute the minimum of displacement by chaining the ``"U"`` and ``"min_max_fc"`` operators.

   >>> from ansys.dpf import core as dpf
   >>> from ansys.dpf.core import examples
   >>> data_src = dpf.DataSources(examples.find_multishells_rst())
   >>> disp_op = dpf.operators.result.displacement()
   >>> disp_op.inputs.data_sources(data_src)
   >>> max_fc_op = dpf.operators.min_max.min_max_fc()
   >>> max_fc_op.inputs.connect(disp_op.outputs)
   >>> max_field = max_fc_op.outputs.field_max()
   >>> max_field.data
   DPFArray([[0.59428386, 0.00201751, 0.0006032 ]]...


.. py:method:: connect_operator_as_input(pin, op)

   Connect an operator as an input on a pin.

   :param pin: Number of the output pin. The default is ``0``.
   :type pin: int
   :param op: Requested type of the output. The default is ``None``.
   :type op: :class:`ansys.dpf.core.dpf_operator.Operator`


.. py:method:: get_output(pin=0, output_type=None)

   Retrieve the output of the operator on the pin number.

   To activate the progress bar for server version higher or equal to 3.0,
   use ``my_op.progress_bar=True``

   :param pin: Number of the output pin. The default is ``0``.
   :type pin: int, optional
   :param output_type: Requested type of the output. The default is ``None``.
   :type output_type: :class:`ansys.dpf.core.common.types`, type,  optional

   :returns: Output of the operator.
   :rtype: type


.. py:method:: __del__()

   Delete this instance.


.. py:method:: __str__()

   Describe the entity.

   :returns: Description of the entity.
   :rtype: str


.. py:method:: run()

   Evaluate this operator.


.. py:method:: eval(pin=None)

   Evaluate this operator.

   :param pin: Number of the output pin. The default is ``None``.
   :type pin: int

   :returns: **output** -- Returns the first output of the operator by default and the output of a
             given pin when specified. Or, it only evaluates the operator without output.
   :rtype: FieldsContainer, Field, MeshedRegion, Scoping

   .. rubric:: Examples

   Use the ``eval`` method.

   >>> from ansys.dpf import core as dpf
   >>> import ansys.dpf.core.operators.math as math
   >>> from ansys.dpf.core import examples
   >>> data_src = dpf.DataSources(examples.find_multishells_rst())
   >>> disp_op = dpf.operators.result.displacement()
   >>> disp_op.inputs.data_sources(data_src)
   >>> normfc = math.norm_fc(disp_op).eval()


.. py:method:: __add__(fields_b)

   Add two fields or two fields containers.

   :returns: **add**
   :rtype: operators.math.add_fc


.. py:method:: __sub__(fields_b)

   Subtract two fields or two fields containers.

   :returns: **minus**
   :rtype: operators.math.minus_fc


.. py:method:: __pow__(value)

   Raise each element of a field or a fields container to power 2.


.. py:method:: __mul__(value)

   Multiply two fields or two fields containers.

   :returns: **mul**
   :rtype: operators.math.generalized_inner_product_fc


.. py:method:: operator_specification(op_name, server=None)
   :staticmethod:


   Documents an Operator with its description (what the Operator does),its inputs and outputs and some properties.


.. py:method:: __truediv__(inpt)

   Perform division with another operator or a scalar.

   This method allows the use of the division operator (`/`) between an
   `Operator` instance and either another `Operator` or a scalar value (float).





