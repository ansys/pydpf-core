





:class:`InputsChangeCs`
=======================

.. py:class:: ansys.dpf.core.operators.mesh.change_cs.InputsChangeCs(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   change_cs operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.change_cs()
   >>> my_meshes = dpf.MeshedRegion()
   >>> op.inputs.meshes.connect(my_meshes)
   >>> my_coordinate_system = dpf.Field()
   >>> op.inputs.coordinate_system.connect(my_coordinate_system)






.. py:currentmodule:: InputsChangeCs

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~meshes`
            - Allows to connect meshes input to the operator.
          * - :py:attr:`~coordinate_system`
            - Allows to connect coordinate_system input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.change_cs import InputsChangeCs

Property detail
---------------

.. py:property:: meshes
   :type: ansys.dpf.core.inputs.Input


   Allows to connect meshes input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.change_cs()
   >>> op.inputs.meshes.connect(my_meshes)
   >>> # or
   >>> op.inputs.meshes(my_meshes)

.. py:property:: coordinate_system
   :type: ansys.dpf.core.inputs.Input


   Allows to connect coordinate_system input to the operator.

   3-3 rotation matrix + 3 translations (X, Y, Z)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.change_cs()
   >>> op.inputs.coordinate_system.connect(my_coordinate_system)
   >>> # or
   >>> op.inputs.coordinate_system(my_coordinate_system)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




