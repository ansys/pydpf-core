





:class:`LicensingContextType`
=============================

.. py:class:: ansys.dpf.core.server_context.LicensingContextType(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enum representing different types of licensing contexts.





.. py:currentmodule:: LicensingContextType

Overview
--------

.. tab-set::





   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~premium`
            - Checks if at least one license increment exists
          * - :py:attr:`~entry`
            - Checks if at least one license increment exists


   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~same_licensing_context`
            - Determine if two licensing contexts are compatible.


   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__int__`
            - Return the integer values of the licensing context.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.server_context import LicensingContextType


Attribute detail
----------------

.. py:attribute:: premium
   :value: 1


   Checks if at least one license increment exists
   and allows operators to block an increment.

.. py:attribute:: entry
   :value: 4


   Checks if at least one license increment exists
   and does not allow operators to block an increment.



Method detail
-------------

.. py:method:: __int__()

   Return the integer values of the licensing context.

   :returns: Integer values corresponding to the licensing context.
   :rtype: int


.. py:method:: same_licensing_context(first, second)
   :staticmethod:


   Determine if two licensing contexts are compatible.

   :param first: The first licensing context to compare.
   :type first: LicensingContextType
   :param second: The second licensing context to compare.
   :type second: LicensingContextType

   :returns: True if the licensing contexts are compatible, False otherwise.
   :rtype: bool





