.. _ref_main_index:

==========
PyDPF-Core
==========

The Data Processing Framework (DPF) provides numerical simulation 
users and engineers with a toolbox for accessing and transforming simulation 
data. With DPF, you can perform complex preprocessing or postprocessing of
large amounts of simulation data within a simulation workflow.

DPF is an independent, physics-agnostic tool that you can plug into many 
apps for both data input and data output, including visualization and 
result plots. The following table shows an exhaustive list of supported
apps by DPF and their related format:

.. table:: Truth table for "not"
   :widths: auto
   :align: center

+--------------------+------------------------+----------------------------------+----------------------------------+
|     **Solver**     |    **File format**     |       **Server version**         |       **DPF examples**           |
+====================+========================+==================================+==================================+
|                    || .rst, .mode           || **1.0** and later               | :ref:`ref_basic_example`         |
|        MAPDL       || .rfrq, .rdsp          || (*Ansys 2021 R1*)               |                                  |
+--------------------+------------------------+----------------------------------+----------------------------------+
|       LS DYNA      |   .d3plot, .binout     || **4.0** and later               | :ref:`lsdyna_operators`          |
|                    |                        || (*Ansys 2022 R2*)               |                                  |
+--------------------+------------------------+----------------------------------+----------------------------------+
|                    || *CFF restart files*   ||                                 | :ref:`ref_fluids_model`          |
|                    || .cas/dat.h5           ||                                 +----------------------------------+
|                    |                        || **7.0** and later               | :ref:`ref_fluids_mesh`           |
|        Fluent      +------------------------+| (*Ansys 2024 R1 pre0*)          +----------------------------------+
|                    || *Project files*       |                                  | :ref:`ref_fluids_results`        |
|                    || .flprj                |                                  |                                  |
+--------------------+------------------------+----------------------------------+----------------------------------+
|                    || *CFF files*           ||                                 | :ref:`ref_fluids_model`          |
|                    || .cas/dat.cff          ||                                 +----------------------------------+
|                    |                        || **7.0** and later               | :ref:`ref_fluids_mesh`           |
|          CFX       +------------------------+| (*Ansys 2024 R1 pre0*)          +----------------------------------+
|                    || *Project files*       |                                  | :ref:`ref_fluids_results`        |
|                    || .flprj                |                                  |                                  |
+--------------------+------------------------+----------------------------------+----------------------------------+

Visualisation is ensured by VTK and leverage of `PyVista tools
<https://docs.pyvista.org>`_.

Using the many DPF operators that are available, you can manipulate and
transform this data. You can also chain operators together to create simple
or complex data-processing workflows that you can reuse for repeated or
future evaluations.

The data in DPF is defined based on physics-agnostic mathematical quantities 
described in self-sufficient entities called **fields**. This allows DPF to be 
a modular and easy-to-use tool with a large range of capabilities. 

.. image:: images/drawings/dpf-flow.png
  :width: 670
  :alt: DPF flow

The ``ansys.dpf.core`` package provides a Python interface to DPF, enabling
rapid postprocessing of a variety of Ansys file formats and physics solutions
without ever leaving the Python environment.

Brief demo
~~~~~~~~~~
Here is how you open a result file generated by MAPDL (or another ANSYS solver)
and extract results:

.. code:: python

    >>> from ansys.dpf.core import Model
    >>> from ansys.dpf.core import examples
    >>> model = Model(examples.find_simple_bar())
    >>> print(model)


Here is how you plot displacement results:

.. code:: python

    >>> disp = model.results.displacement().X()
    >>> model.metadata.meshed_region.plot(disp.outputs.fields_container())

For comprehensive examples of how you use PyDPF-Core, see :ref:`gallery`.


Key features
~~~~~~~~~~~~

**Computational efficiency**

DPF is a modern framework based on new hardware architectures. Thanks
to continued development, new capabilities are frequently added.

**Generic interface**

DPF is physics-agnostic, which means that its use is not limited to a particular
field, physics solution, or file format.

**Extensibility and customization**

DPF is developed around two core entities:

- Data represented as a **field**
- An **operator** to act upon this data

Each DPF capability is developed through operators that allow for componentization
of the framework. Because DPF is plugin-based, new features or formats can be easily added.

Accessing and enriching DPF capabilities
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Most of the DPF capabilities can be accessed using the operators.
For more information about the existing operators, see the **Operators** tab.

The following sections are summaries. For more detailed content, see :ref:`user_guide_waysofusing`.

**Accessing DPF Server files**

DPF capabilities are accessible when DPF Server files are available. These files can be accessed using:

- The **Ansys installer**. To use it, download the standard installation using your preferred distribution channel,
and install Ansys following the installer instructions. For information on getting a licensed copy of Ansys,
visit the `Ansys website <https://www.ansys.com/>`_.

- The DPF Server package (see :ref:`ref_getting_started_with_dpf_server`).
It is independent of the Ansys installer.

**Accessing capabilities with scripting**

- C++ documentation:

  1. The Data Processing Framework section in `Platform panel <https://ansysapi.ansys.com/account/secured?returnurl=/Views/Secured/main_page.html?lang=en>`_.

  2. `Developer Portal <https://developer.ansys.com/product/DPF-Server-Client-Library/index.xhtml>`_

- CPython modules documentation:

  1. `ansys-dpf-core <https://dpf.docs.pyansys.com/version/stable/>`_

  2. `ansys-dpf-post <https://post.docs.pyansys.com/version/stable/>`_

- Mechanical scripting (IronPython):

  1. `DPF through Automation Scripting <https://ansysproducthelpdev.win.ansys.com/account/secured?returnurl=/Views/Secured/corp/v231/en/act_script/mech_apis_data_process_frame.html>`_

  2. `Python Result object <https://ansyshelp.ansys.com/account/secured?returnurl=/Views/Secured/corp/v231/en/wb_sim/ds_python_result.html>`_

**Enriching DPF capabilities**

- C++ operator's library (see C++ documentation)

- `C++ solver reader plugin <https://astonishing-hyacinth-e64.notion.site/How-to-write-a-new-solver-reader-as-a-DPF-s-plugin-bd2d2a3cf51f47ef9e70df45d64f89cb>`_

- :ref:`user_guide_custom_operators`


.. toctree::
   :maxdepth: 2
   :caption: Getting Started
   :hidden:

   getting_started/index
   user_guide/index
   concepts/index
   api/index
   operator_reference
   examples/index
   contributing
