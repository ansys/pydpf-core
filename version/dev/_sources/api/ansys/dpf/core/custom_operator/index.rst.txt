





The ``custom_operator.py`` module
=================================

.. py:module:: ansys.dpf.core.custom_operator


Summary
-------










.. py:currentmodule:: custom_operator
.. tab-set::




    .. tab-item:: Classes

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~ansys.dpf.core.custom_operator.CustomOperatorBase`
            - Base class interfacing CPython Custom Operators which can be used as regular DPF Operators in any API.





    .. tab-item:: Functions

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~update_virtual_environment_for_custom_operators`
            - Update the dpf-site.zip file used to start a venv for Python custom operators to run in.


          * - :py:obj:`~record_operator`
            - Add an operator (with its name, run callback, and specification) to the DPF core registry.









.. toctree::
   :titlesonly:
   :maxdepth: 1
   :hidden:

    <span class="nf nf-cod-symbol_class"></span> CustomOperatorBase</api/ansys/dpf/core/custom_operator/CustomOperatorBase>









Description
-----------

Custom Operator Base.

Contains utilities allowing you to implement and record custom Python operators.







Module detail
-------------

.. py:function:: update_virtual_environment_for_custom_operators(restore_original: bool = False)

   Update the dpf-site.zip file used to start a venv for Python custom operators to run in.

   It updates the site-packages in dpf-site.zip with the site-packages of the current venv.
   It stores the original dpf-site.zip for future restoration.

   .. note::
       This feature is only available InProcess to ensure compatibility of the current venv
       client-side with the machine where the server is run.

   :param restore_original: If ``True``, restores the original dpf-site.zip.


.. py:function:: record_operator(operator_type, *args) -> None

   Add an operator (with its name, run callback, and specification) to the DPF core registry.

   :param operator_type: Class type inheriting from CustomOperatorBase.
                         ``name`` and ``specification`` properties are called
                         and run method callback is given to DataProcessingCore.
   :type operator_type: type, CustomOperatorBase
   :param \*args: Forwarded arguments passed in ``load_operators`` method




