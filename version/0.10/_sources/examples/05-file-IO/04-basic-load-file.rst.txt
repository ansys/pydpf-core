
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\05-file-IO\04-basic-load-file.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_05-file-IO_04-basic-load-file.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_05-file-IO_04-basic-load-file.py:


.. _ref_basic_load_file_example:

Working with a result file
~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to write and upload files on the server machine and then
download them back on the client side. The resulting fields container is then
exported to a CSV file.

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Load a model from the DPF-Core examples:
``ansys.dpf.core`` module.

.. GENERATED FROM PYTHON SOURCE LINES 17-25

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples


    model = dpf.Model(examples.find_simple_bar())
    mesh = model.metadata.meshed_region








.. GENERATED FROM PYTHON SOURCE LINES 26-29

Get and plot the fields container for the result
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the fields container for the result and plot it so you can compare it later:

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default


    displacement_operator = model.results.displacement()
    fc_out = displacement_operator.outputs.fields_container()
    mesh.plot(fc_out)




.. image-sg:: /examples/05-file-IO/images/sphx_glr_04-basic-load-file_001.png
   :alt: 04 basic load file
   :srcset: /examples/05-file-IO/images/sphx_glr_04-basic-load-file_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 35-38

Export result
~~~~~~~~~~~~~
Export the fields container in the CSV format:

.. GENERATED FROM PYTHON SOURCE LINES 38-56

.. code-block:: default


    import os

    csv_file_name = "simple_bar_fc.csv"
    # Define an output path for the resulting .csv file
    if not dpf.SERVER.local_server:
        # Define it server-side if using a remote server
        tmp_dir_path = dpf.core.make_tmp_dir_server(dpf.SERVER)
        server_file_path = dpf.path_utilities.join(tmp_dir_path, csv_file_name)
    else:
        server_file_path = os.path.join(os.getcwd(), csv_file_name)

    # Perform the export to csv on the server side
    export_csv_operator = dpf.operators.serialization.field_to_csv()
    export_csv_operator.inputs.field_or_fields_container.connect(fc_out)
    export_csv_operator.inputs.file_path.connect(server_file_path)
    export_csv_operator.run()








.. GENERATED FROM PYTHON SOURCE LINES 57-60

Download CSV result file
~~~~~~~~~~~~~~~~~~~~~~~~~
Download the file ``simple_bar_fc.csv``:

.. GENERATED FROM PYTHON SOURCE LINES 60-67

.. code-block:: default


    if not dpf.SERVER.local_server:
        downloaded_client_file_path = os.path.join(os.getcwd(), "simple_bar_fc_downloaded.csv")
        dpf.download_file(server_file_path, downloaded_client_file_path)
    else:
        downloaded_client_file_path = server_file_path








.. GENERATED FROM PYTHON SOURCE LINES 68-71

Load CSV result file as operator input
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Load the fields container contained in the CSV file as an operator input:

.. GENERATED FROM PYTHON SOURCE LINES 71-81

.. code-block:: default


    my_data_sources = dpf.DataSources(server_file_path)
    import_csv_operator = dpf.operators.serialization.csv_to_field()
    import_csv_operator.inputs.data_sources.connect(my_data_sources)
    server_fc_out = import_csv_operator.outputs.fields_container()
    mesh.plot(server_fc_out)

    # Remove file to avoid polluting.
    os.remove(downloaded_client_file_path)




.. image-sg:: /examples/05-file-IO/images/sphx_glr_04-basic-load-file_002.png
   :alt: 04 basic load file
   :srcset: /examples/05-file-IO/images/sphx_glr_04-basic-load-file_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-85

Make operations over the fields container
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Use this fields container to get the minimum displacement:

.. GENERATED FROM PYTHON SOURCE LINES 85-91

.. code-block:: default


    min_max_op = dpf.operators.min_max.min_max_fc()
    min_max_op.inputs.fields_container.connect(server_fc_out)
    min_field = min_max_op.outputs.field_min()
    min_field.data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[-8.202171e-07, -6.265107e-06, -2.444680e-05]])



.. GENERATED FROM PYTHON SOURCE LINES 92-95

Compare the original and the new fields container
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subtract the two fields and plot an error map:

.. GENERATED FROM PYTHON SOURCE LINES 95-105

.. code-block:: default

    abs_error = (fc_out - server_fc_out).eval()

    divide = dpf.operators.math.component_wise_divide()
    divide.inputs.fieldA.connect(fc_out - server_fc_out)
    divide.inputs.fieldB.connect(fc_out)
    scale = dpf.operators.math.scale()
    scale.inputs.field.connect(divide)
    scale.inputs.ponderation.connect(100.0)
    rel_error = scale.eval()








.. GENERATED FROM PYTHON SOURCE LINES 106-114

Plot both absolute and relative error fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Note that the absolute error is bigger where the displacements are
bigger, at the tip of the geometry.
Instead, the relative error is similar across the geometry since we
are dividing by the displacements ``fc_out``.
Both plots show errors that can be understood as zero due to machine precision
(1e-12 mm for the absolute error and 1e-5% for the relative error).

.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: default

    mesh.plot(abs_error, scalar_bar_args={"title": "Absolute error [mm]"})
    mesh.plot(rel_error, scalar_bar_args={"title": "Relative error [%]"})



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/05-file-IO/images/sphx_glr_04-basic-load-file_003.png
          :alt: 04 basic load file
          :srcset: /examples/05-file-IO/images/sphx_glr_04-basic-load-file_003.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/05-file-IO/images/sphx_glr_04-basic-load-file_004.png
          :alt: 04 basic load file
          :srcset: /examples/05-file-IO/images/sphx_glr_04-basic-load-file_004.png
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.192 seconds)


.. _sphx_glr_download_examples_05-file-IO_04-basic-load-file.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04-basic-load-file.py <04-basic-load-file.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04-basic-load-file.ipynb <04-basic-load-file.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
