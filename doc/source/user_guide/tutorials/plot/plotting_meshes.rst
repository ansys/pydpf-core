.. _ref_tutorials_plotting_meshes:

===============
Plotting meshes
===============

.. |MeshedRegion| replace:: :class:`MeshedRegion <ansys.dpf.core.meshed_region.MeshedRegion>`
.. |Model| replace:: :class:`Model <ansys.dpf.core.model.Model>`
.. |plot| replace:: :func:`plot()<ansys.dpf.core.model.Model.plot>`
.. |DpfPlotter| replace:: :class:`DpfPlotter<ansys.dpf.core.plotter.DpfPlotter>`
.. |add_mesh| replace:: :func:`add_mesh()<ansys.dpf.core.plotter.DpfPlotter.add_mesh>`
.. |show_figure| replace:: :func:`show_figure()<ansys.dpf.core.plotter.DpfPlotter.show_figure>`

DPF-Core has a variety of plotting methods for generating 3D plots of
Ansys models directly from Python. These methods use VTK and leverage
the `PyVista <https://github.com/pyvista/pyvista>`_ library to
simplify plotting.

This tutorial shows different plotting commands to plot the bare mesh
of a model.

Define the mesh
---------------

The mesh object in DPF is a |MeshedRegion|. In this tutorial we will download
a pontoon simulation result file available in our `Examples` package:

.. code-block:: python

    # Import the ``ansys.dpf.core`` module, including examples files
    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    # Define the result file
    pontoon_file = examples.download_pontoon()

Here, we use the |MeshedRegion| associated with the DPF |Model| object.
However, you can obtain your |MeshedRegion| by other methods. For more
information see the tutorials section : :ref:`ref_tutorials_mesh`.

To plot the mesh you have three different methods:

    1)  :ref:`method_plot_mesh_1`
    2)  :ref:`method_plot_mesh_2`
    3)  :ref:`method_plot_mesh_3`

.. _method_plot_mesh_1:

Plot the |Model| with the |plot| method
---------------------------------------

This first approach is pretty simple. First, have to define the model
object using the result file. Then you just have to use the |plot|
method, it plots the bare mesh by default.

.. code-block:: python

    # Create the model
    my_model = dpf.Model(data_sources=pontoon_file)
    # Use the plot() method to plot the associated mesh
    my_model.plot()

.. rst-class:: sphx-glr-script-out

 .. jupyter-execute::
    :hide-code:

    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    pontoon_file = examples.download_pontoon()
    my_model = dpf.Model(data_sources=pontoon_file)
    my_model.plot()


The default plotter settings display the mesh with edges, lighting
and axis widget enabled. Nevertheless, as we use the
`PyVista <https://github.com/pyvista/pyvista>`_ library to create
the plot you can use additional PyVista arguments (available at:
:func:`pyvista.plot`), such as:

.. code-block:: python

    my_model.plot(title= "Pontoon mesh",
                  text= "Plot mesh method 1",  # Adds the given text at the bottom of the plot
                  notebook=False,
                  screenshot="mesh_plot_1.png"  # Save a screenshot to file with the given name
                  )
    # Notes:
    # - To save a screenshot to file, use "screenshot" ( as well as "notebook=False" if on a Jupyter notebook).
    # - The "off_screen" keyword only works when "notebook=False". If "off_screen=True" the plot is not displayed when running the code.

.. rst-class:: sphx-glr-script-out

 .. jupyter-execute::
    :hide-code:

    my_model.plot(title= "Pontoon mesh",
                  text= "Plot mesh method 1",
                  off_screen=True,
                  notebook=False,
                  screenshot="mesh_plot_1.png"
                  )

.. _method_plot_mesh_2:

Plot the |MeshedRegion| with the |plot| method
----------------------------------------------

This second approach demands a |MeshedRegion| object. Thus, we extract
it from our |Model| object . Then, in the same way of the first approach,
you just have to use the |plot| method.

.. code-block:: python

    # Extract the mesh
    my_meshed_region = my_model.metadata.meshed_region
    # Use the plot() method to plot the mesh
    my_meshed_region.plot()

.. rst-class:: sphx-glr-script-out

 .. jupyter-execute::
    :hide-code:

    my_meshed_region = my_model.metadata.meshed_region
    my_meshed_region.plot()

As, the meshed region is generated from the modelâ€™s metadata,
the plot generated here is identical to the plot generated by the ":ref:`method_plot_mesh_1`" approach.

The default plotter settings display the mesh with edges, lighting
and axis widget enabled. Nevertheless, as we use the
`PyVista <https://github.com/pyvista/pyvista>`_ library to create
the plot you can use additional PyVista arguments (available at:
:func:`pyvista.plot`), just like in ":ref:`method_plot_mesh_1`"

.. _method_plot_mesh_3:

Plot the |MeshedRegion| with the |DpfPlotter| class
---------------------------------------------------

Here we use the |DpfPlotter| object, that is currently a PyVista based object.
That means that PyVista must be installed, and that it supports kwargs as
parameter (the argument must be supported by the installed PyVista version).
More information about the available arguments are available at :class:`pyvista.Plotter`.

First you have to define the |DpfPlotter| object and then add the |MeshedRegion|
to it using the |add_mesh| method.

To display the figure built by the plotter object you need to use the
|show_figure|  method.

.. code-block:: python

    # Declare the DpfPlotter object
    my_plotter = dpf.plotter.DpfPlotter()
    # Add the MeshedRegion to the DpfPlotter object
    my_plotter.add_mesh(meshed_region=my_meshed_region)
    # Display the plot
    my_plotter.show_figure()

.. rst-class:: sphx-glr-script-out

 .. jupyter-execute::
    :hide-code:

    my_plotter = dpf.plotter.DpfPlotter()
    my_plotter.add_mesh(meshed_region=my_meshed_region)
    my_plotter.show_figure()

The default |DpfPlotter| object settings display the mesh with edges,and lighting
enabled. Nevertheless, as we use the `PyVista <https://github.com/pyvista/pyvista>`_
library to create the plot you can use additional PyVista arguments for the |DpfPlotter|
object and |add_mesh| method
(available at: :func:`pyvista.plot`).

You can also plot results data on its supporting mesh. For a detailed demonstration
check: :ref:`ref_plotting_data_on_the_mesh`