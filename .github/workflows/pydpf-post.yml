name: PyDPF-Post testing

on:
# Can be called by the CI
  workflow_call:
    inputs:
      post_branch:
        default: ''
        type: string
      ANSYS_VERSION:
        required: false
        type: string
        default: "232"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      custom-requirements:
        description: "Path to requirements.txt file to install"
        required: false
        type: string
        default: ''
      custom-wheels:
        description: "extra pip --find-links argument to find custom dpf wheels"
        required: false
        type: string
        default: ''
# Can be called manually
  workflow_dispatch:
    inputs:
      post_branch:
        description: 'PyDPF-Post branch or tag to test. Leave empty to get latest tagged version'
        default: ''
        type: string
      ANSYS_VERSION:
        description: "ANSYS version"
        required: true
        type: string
        default: "232"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      custom-requirements:
        description: "Path to requirements.txt file to install"
        required: false
        type: string
        default: ''
      custom-wheels:
        description: "extra pip --find-links argument to find custom dpf wheels"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core

jobs:
  Clone_and_Test:
    name: Clone and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest", "ubuntu-latest"]
        python-version: ["3.8"]

    steps:
      - uses: actions/checkout@v3

      - name: "Set licensing if necessary"
        if: inputs.ANSYS_VERSION > 231
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: "Setup Python"
        uses: actions/setup-python@v4.6.0
        with:
          python-version: "3.8"

      - name: "Build Core Package"
        uses: ansys/pydpf-actions/build_package@v2.3
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{inputs.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheel: false
          wheelhouse: false
          extra-pip-args: ${{ inputs.custom-wheels && format('--find-links {0}', inputs.custom-wheels) || '' }}
          standalone_suffix: ${{ inputs.standalone_suffix }}
          custom-requirements: ${{ inputs.custom-requirements }}

      - name: "Install ansys-grpc-dpf==0.4.0"
        if: inputs.ANSYS_VERSION == 221
        shell: bash
        run: |
          pip install ansys-grpc-dpf==0.4.0
          pip install protobuf==3.20.*

      - name: "Clone PyDPF-Post"
        shell: bash
        run: |
          REPO="https://github.com/ansys/pydpf-post.git"
          BranchName=${{ inputs.post_branch }}
          echo branch="$BranchName"
          if [ "$BranchName" = '' ];
          then
              BranchName=$(git ls-remote --tags --refs $REPO | tail -n1 | cut -d/ -f3)
          fi
          echo branch=$BranchName
          git clone --single-branch --branch "$BranchName" $REPO

      - name: "Install PyDPF-Post"
        shell: bash
        run: |
          cd pydpf-post
          pip install .
          ls

      - name: "Prepare Testing Environment"
        uses: ansys/pydpf-actions/prepare_tests@v2.3
        with:
          DEBUG: true
          working-directory: pydpf-post

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Test Docstrings"
        uses: ansys/pydpf-actions/test_docstrings@v2.3
        with:
          MODULE: post
          PACKAGE_NAME: ansys-dpf-post
          working-directory: pydpf-post/src

      - name: "Test API"
        shell: bash
        working-directory: pydpf-post/tests
        run: |
          pytest $DEBUG --reruns 2 .
        if: always()

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
