name: Upload Python Package

on: #[release]
  push:
    branches:
      - ci/release_wheels

env:
  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_PIP_CACHE: 0
  PACKAGE_NAME: ansys_dpf_core

jobs:

  testimport:
    name: Smoke Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9']

        steps:
          - uses: actions/checkout@v2

          - name: Set up Python ${{ matrix.python-version }}
            uses: actions/setup-python@v2
            with:
              python-version: ${{ matrix.python-version }}

          - name: Linux pip cache
            uses: actions/cache@v2
            if: ${{ runner.os == 'Linux' }}
            with:
              path: ~/.cache/pip
              key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_build.txt') }}
              restore-keys: |
                Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

          - name: Window pip cache
            uses: actions/cache@v2
            if: ${{ runner.os == 'Windows' }}
            with:
              path: ~\AppData\Local\pip\Cache
              key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_build.txt') }}
              restore-keys: |
                Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

          - name: Install PyDPF-Core
            run: pip install .

          - name: Test import
            working-directory: tests
            run: python -c "from ansys.dpf import core; print(core.Report(gpu=False))"

          - name: Get the version
            id: version
            run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

          - name: Generate wheelhouse
            run: pip wheel . -w wheelhouse

          - name: Zip wheelhouse
            uses: vimtor/action-zip@v1
            with:
              name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}
              path: '*.zip'
              retention-days: 7

  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools twine

    - name: Build
      run: python setup.py sdist

#    - name: Publish distribution ðŸ“¦ to PyPI
#      env:
#        TWINE_USERNAME: __token__
#        TWINE_PASSWORD: ${{secrets.PYPI_TOKEN}}
#        TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
#      run: twine upload --skip-existing dist/*

#    - name: Publish distribution ðŸ“¦ to PyPI
#      uses: pypa/gh-action-pypi-publish@master
#      with:
#        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Publish distribution ðŸ“¦ to Test PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

#    - name: Release
#      uses: softprops/action-gh-release@v1
#      with:
#        files: |
#          ./**/*.whl
#          ./**/*.tar.gz
##          ./**/*.pdf
#          ./**/*.zip