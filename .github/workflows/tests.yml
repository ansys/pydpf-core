name: tests

on:
# Can be called by the CI
  workflow_call:
    inputs:
      python_versions:
        required: false
        type: string
        default: '["3.7"]'
      ANSYS_VERSION:
        required: false
        type: string
        default: "232"
      wheel:
        required: false
        type: string
        default: false
      wheelhouse:
        required: false
        type: string
        default: false
      DOCSTRING:
        required: false
        type: string
        default: true
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      custom-requirements:
        description: "Path to requirements.txt file to install"
        required: false
        type: string
        default: ''
      custom-wheels:
        description: "extra pip --find-links argument to find custom dpf wheels"
        required: false
        type: string
        default: ''
# Can be called manually
  workflow_dispatch:
    inputs:
      python_versions:
        description: "Python interpreters to test."
        required: true
        type: string
        default: '["3.8", "3.9", "3.10"]'
      ANSYS_VERSION:
        description: "ANSYS version"
        required: true
        type: string
        default: "231"
      wheel:
        description: "Generate a wheel"
        required: false
        type: string
        default: 'false'
      wheelhouse:
        description: "Generate a wheelhouse"
        required: false
        type: string
        default: 'false'
      DOCSTRING:
        description: "Whether to test docstrings"
        required: false
        type: string
        default: 'true'
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      custom-requirements:
        description: "Path to requirements.txt file to install"
        required: false
        type: string
        default: ''
      custom-wheels:
        description: "extra pip --find-links argument to find custom dpf wheels"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core

jobs:
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.set_array.outputs.python_versions }}
    steps:
      - id: set_array
        run: |
          echo "python_versions=${{ toJSON(inputs.python_versions) }}" >> $GITHUB_OUTPUT

  tests:
    name: "Tests"
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(needs.setup.outputs.python_versions) }}
        os: ["windows-latest", "ubuntu-latest"]

    steps:
      - uses: actions/checkout@v3

      - name: "Set licensing if necessary"
        if: inputs.ANSYS_VERSION > 231
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.3
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{inputs.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheel: ${{ inputs.wheel }}
          wheelhouse: ${{ inputs.wheelhouse }}
          extra-pip-args: ${{ inputs.custom-wheels && format('--find-links {0}', inputs.custom-wheels) || '' }}
          standalone_suffix: ${{ inputs.standalone_suffix }}
          custom-requirements: ${{ inputs.custom-requirements }}

      - name: "Install ansys-grpc-dpf==0.4.0"
        if: inputs.ANSYS_VERSION == 221
        shell: pwsh
        run: |
          pip install ansys-grpc-dpf==0.4.0

      - name: "Prepare Testing Environment"
        uses: pyansys/pydpf-actions/prepare_tests@v2.3
        with:
          DEBUG: true

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Test Docstrings"
        if: inputs.DOCSTRING == 'true'
        uses: pyansys/pydpf-actions/test_docstrings@v2.3
        with:
          MODULE: ${{env.MODULE}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          working-directory: src

      - name: "Separate long Core tests"
        shell: pwsh
        run: |
          .github\workflows\scripts\separate_long_core_tests.ps1
        if: always()

      - name: "Set pytest arguments"
        shell: bash
        run: |
          echo "COVERAGE=--cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --log-level=ERROR" >> $GITHUB_ENV
          echo "RERUNS=--reruns 2 --reruns-delay 1" >> $GITHUB_ENV

      - name: "Test API"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG $COVERAGE $RERUNS --junitxml=junit/test-results.xml  .
        if: always()

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Test API test_launcher"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results2.xml test_launcher/.

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Test API test_server"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results3.xml test_server/.
        if: always()

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Test API test_local_server"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results4.xml test_local_server/.

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Test API test_multi_server"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results5.xml test_multi_server/.

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Test API test_remote_workflow"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 4
          max_attempts: 3
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results6.xml test_remote_workflow/.

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Test API test_remote_operator"
        shell: bash
        working-directory: test_remote_operator
        run: |
          pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results7.xml .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Test API test_workflow"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 4
          retry_wait_seconds: 15
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results8.xml test_workflow/.
        if: always()

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Test API test_service"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=tests/junit/test-results9.xml test_service/.

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2
        if: always()

      - name: "Test API Entry"
        shell: bash
        working-directory: tests
        run: |
          cd entry
          pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=junit/test-results10.xml  .
        if: always()

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2
        if: always()

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ matrix.python-version }}_${{ matrix.os }}_pytest_${{ inputs.ANSYS_VERSION }}
          path: tests/junit/test-results.xml
        if: always()

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
