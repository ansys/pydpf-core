name: docs

on:
# Can be called by the CI
  workflow_call:
    inputs:
      python_version:
        required: false
        type: string
        default: "3.11"
      ANSYS_VERSION:
        required: false
        type: string
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      event_name:
        description: "Name of event calling"
        required: true
        type: string
        default: ''
# Can be called manually
  workflow_dispatch:
    inputs:
      python_version:
        description: "Python interpreter"
        required: true
        type: string
        default: "3.11"
      ANSYS_VERSION:
        description: "ANSYS version"
        required: false
        type: string
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
jobs:
  doc-style:
    name: "Check doc style"
    runs-on: ubuntu-latest
    steps:
        - name: "Running documentation style checks"
          uses: ansys/actions/doc-style@v8
          with:
            token: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: "Documentation"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Set licensing if necessary"
        if: ${{ (inputs.ANSYS_VERSION || vars.ANSYS_VERSION_DEFAULT) > '231' }}
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: "Update pip to the latest version and install tox"
        shell: pwsh
        run: |
          python -m pip install -U pip
          python -m pip install tox tox-uv

      - name: "Build the wheel"
        shell: pwsh
        run: |
          tox -e build-wheel

      - name: "Expose the wheel"
        shell: bash
        id: wheel
        working-directory: dist
        run: |
          export name=`ls ansys_dpf_core*.whl`
          echo ${name}
          echo "wheel_name=${name[0]}" >> $GITHUB_OUTPUT

      - name: "Install DPF"
        id: set-server-path
        uses: ansys/pydpf-actions/install-dpf-server@v2.3
        with:
          dpf-standalone-TOKEN: ${{secrets.PYANSYS_CI_BOT_TOKEN}}
          standalone_suffix: ${{ inputs.standalone_suffix }}
          ANSYS_VERSION : ${{inputs.ANSYS_VERSION}}

      - name: "Check licences of packages"
        uses: ansys/pydpf-actions/check-licenses@v2.3

      - name: "Test import"
        shell: bash
        run: |
          python -m pip install dist/${{ steps.wheel.outputs.wheel_name }}
          python -c "from ansys.dpf import core"

      - name: "Setup headless display"
        uses: pyvista/setup-headless-display-action@48066dd0b79cf46babc16223a1dce3aa4803ec43 # v4.0

      - name: "Setup Graphviz"
        uses: ts-graphviz/setup-graphviz@v2

      - name: "Install OS packages"
        run: |
          choco install pandoc

      - name: "Build HTML Documentation"
        shell: bash
        run: |
          tox -e doc-html --installpkg dist/${{ steps.wheel.outputs.wheel_name }} -x testenv:doc-html.setenv+='VIRTUALENV_SYSTEM_SITE_PACKAGES=true'

      - name: "Retrieve package version"
        shell: bash
        run: |
          echo "VERSION=$(python -c "from ansys.dpf.${{env.MODULE}} import __version__; print(__version__)")" >> GITHUB_OUTPUT
          echo "${{env.PACKAGE_NAME}} version is: $(python -c "from ansys.dpf.${{env.MODULE}} import __version__; print(__version__)")"
        id: version
        if: always()

      - name: "Upload Documentation Build log"
        uses: actions/upload-artifact@v4
        with:
          name: doc-${{env.PACKAGE_NAME}}-log
          path: doc/*.txt
        if: always()

      - name: "Zip HTML Documentation"
        shell: pwsh
        run: |
          Compress-Archive -Path doc/build/html/* -Destination HTML-doc-${{env.PACKAGE_NAME}}.zip
        if: always()

      - name: "Upload HTML Documentation"
        uses: actions/upload-artifact@v4
        with:
          name: HTML-doc-${{env.PACKAGE_NAME}}.zip
          path: HTML-doc-${{env.PACKAGE_NAME}}.zip
        if: always()
