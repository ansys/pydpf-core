name: docs

on:
# Can be called by the CI
  workflow_call:
    inputs:
      python_version:
        required: false
        type: string
        default: "3.8"
      ANSYS_VERSION:
        required: false
        type: string
        default: "241"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      custom-requirements:
        description: "Path to requirements.txt file to install"
        required: false
        type: string
        default: ''
      custom-wheels:
        description: "extra pip '--find-links XXX' argument to find custom dpf wheels"
        required: false
        type: string
        default: ''
      event_name:
        description: "Name of event calling"
        required: true
        type: string
        default: ''
# Can be called manually
  workflow_dispatch:
    inputs:
      python_version:
        description: "Python interpreter"
        required: true
        type: string
        default: "3.8"
      ANSYS_VERSION:
        description: "ANSYS version"
        required: true
        type: string
        default: "241"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      custom-requirements:
        description: "Path to requirements.txt file to install"
        required: false
        type: string
        default: ''
      custom-wheels:
        description: "extra pip --find-links argument to find custom dpf wheels"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  pythonLocation: ${{github.workspace}}/dpf-standalone/v${{inputs.ANSYS_VERSION}}/commonfiles/CPython/3_10/linx64/Release/python
  PKG_CONFIG_PATH: ${{github.workspace}}/dpf-standalone/v${{inputs.ANSYS_VERSION}}/commonfiles/CPython/3_10/linx64/Release/python/lib/pkgconfig
  Python_ROOT_DIR: ${{github.workspace}}/dpf-standalone/v${{inputs.ANSYS_VERSION}}/commonfiles/CPython/3_10/linx64/Release/python
  Python2_ROOT_DIR: ${{github.workspace}}/dpf-standalone/v${{inputs.ANSYS_VERSION}}/commonfiles/CPython/3_10/linx64/Release/python
  Python3_ROOT_DIR: ${{github.workspace}}/dpf-standalone/v${{inputs.ANSYS_VERSION}}/commonfiles/CPython/3_10/linx64/Release/python
  LD_LIBRARY_PATH: ${{github.workspace}}/dpf-standalone/v${{inputs.ANSYS_VERSION}}/commonfiles/CPython/3_10/linx64/Release/python/lib
  PATH: ${{github.workspace}}/dpf-standalone/v${{inputs.ANSYS_VERSION}}/commonfiles/CPython/3_10/linx64/Release/python/bin/

jobs:
  doc-style:
    name: "Check doc style"
    uses: ./.github/workflows/docs-style.yml
    with:
      vale_reporter: ${{ (inputs.event_name == 'pull_request') && 'github-check' || 'local' }}
    secrets: inherit

  docs:
    name: "Documentation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: "Set licensing if necessary"
        if: inputs.ANSYS_VERSION > 231
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV
          
      - name: "overview"
        shell: bash
        run: |
          find /usr/lib -name "libffi.so*"
          echo bla
          echo $LD_LIBRARY_PATH
          echo $PATH
          echo he

      - name: "Install OS packages"
        shell: bash
        run: |
          sudo apt update
          sudo apt install pandoc

      - name: "Build Package"
        id: build-package
        uses: ansys/pydpf-actions/build_package@v2.3.lpa
        with:
          python-version: ${{ inputs.python_version }}
          ANSYS_VERSION: ${{inputs.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheel: false
          wheelhouse: false
          extra-pip-args: ${{ inputs.custom-wheels && format('--find-links {0}', inputs.custom-wheels) || '' }}
          standalone_suffix: ${{ inputs.standalone_suffix }}
          custom-requirements: ${{ inputs.custom-requirements }}

      - name: "Setup headless display"
        uses: pyvista/setup-headless-display-action@v1

      - name: "Setup Graphviz"
        uses: ts-graphviz/setup-graphviz@v1

      - name: "Install documentation packages for Python"
        run: |
          pip install -r requirements/requirements_docs.txt

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Build sphinx doc"
        shell: bash
        run: |
          export SPHINX_APIDOC_OPTIONS=inherited-members
          sphinx-apidoc -o \
            docs/source/api \
            src/ansys \
            src/ansys/dpf/core/log.py \
            src/ansys/dpf/core/help.py \
            src/ansys/dpf/core/mapping_types.py \
            src/ansys/dpf/core/ipconfig.py \
            src/ansys/dpf/core/field_base.py \
            src/ansys/dpf/core/cache.py \
            src/ansys/dpf/core/misc.py \
            src/ansys/dpf/core/check_version.py \
            src/ansys/dpf/core/operators/build.py \
            src/ansys/dpf/core/operators/specification.py \
            src/ansys/dpf/core/vtk_helper.py \
            src/ansys/dpf/core/label_space.py \
            src/ansys/dpf/core/examples/python_plugins/* \
            src/ansys/dpf/core/examples/examples.py \
            src/ansys/dpf/core/property_fields_container.py \
            ${{inputs.build_extras}} \
          -f --implicit-namespaces --separate  --no-headings

      - name: "Build HTML Documentation"
        shell: bash
        working-directory: docs
        run: |
          export TEMP=${{ runner.temp }}
          export BASE=${{ github.workspace }}
          export SPHINX_APIDOC_OPTIONS=inherited-members
          make clean
          echo "Making html doc..."
          cd $BASE/docs
          ls -al
          make html >> log.txt
          cat log.txt

      - name: "Check for success"
        shell: bash
        working-directory: docs
        run: |
          case `grep -F "build succeeded" log.txt >/dev/null; echo $?` in
          0)
            echo "Build succeeded!"
            exit 0;;
          1)
            echo "Documentation generation failed, please check previous step!"
            exit 1;;
          *)
            echo "An error occurred while checking success of the previous step!"
            exit 1;;
          esac

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Retrieve package version"
        shell: bash
        run: |
          echo "VERSION=$(python -c "from ansys.dpf.${{env.MODULE}} import __version__; print(__version__)")" >> GITHUB_OUTPUT
          echo "${{env.PACKAGE_NAME}} version is: $(python -c "from ansys.dpf.${{env.MODULE}} import __version__; print(__version__)")"
        id: version
        if: always()

      - name: "Upload Documentation Build log"
        uses: actions/upload-artifact@v3
        with:
          name: doc-${{env.PACKAGE_NAME}}-log
          path: docs/*.txt
        if: always()

      - name: "Zip HTML Documentation"
        uses: vimtor/action-zip@v1.1
        with:
          files: docs/build/html/*
          dest: HTML-doc-${{env.PACKAGE_NAME}}.zip
        if: always()

      - name: "Upload HTML Documentation"
        uses: actions/upload-artifact@v3
        with:
          name: HTML-doc-${{env.PACKAGE_NAME}}.zip
          path: docs/build/html
        if: always()
