name: gate

on:
# Can be called by the CI
  workflow_call:
    inputs:
      python_versions:
        required: false
        type: string
        default: '["3.8"]'
      ANSYS_VERSION:
        required: false
        type: string
        default: "241"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
# Can be called manually
  workflow_dispatch:
    inputs:
      python_versions:
        description: "Python interpreters to test."
        required: true
        type: string
        default: '["3.8"]'
      ANSYS_VERSION:
        description: "ANSYS version"
        required: true
        type: string
        default: "241"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core

jobs:
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.set_array.outputs.python_versions }}
    steps:
      - id: set_array
        run: |
          echo "python_versions=${{ toJSON(inputs.python_versions) }}" >> $GITHUB_OUTPUT

  Gate:
    name: "Gate"
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(needs.setup.outputs.python_versions) }}
        os: ["windows-latest", "ubuntu-latest"]

    steps:
      - uses: actions/checkout@v3

      - name: "Set licensing if necessary"
        if: inputs.ANSYS_VERSION > 231
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: "Setup Python"
        uses: actions/setup-python@v4.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install requirements"
        run: pip install -r requirements/requirements_build.txt

      - name: "Build the wheel"
        shell: bash
        run: |
          if [ ${{ matrix.os }} == "ubuntu-latest" ]; then
              export platform="manylinux_2_17"
          else
              export platform="win"
          fi
          python .ci/build_wheel.py -p $platform -w

      - name: "Expose the wheel"
        shell: bash
        id: wheel
        working-directory: dist
        run: |
          export name=`ls ansys_dpf_core*.whl`
          echo ${name}
          echo "wheel_name=${name[0]}" >> $GITHUB_OUTPUT

      - name: "Upload wheel to artifacts"
        if: inputs.wheel == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.wheel.outputs.wheel_name }}
          path: dist/${{ steps.wheel.outputs.wheel_name }}

      - name: "Define wheelhouse name"
        if: inputs.wheelhouse == 'true'
        shell: bash
        id: wheelhouse
        run: |
          export wheel_name=${{ steps.wheel.outputs.wheel_name }}
          export version=${wheel_name:15:5}
          export name=ansys-dpf-core-v$version-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}.zip
          echo "name=${name}" >> $GITHUB_OUTPUT

      - name: "Zip wheelhouse"
        if: inputs.wheelhouse == 'true'
        uses: vimtor/action-zip@v1.1
        with:
          files: dist
          dest: ${{ steps.wheelhouse.outputs.name }}

      - name: "Upload wheelhouse to artifacts"
        if: inputs.wheelhouse == 'true'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ steps.wheelhouse.outputs.name }}
          path: ${{ steps.wheelhouse.outputs.name }}
          retention-days: 7

      - name: "Install package wheel"
        shell: bash
        run: |
          pip install dist/${{ steps.wheel.outputs.wheel_name }}[plotting]

      - name: "Install DPF"
        id: set-server-path
        uses: ansys/pydpf-actions/install-dpf-server@v2.3
        with:
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          standalone_suffix: ${{ inputs.standalone_suffix }}
          ANSYS_VERSION : ${{inputs.ANSYS_VERSION}}

      - name: "Check licences of packages"
        uses: ansys/pydpf-actions/check-licenses@v2.3

      - name: "Test import"
        shell: bash
        working-directory: tests
        run: python -c "from ansys.dpf import core"

      - name: "Prepare Testing Environment"
        uses: ansys/pydpf-actions/prepare_tests@v2.3
        with:
          DEBUG: true

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Check examples with gatebin"
        shell: bash
        working-directory: .ci
        run: |
          echo on
          python run_examples.py

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Uninstall gatebin"
        shell: bash
        run: |
          pip uninstall -y ansys-dpf-gatebin
        if: always()

      - name: "Check sanity without gatebin INPROCESS"
        shell: bash
        working-directory: .ci
        run: |
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: INPROCESS
        if: always()

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Check sanity without gatebin GRPC"
        shell: bash
        working-directory: .ci
        run: |
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: GRPC
        if: always()

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Check sanity without gatebin LEGACYGRPC"
        shell: bash
        working-directory: .ci
        run: |
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: LEGACYGRPC
        if: always()

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()
