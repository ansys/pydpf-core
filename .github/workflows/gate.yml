name: gate

on:
# Can be called by the CI
  workflow_call:
    inputs:
      python_versions:
        required: false
        type: string
        default: '["3.7"]'
      ANSYS_VERSION:
        required: false
        type: string
        default: "232"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
# Can be called manually
  workflow_dispatch:
    inputs:
      python_versions:
        description: "Python interpreters to test."
        required: true
        type: string
        default: '["3.7"]'
      ANSYS_VERSION:
        description: "ANSYS version"
        required: true
        type: string
        default: "232"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core

jobs:
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.set_array.outputs.python_versions }}
    steps:
      - id: set_array
        run: |
          echo "python_versions=${{ toJSON(inputs.python_versions) }}" >> $GITHUB_OUTPUT

  Gate:
    name: "Gate"
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(needs.setup.outputs.python_versions) }}
        os: ["windows-latest", "ubuntu-latest"]

    steps:
      - uses: actions/checkout@v3

      - name: "Set licensing if necessary"
        if: inputs.ANSYS_VERSION > 231
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Build Package"
        uses: ansys/pydpf-actions/build_package@v2.3
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{inputs.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: false
          wheel: false
          extra-pip-args: ${{ format('--find-links ./dpf-standalone/v{0}/dist', inputs.ANSYS_VERSION) }}
          standalone_suffix: ${{ inputs.standalone_suffix }}
          custom-requirements: ${{ inputs.custom-requirements }}

      - name: "Prepare Testing Environment"
        uses: ansys/pydpf-actions/prepare_tests@v2.3
        with:
          DEBUG: true

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Check examples with gatebin"
        shell: bash
        working-directory: .ci
        run: |
          echo on
          python run_examples.py

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Uninstall gatebin"
        shell: bash
        run: |
          pip uninstall -y ansys-dpf-gatebin
        if: always()

      - name: "Check sanity without gatebin INPROCESS"
        shell: bash
        working-directory: .ci
        run: |
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: INPROCESS
        if: always()

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Check sanity without gatebin GRPC"
        shell: bash
        working-directory: .ci
        run: |
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: GRPC
        if: always()

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Check sanity without gatebin LEGACYGRPC"
        shell: bash
        working-directory: .ci
        run: |
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: LEGACYGRPC
        if: always()

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()
