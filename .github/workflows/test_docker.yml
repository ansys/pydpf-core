name: test_docker

on:
# Can be called by the CI
  workflow_call:
    inputs:
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      custom-requirements:
        description: "Path to requirements.txt file to install"
        required: false
        type: string
        default: ''
      custom-wheels:
        description: "extra pip '--find-links XXX' argument to find custom dpf wheels"
        required: false
        type: string
        default: ''
# Can be called manually
  workflow_dispatch:
    inputs:
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
      custom-requirements:
        description: "Path to requirements.txt file to install"
        required: false
        type: string
        default: ''
      custom-wheels:
        description: "extra pip '--find-links XXX' argument to find custom dpf wheels"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  ANSYS_VERSION: 232
  ANSYS_DPF_ACCEPT_LA: Y
  ANSYSLMD_LICENSE_FILE: 1055@${{secrets.LICENSE_SERVER}}

jobs:
  docker_tests:
    name: "Build and Test On Docker"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        os: ["ubuntu-latest"]

    steps:
      - uses: actions/checkout@v3
      - name: "Build Docker Package"
        uses: pyansys/pydpf-actions/install-docker-server-and-python-packages@v2.3
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheel: false
          wheelhouse: false
          extra-pip-args: ${{ inputs.custom-wheels && format('--find-links {0}', inputs.custom-wheels) || '' }}
          standalone_suffix: ${{ inputs.standalone_suffix }}
          custom-requirements: ${{ inputs.custom-requirements }}

      - name: "Prepare Testing Environment"
        uses: pyansys/pydpf-actions/prepare_tests@v2.3
        with:
          DEBUG: true

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Separate long Core tests"
        shell: pwsh
        run: |
          .github\workflows\scripts\separate_long_core_tests.ps1

      - name: "Set pytest arguments"
        shell: bash
        run: |
          echo "COVERAGE=--cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --log-level=ERROR" >> $GITHUB_ENV
          echo "RERUNS=--reruns 2 --reruns-delay 1" >> $GITHUB_ENV

      - name: "Test API"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results.xml tests/.

      - name: "Test API test_launcher"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results2.xml test_launcher/.

      - name: "Test API test_server"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results3.xml test_server/.

      - name: "Test API test_local_server"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results4.xml test_local_server/.

      - name: "Test API test_multi_server"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results5.xml test_multi_server/.

      - name: "Test API test_remote_workflow"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 3
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results6.xml test_remote_workflow/.

      - name: "Test API test_remote_operator"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results7.xml test_remote_operator/.

      - name: "Test API test_workflow"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results8.xml test_workflow/.

      - name: "Test API test_service"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 2
          shell: bash
          command: |
            pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=../tests/junit/test-results9.xml test_service/.

      - name: "Test API Entry"
        shell: bash
        working-directory: tests
        run: |
          cd entry
          pytest $DEBUG $COVERAGE --cov-append $RERUNS --junitxml=junit/test-results10.xml  .
        if: always()
        timeout-minutes: 10

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ matrix.python-version }}_${{ matrix.os }}_pytest_${{ env.ANSYS_VERSION }}_docker
          path: tests/junit/test-results.xml
        timeout-minutes: 5

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
