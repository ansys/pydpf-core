name: Build and Test Windows

on: workflow_call

jobs:
  Windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.8", "3.9"]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: ${{ matrix.python_version }}

      - id: install-dpf
        uses: pyansys/pydpf-actions/install-dpf-server@v1
        with:
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          ANSYS_VERSION : ${{env.ANSYS_VERSION}}

      - name: Install ansys-dpf-core
        uses: pyansys/pydpf-actions/install-package@v1

      - name: Test import
        working-directory: tests
        run: python -c "from ansys.dpf import core; print(core.Report(gpu=False))"

      - name: Check licences of packages
        uses: pyansys/pydpf-actions/check-licenses@v1

      - name: Retrieve PyDPF-Core version
        run: |
          echo "::set-output name=VERSION::$(python -c "from ansys.dpf.core import __version__; print(__version__)")"
          echo "PyDPF-Core version is: $(python -c "from ansys.dpf.core import __version__; print(__version__)")"
        id: version

      - name: Upload wheel to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}_wheel
          path: ./dist/*

      - name: Generate wheelhouse
        run: |
          pip wheel . -w wheelhouse
          pip freeze > wheelhouse/requirements.txt

      - name: Zip wheelhouse
        uses: vimtor/action-zip@v1
        with:
          files: wheelhouse
          dest: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python_version }}.zip

      - name: Upload wheelhouse to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python_version }}
          path: '*.zip'
          retention-days: 7

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test offscreen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: Install Test Environment
        run: |
          pip install -r requirements_test.txt
        if: always()

      - name: Test API Docstrings
        run: |
           pytest --doctest-modules --junitxml=junit/test-doctests-results.xml ansys/dpf/core

      - name: Kill all servers
        uses: pyansys/pydpf-actions/kill-dpf-servers@v1
        continue-on-error: true

      - name: Publish Doc Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_doctest
          path: junit/test-doctests-results.xml
        if: always()

      - name: Test Core API
        run: |
          cd tests
          New-Item -Path ".\..\" -Name "local_server_test" -ItemType "directory"
          Copy-Item -Path ".\test_local_server.py",".\test_multi_server.py", ".\test_workflow.py" -Destination ".\..\local_server_test\"
          Copy-Item -Path ".\conftest.py" -Destination ".\..\local_server_test\conftest.py"
          Remove-Item -Path ".\test_local_server.py",".\test_multi_server.py", ".\test_workflow.py"
          pytest --log-level=ERROR --junitxml=junit/test-results1.xml --reruns 2 .

      - name: Test Core API 2
        run: |
          cd local_server_test
          pytest --log-level=ERROR --junitxml=../tests/junit/test-results2.xml --reruns 2 .
        timeout-minutes: 10

      - name: Kill all servers
        uses: pyansys/pydpf-actions/kill-dpf-servers@v1
        continue-on-error: true

      - name: Publish Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_pytest
          path: tests/junit/test-results*.xml
        if: always()