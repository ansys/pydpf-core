name: CI

on:
  pull_request:
     branches-ignore:
       - '*no-ci*'
  push:
    tags:
      - "v*"
    branches:
      - master
      - "release*"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  ANSYS_VERSION: 222

jobs:
  Style:
    name: Style
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: "Setup Python"
        uses: actions/setup-python@v4.2.0
        with:
          python-version: 3.8

      - name: "Install style requirements"
        run: |
          pip install -r requirements/requirements_style.txt --disable-pip-version-check

      - name: "Codespell"
        run: |
          make codespell
        continue-on-error: true

      - name: "flake8"
        run: |
          make flake8

  Tests:
    uses: ./.github/workflows/tests.yml
    with:
      ANSYS_VERSION: ${{ env.ANSYS_VERSION }}
      python_versions: '["3.7"]'
      wheel: true
      wheelhouse: true

  Tests_release:
    if: startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/tests.yml
    with:
      ANSYS_VERSION: ${{ env.ANSYS_VERSION }}
      python_versions: '["3.8", "3.9"]'
      wheelhouse: true

  Examples_master:
    if: startsWith(github.head_ref, 'master')
    uses: ./.github/workflows/examples.yml
    with:
      ANSYS_VERSION: ${{ env.ANSYS_VERSION }}
      python_versions: '["3.7"]'

  Examples_release:
    if: startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/examples.yml
    with:
      ANSYS_VERSION: ${{ env.ANSYS_VERSION }}
      python_versions: '["3.7", "3.8", "3.9"]'

  Documentation:
    if: startsWith(github.head_ref, 'master') || startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/documentation.yml
    with:
      ANSYS_VERSION: ${{ env.ANSYS_VERSION }}

  Retro:
    name: Retro
    if: startsWith(github.head_ref, 'master') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        os: ["windows-latest", "ubuntu-18.04"]
        ANSYS_VERSION: ["221"]
    steps:
      - uses: actions/checkout@v3

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{matrix.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheel: false

      - name: "Install ansys-grpc-dpf==0.4.0"
        shell: pwsh
        run: |
          pip install ansys-grpc-dpf==0.4.0

  Gate:
    name: Gate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        os: ["windows-latest"]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.2.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: false
          wheel: false

      - name: "Install OpenGL"
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: "Install test off-screen rendering"
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: "Check examples with gatebin"
        shell: cmd
        run: |
          echo on
          cd .ci
          dir .
          python run_examples.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2.dev1
        if: always()

      - name: "Uninstall gatebin"
        shell: bash
        run: |
          pip uninstall -y ansys-dpf-gatebin

      - name: "Check sanity without gatebin INPROCESS"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: INPROCESS

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2.dev1
        if: always()

      - name: "Check sanity without gatebin GRPC"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: GRPC

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2.dev1
        if: always()

      - name: "Check sanity without gatebin LEGACYGRPC"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: LEGACYGRPC

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2.dev1
        if: always()

  Draft_Release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [Style, Tests, Examples, Documentation, Retro, Gate]
    runs-on: ubuntu-latest
    steps:
      - name: "Set up Python"
        uses: actions/setup-python@v4.1.0
        with:
          python-version: 3.9

      - name: "Download artifacts"
        uses: actions/download-artifact@v3

      - name: "Display downloaded files"
        run: ls -R

      - name: "Create draft release"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.zip
          draft: true
          generate_release_notes: true

      - name: "Upload to Test PyPi"
        run: |
          pip install twine
          twine upload --repository testpypi --skip-existing ./**/*.whl
          twine upload --repository testpypi --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
