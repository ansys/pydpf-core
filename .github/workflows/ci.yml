name: GitHub Actions

on:
  pull_request:
     branches-ignore:
       - '*no-ci*'
  push:
    tags:
      - "*"
    branches:
      - master
      - "release*"
      - "merge*"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  ANSYS_VERSION: 222

jobs:
  Build_and_Test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        os: ["windows-latest", "ubuntu-18.04"]

    steps:
      - uses: actions/checkout@v3

      - name: "Add gatebin to install for Linux"
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "extra=dpf-standalone/v${{env.ANSYS_VERSION}}/ansys_dpf_gatebin-0.1.dev1-py3-none-manylinux_2_17_x86_64.whl" >> $GITHUB_ENV

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: true
          extra-pip-args: ${{ env.extra }}

      - name: "Prepare Testing Environment"
        uses: pyansys/pydpf-actions/prepare_tests@v2.2
        with:
          DEBUG: true

      - name: "Test Docstrings"
        uses: pyansys/pydpf-actions/test_docstrings@v2.2
        with:
          MODULE: ${{env.MODULE}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}

      - name: "Test API"
        shell: bash
        working-directory: tests
        run: |
          echo "ARGS=--cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --log-level=ERROR --reruns 2" >> $GITHUB_ENV
          pytest $DEBUG $ARGS --junitxml=junit/test-results.xml --ignore=test_launcher.py --ignore=test_server.py --ignore=test_local_server.py --ignore=test_multi_server.py --ignore=test_remote_workflow.py --ignore=test_remote_operator.py --ignore=test_workflow.py .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API test_launcher"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG $ARGS --cov-append --junitxml=../tests/junit/test-results_launcher.xml test_launcher.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API test_server"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG $ARGS --cov-append --junitxml=../tests/junit/test-results_server.xml test_server.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API test_local_server"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG $ARGS --cov-append --junitxml=../tests/junit/test-results_local_server.xml test_local_server.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API test_multi_server"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG $ARGS --cov-append --junitxml=../tests/junit/test-results_multi_server.xml test_multi_server.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API test_remote_workflow"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG $ARGS --cov-append --junitxml=../tests/junit/test-results_remote_workflow.xml test_remote_workflow.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API test_remote_operator"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG $ARGS --cov-append --junitxml=../tests/junit/test-results_remote_operator.xml test_remote_operator.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API test_workflow"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG $ARGS --cov-append --junitxml=../tests/junit/test-results_workflow.xml test_workflow.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_pytest
          path: tests/junit/test-results.xml

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2

      - name: 'Upload to PyPi'
        if: contains(github.ref, 'refs/tags')
        shell: cmd
        run: |
          pip install twine
          python setup.py sdist
          twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{secrets.PYPI_TOKEN}}
          TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"

  build_doc:
    name: Documentation
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.2.0
        with:
          python-version: 3.8

      - name: "Build Package"
        id: build-package
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: false

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test offscreen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1

      - name: Install documentation packages for Python
        run: |
          pip install -r requirements/requirements_docs.txt

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: Build Documentation
        shell: cmd
        run: |
          cd .ci
          build_doc.bat > ..\docs\log.txt && type ..\docs\log.txt 2>&1
        timeout-minutes: 20

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: Publish Documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: doc-ansys-dpf-core
          path: ./docs/build/html/*
        if: always()

      - name: Publish Documentation log
        uses: actions/upload-artifact@v3
        with:
          name: doc-ansys-dpf-core-log
          path: ./docs/*.txt
        if: always()

      - name: Init git and add docs
        if: contains(github.ref, 'refs/tags')
        run: |
          cd docs/build/html
          git init
          git checkout -b $env:GH_DOC_BRANCH
          git config --global user.name "pyansys-ci-bot"
          git config --global user.email "$env:GH_EMAIL"
          New-Item -ItemType file .nojekyll
          git add .
          git commit -m "Documentation generated"
        env:
          GH_DOC_BRANCH: gh-pages
          GH_EMAIL: pyansys.github.bot@ansys.com

      - name: Publish GitHub Pages merge commit
        if: contains(github.ref, 'refs/tags')
        run: |
          cd docs/build/html
          git remote add origin https://${{secrets.PYANSYS_CI_BOT_TOKEN}}@github.com/pyansys/DPF-Core-docs
          git push -u origin $env:GH_DOC_BRANCH --force
        env:
          GH_DOC_BRANCH: gh-pages

  run_examples:
    name: Run Examples with/without bin
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        os: ["windows-latest"]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.2.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: false

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test offscreen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: "Check examples with gatebin"
        shell: cmd
        run: |
          echo on
          cd .ci
          dir .
          python run_examples.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Uninstall gatebin"
        shell: bash
        run: |
          pip uninstall -y ansys-dpf-gatebin

      - name: "Check sanity without gatebin INPROCESS"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: INPROCESS

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2


      - name: "Check sanity without gatebin GRPC"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: GRPC

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Check sanity without gatebin LEGACYGRPC"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: LEGACYGRPC

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2


