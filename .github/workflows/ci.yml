name: GitHub Actions

on:
  pull_request:
    branches-ignore:
      - "*no-ci"

  push:
    tags:
      - "*"
    branches:
      - master
      - "release*"

#concurrency:
#  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
#  cancel-in-progress: true

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  ANSYS_VERSION: 221

jobs:
#  Build_and_Test:
#    name: Build and Test
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: ["3.8"]
#        os: ["windows-latest"]
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: "Build Package"
#        uses: pyansys/pydpf-actions/build_package@v2.1
#        with:
#          python-version: ${{ matrix.python-version }}
#          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
#          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
#          MODULE: ${{env.MODULE}}
#          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
#          install_extras: plotting
#
#      - name: "Test Package"
#        uses: pyansys/pydpf-actions/test_package@v2.1
#        with:
#          MODULE: ${{env.MODULE}}
#
#      - name: 'Upload to PyPi'
#        if: contains(github.ref, 'refs/tags')
#        shell: cmd
#        run: |
#          pip install twine
#          python setup.py sdist
#          twine upload --skip-existing dist/*
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{secrets.PYPI_TOKEN}}
#          TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"

  build_doc:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

########################################################################

      - name: "Setup Python"
        uses: actions/setup-python@v4.0.0
        with:
          python-version: 3.8

#      - name: "Install OS packages"
#        shell: bash
#        run: |
#          sudo apt update
#          sudo apt install pandoc texlive-latex-extra latexmk

      - name: "Install DPF"
        uses: pyansys/pydpf-actions/install-dpf-server@v2.1
        with:
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          ANSYS_VERSION : ${{env.ANSYS_VERSION}}

      - name: "Install local package"
        uses: pyansys/pydpf-actions/install-package@v2.0

      - name: "Install extras"
        shell: bash
        run: |
          pip install .[plotting]

      - name: "Test import"
        shell: bash
        working-directory: tests
        run: python -c "from ansys.dpf import core; print(core.Report(gpu=False))"

      - name: "Setup headless display"
        uses: pyvista/setup-headless-display-action@v1

      - name: "Install documentation requirements"
        run: |
          pip install -r requirements_docs.txt

      - name: "Build sphinx doc"
        shell: bash
        run: |
          export SPHINX_APIDOC_OPTIONS=inherited-members
          sphinx-apidoc -o docs/source/api ansys -f --implicit-namespaces --separate --no-headings

      - name: "Build HTML Documentation"
        shell: bash
        working-directory: docs
        run: |
          make clean
          make html

      - name: "Zip Documentation"
        uses: vimtor/action-zip@v1
        with:
          files: docs/build
          dest: docs/archive/doc-ansys-dpf-core.zip

      - name: "Upload Documentation"
        uses: actions/upload-artifact@v3
        with:
          name: doc-ansys-dpf-core
          path: docs/archive/doc-ansys-dpf-core.zip

      - name: "Upload Documentation Build log"
        uses: actions/upload-artifact@v3
        with:
          name: doc-ansys-dpf-core-log
          path: ./docs/*.txt

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.1

###################################################################

      - name: Init git and add docs
        if: contains(github.ref, 'refs/tags')
        run: |
          cd docs/build/html
          git init
          git checkout -b $env:GH_DOC_BRANCH
          git config --global user.name "pyansys-ci-bot"
          git config --global user.email "$env:GH_EMAIL"
          New-Item -ItemType file .nojekyll
          git add .
          git commit -m "Documentation generated"
        env:
          GH_DOC_BRANCH: gh-pages
          GH_EMAIL: pyansys.github.bot@ansys.com

      - name: Publish GitHub Pages merge commit
        if: contains(github.ref, 'refs/tags')
        run: |
          cd docs/build/html
          git remote add origin https://${{secrets.PYANSYS_CI_BOT_TOKEN}}@github.com/pyansys/DPF-Core-docs
          git push -u origin $env:GH_DOC_BRANCH --force
        env:
          GH_DOC_BRANCH: gh-pages
