name: GitHub Actions

on:
  pull_request:
     branches-ignore:
       - '*no-ci*'
  push:
    tags:
      - "*"
    branches:
      - master
      - "release*"

env:
  PYANSYS_OFF_SCREEN: True
  DPF_PORT: 32772
  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_PIP_CACHE: 0
  PACKAGE_NAME: ansys_dpf_core

jobs:

  test_windows:
    name: Windows
    runs-on: windows-2019

    env:
      ANSYS_VERSION: 221

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: 3.8

      - id: install-dpf 
        uses: pyansys/pydpf-actions/install-dpf-server@v1
        with:
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          ANSYS_VERSION : ${{env.ANSYS_VERSION}}

      - name: Set AWP_ROOT$env:ANSYS_VERSION
        run: |
          echo AWP_ROOT$env:ANSYS_VERSION
          echo "AWP_ROOT$env:ANSYS_VERSION=${{ steps.install-dpf.outputs.SERVER }}"  | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Install ansys-dpf-core
        shell: cmd
        run: |
          pip install certifi==2020.12.5
          pip install protobuf==3.19.4
          pip install grpcio==1.38.0
          pip install google-api-python-client==1.7.11
          pip install -r requirements_build.txt
          python setup.py bdist_wheel
          FOR /F %%a in ('dir /s/b dist\*.whl') do SET WHEELPATH=%%a
          ECHO %WHEELPATH%
          cd tests
          pip install %WHEELPATH%
          python -c "from ansys.dpf import core; print(core.Report(gpu=False))"

      - name: Retrieve PyDPF-Core version
        run: |
          echo "::set-output name=VERSION::$(python -c "from ansys.dpf.core import __version__; print(__version__)")"
          echo "PyDPF-Core version is: $(python -c "from ansys.dpf.core import __version__; print(__version__)")"
        id: version

      - name: Upload wheel to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}_wheel
          path: ./dist/*

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test offscreen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: Install Test Environment
        run: |
          pip install -r requirements_test.txt
        if: always()

      - name: Test API Docstrings
        run: |
           pytest --doctest-modules --junitxml=junit/test-doctests-results.xml ansys/dpf/core

      - name: Kill all servers
        shell: cmd
        run: |
          tasklist /FI "IMAGENAME eq Ans.Dpf.Grpc.exe" 2>NUL | find /I /N "Ans.Dpf.Grpc.exe">NUL
          ECHO %ERRORLEVEL%
          if "%ERRORLEVEL%"=="0"(taskkill /f /im Ans.Dpf.Grpc.exe)
        continue-on-error: true

      - name: Publish Doc Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_doctest
          path: junit/test-doctests-results.xml
        if: always()

      - name: Test Core API
        run: |
          cd tests
          New-Item -Path ".\..\" -Name "local_server_test" -ItemType "directory"
          Copy-Item -Path ".\test_local_server.py",".\test_multi_server.py", ".\test_workflow.py" -Destination ".\..\local_server_test\"
          Copy-Item -Path ".\conftest.py" -Destination ".\..\local_server_test\conftest.py"
          Remove-Item -Path ".\test_local_server.py",".\test_multi_server.py", ".\test_workflow.py"
          pytest --log-level=ERROR --junitxml=junit/test-results1.xml --reruns 2 .

      - name: Test Core API 2
        run: |
          cd local_server_test
          pytest --log-level=ERROR --junitxml=../tests/junit/test-results2.xml --reruns 2 .
        timeout-minutes: 10

      - name: Kill all servers
        shell: cmd
        run: |
          tasklist /FI "IMAGENAME eq Ans.Dpf.Grpc.exe" 2>NUL | find /I /N "Ans.Dpf.Grpc.exe">NUL
          ECHO %ERRORLEVEL%
          if "%ERRORLEVEL%"=="0"(taskkill /f /im Ans.Dpf.Grpc.exe)
        continue-on-error: true

      - name: Publish Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_pytest
          path: tests/junit/test-results*.xml
        if: always()

  build_doc:
    name: Documentation
    runs-on: windows-2019

    env:
      ANSYS_VERSION: 221

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: 3.8

      - id: install-dpf
        uses: pyansys/pydpf-actions/install-dpf-server@v1
        with:
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          ANSYS_VERSION : ${{env.ANSYS_VERSION}}

      - name: Set AWP_ROOT$env:ANSYS_VERSION
        run: echo "AWP_ROOT$env:ANSYS_VERSION=${{ steps.install-dpf.outputs.SERVER }}"  | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Set SERVER
        run: echo "SERVER=$env:AWP_ROOT221"  | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Install ansys-dpf-core
        shell: cmd
        run: |
          pip install -r requirements_build.txt
          python setup.py bdist_wheel
          FOR /F %%a in ('dir /s/b dist\*.whl') do SET WHEELPATH=%%a
          ECHO %WHEELPATH%
          cd tests
          pip install %WHEELPATH%
          python -c "from ansys.dpf import core; print(core.Report(gpu=False))"

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test offscreen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: Install documentation packages for Python
        run: |
          pip install -r requirements_docs.txt

      - name: Build Documentation
        shell: cmd
        run: |
          cd .ci
          build_doc.bat > ..\docs\log.txt 2>&1
        timeout-minutes: 20

      - name: DOCUMENTATION zip artifacts
        run: |
          7z a -tzip ./docs/archive/doc-ansys-dpf-core.zip ./docs/build
        if: always()

      - name: Kill all servers
        shell: cmd
        run: |
          tasklist /FI "IMAGENAME eq Ans.Dpf.Grpc.exe" 2>NUL | find /I /N "Ans.Dpf.Grpc.exe">NUL
          ECHO %ERRORLEVEL%
          if "%ERRORLEVEL%"=="0"(taskkill /f /im Ans.Dpf.Grpc.exe)
        continue-on-error: true
        if: always()

      - name: Publish Documentation artifact
        uses: actions/upload-artifact@v2
        with:
          name: doc-ansys-dpf-core
          path: ./docs/archive/doc-ansys-dpf-core.zip
        if: always()

      - name: Publish Documentation log
        uses: actions/upload-artifact@v2
        with:
          name: doc-ansys-dpf-core-log
          path: ./docs/*.txt
        if: always()

      - name: Init git and add docs
        if: contains(github.ref, 'refs/tags')
        run: |
          cd docs/build/html
          git init
          git checkout -b $env:GH_DOC_BRANCH
          git config --global user.name "pyansys-ci-bot"
          git config --global user.email "$env:GH_EMAIL"
          New-Item -ItemType file .nojekyll
          git add .
          git commit -m "Documentation generated"
        env:
          GH_DOC_BRANCH: gh-pages
          GH_EMAIL: pyansys.github.bot@ansys.com

      - name: Publish GitHub Pages merge commit
        if: contains(github.ref, 'refs/tags')
        run: |
          cd docs/build/html
          git remote add origin https://${{secrets.PYANSYS_CI_BOT_TOKEN}}@github.com/pyansys/DPF-Core-docs
          git push -u origin $env:GH_DOC_BRANCH --force
        env:
          GH_DOC_BRANCH: gh-pages

  generate_wheelhouses:
    name: Generate wheelhouse
    needs: [test_windows]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.8'] # ['3.7', '3.8', '3.9']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_build.txt') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

      - name: Window pip cache
        uses: actions/cache@v2
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_build.txt') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install PyDPF-Core
        run: |
          pip install certifi==2020.12.5
          pip install protobuf==3.19.4
          pip install grpcio==1.38.0
          pip install google-api-python-client==1.7.11
          pip install .
          pip install -r requirements_build.txt
          pip install -r requirements_test.txt
          pip freeze | grep pytest | xargs pip uninstall -y
          pip install pip-licenses
          pip-licenses
          pip uninstall -y pip-licenses

      - name: Test import
        working-directory: tests
        run: python -c "from ansys.dpf import core; print(core.Report(gpu=False))"

# #     Only works for a tagged Release (and for Windows?)
#      - name: Get the version
#        id: version
#        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Retrieve PyDPF-Core version
        run: |
          echo "::set-output name=VERSION::$(python -c "from ansys.dpf.core import __version__; print(__version__)")"
          echo "PyDPF-Core version is: $(python -c "from ansys.dpf.core import __version__; print(__version__)")"
        id: version

      - name: Generate wheelhouse
        run: pip wheel . -w wheelhouse

      - name: Zip wheelhouse
        uses: vimtor/action-zip@v1
        with:
          files: wheelhouse
          dest: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}.zip

      - name: Upload wheelhouse to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}
          path: '*.zip'
          retention-days: 7

#      - name: Install twine
#        shell: cmd
#        run: |
#          python -m pip install --upgrade pip
#          pip install setuptools twine
#
#      - name: Build package
#        run: python setup.py sdist
#
#      - name: Publish distribution 📦 to Test PyPI
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
#          TWINE_REPOSITORY: test_${{ env.PACKAGE_NAME }}
##          TWINE_REPOSITORY_URL: "https://test.pypi.org/legacy/"
#        run: twine upload --verbose --skip-existing dist/*

  Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [generate_wheelhouses]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Install twine
        shell: cmd
        run: |
          python -m pip install --upgrade pip
          pip install setuptools twine

      - name: Build package
        run: python setup.py sdist

      - name: Publish distribution 📦 to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
        run: |
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
#         /!\ Do NOT publish to Pypi the zip containing the wheelhouses

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.pdf
            ./**/*.zip
