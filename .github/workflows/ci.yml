name: GitHub Actions

on:
  pull_request:
     branches-ignore:
       - '*no-ci*'
  push:
    tags:
      - "*"
    branches:
      - master
      - "release*"

env:
  PACKAGE_NAME: ansys-dpf-core
  ANSYS_VERSION: 221
  MODULE: core

jobs:
  test_windows:
    name: Windows
    runs-on: windows-2019

    env:
      ANSYS_VERSION: 221

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: 3.8

      - id: install-dpf
        uses: pyansys/pydpf-actions/install-dpf-server@v1
        with:
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          ANSYS_VERSION : ${{env.ANSYS_VERSION}}

      - name: Set AWP_ROOT$env:ANSYS_VERSION
        run: |
          echo AWP_ROOT$env:ANSYS_VERSION
          echo "AWP_ROOT$env:ANSYS_VERSION=${{ steps.install-dpf.outputs.SERVER }}"  | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Install ansys-dpf-core
        shell: cmd
        run: |
          pip install -r requirements_build.txt
          python setup.py bdist_wheel
          FOR /F %%a in ('dir /s/b dist\*.whl') do SET WHEELPATH=%%a
          ECHO %WHEELPATH%
          cd tests
          pip install %WHEELPATH%
          python -c "from ansys.dpf import core; print(core.Report(gpu=False))"

      - name: WHEEL publish artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ansys_dpf_core_wheel
          path: ./dist/*

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test offscreen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: Install Test Environment
        run: |
          pip install -r requirements_test.txt
        if: always()

      - name: Test API Docstrings
        run: |
           pytest --doctest-modules --junitxml=junit/test-doctests-results.xml ansys/dpf/core

      - name: Kill all servers
        shell: cmd
        run: |
          tasklist /FI "IMAGENAME eq Ans.Dpf.Grpc.exe" 2>NUL | find /I /N "Ans.Dpf.Grpc.exe">NUL
          ECHO %ERRORLEVEL%
          if "%ERRORLEVEL%"=="0"(taskkill /f /im Ans.Dpf.Grpc.exe)
        continue-on-error: true

      - name: Publish Doc Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ansys_dpf_core_doctest
          path: junit/test-doctests-results.xml
        if: always()

      - name: Test Core API
        run: |
          cd tests
          New-Item -Path ".\..\" -Name "local_server_test" -ItemType "directory"
          Copy-Item -Path ".\test_local_server.py",".\test_multi_server.py", ".\test_workflow.py" -Destination ".\..\local_server_test\"
          Copy-Item -Path ".\conftest.py" -Destination ".\..\local_server_test\conftest.py"
          Remove-Item -Path ".\test_local_server.py",".\test_multi_server.py", ".\test_workflow.py"
          pytest --cov=ansys.dpf.core --cov-report=xml --cov-report=html --log-level=ERROR --junitxml=junit/test-results1.xml --reruns 2 .

      - name: Test Core API 2
        run: |
          cd local_server_test
          pytest --cov=ansys.dpf.core --cov-report=xml --cov-report=html --cov-append --log-level=ERROR --junitxml=../tests/junit/test-results2.xml --reruns 2 .
        timeout-minutes: 10

      - name: Kill all servers
        shell: cmd
        run: |
          tasklist /FI "IMAGENAME eq Ans.Dpf.Grpc.exe" 2>NUL | find /I /N "Ans.Dpf.Grpc.exe">NUL
          ECHO %ERRORLEVEL%
          if "%ERRORLEVEL%"=="0"(taskkill /f /im Ans.Dpf.Grpc.exe)
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2

      - name: Publish Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ansys_dpf_core_pytest
          path: tests/junit/test-results*.xml
        if: always()

      - name: 'Upload to PyPi'
        if: contains(github.ref, 'refs/tags')
        shell: cmd
        run: |
          pip install twine
          python setup.py sdist
          twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{secrets.PYPI_TOKEN}}
          TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"

  build_doc:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: "Build Documentation"
        uses: pyansys/pydpf-actions/build_doc@v2.1
        with:
          python-version: "3.8"
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          build_extras: ../ansys/dpf/core/log.py ../ansys/dpf/core/help.py ../ansys/dpf/core/mapping_types.py ../ansys/dpf/core/ipconfig.py ../ansys/dpf/core/field_base.py ../ansys/dpf/core/cache.py ../ansys/dpf/core/misc.py ../ansys/dpf/core/check_version.py ../ansys/dpf/core/operators/build.py ../ansys/dpf/core/operators/specification.py ../ansys/dpf/core/vtk_helper.py
        continue-on-error: true
        timeout-minutes: 30
