name: CI

on:
  pull_request:
     branches-ignore:
       - '*no-ci*'
  push:
    tags:
      - "v*"
    branches:
      - master
      - "release*"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  ANSYS_VERSION: 222

jobs:
  Style:
    name: Style
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: "Setup Python"
        uses: actions/setup-python@v4.2.0
        with:
          python-version: 3.8

      - name: "Install style requirements"
        run: |
          pip install -r requirements/requirements_style.txt --disable-pip-version-check

      - name: "Codespell"
        run: |
          make codespell
        continue-on-error: true

      - name: "flake8"
        run: |
          make flake8

  Tests:
    uses: ./.github/workflows/tests.yml
    with:
      ANSYS_VERSION: "222"
      python_versions: '["3.7"]'
      wheel: true
      wheelhouse: true
    secrets:
      DPF_PIPELINE: ${{ secrets.DPF_PIPELINE }}

  Tests_release:
    if: startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/tests.yml
    with:
      ANSYS_VERSION: env.ANSYS_VERSION
      python_versions: '["3.8", "3.9"]'
      wheelhouse: true
    secrets:
      DPF_PIPELINE: ${{ secrets.DPF_PIPELINE }}

  Examples_master:
    if: startsWith(github.head_ref, 'master')
    uses: ./.github/workflows/examples.yml
    with:
      ANSYS_VERSION: env.ANSYS_VERSION
      python_versions: '["3.7"]'
    secrets:
      DPF_PIPELINE: ${{ secrets.DPF_PIPELINE }}

  Examples_release:
    if: startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/examples.yml
    with:
      ANSYS_VERSION: env.ANSYS_VERSION
      python_versions: '["3.7", "3.8", "3.9"]'
    secrets:
      DPF_PIPELINE: ${{ secrets.DPF_PIPELINE }}

  Documentation:
    if: startsWith(github.head_ref, 'master') || startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/documentation.yml
    with:
      ANSYS_VERSION: env.ANSYS_VERSION
    secrets:
      DPF_PIPELINE: ${{ secrets.DPF_PIPELINE }}

  Retro:
    name: Retro
    if: startsWith(github.head_ref, 'master') || startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/tests.yml
    with:
      ANSYS_VERSION: 221
      python_versions: '["3.7"]'
    secrets:
      DPF_PIPELINE: ${{ secrets.DPF_PIPELINE }}

  Gate:
    name: Gate
    if: startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/gate.yml
    secrets:
      DPF_PIPELINE: ${{ secrets.DPF_PIPELINE }}

  Draft_Release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [Style, Tests, Tests_release, Examples_master, Examples_release, Documentation, Retro, Gate]
    runs-on: ubuntu-latest
    steps:
      - name: "Set up Python"
        uses: actions/setup-python@v4.1.0
        with:
          python-version: 3.9

      - name: "Download artifacts"
        uses: actions/download-artifact@v3

      - name: "Display downloaded files"
        run: ls -R

      - name: "Create draft release"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.zip
          draft: true
          generate_release_notes: true

      - name: "Upload to Test PyPi"
        run: |
          pip install twine
          twine upload --repository testpypi --skip-existing ./**/*.whl
          twine upload --repository testpypi --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
