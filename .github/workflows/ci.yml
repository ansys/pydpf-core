name: GitHub Actions

on:
  pull_request:
     branches-ignore:
       - '*no-ci*'
  push:
    tags:
      - "*"
    branches:
      - master
      - "release*"
      - "merge*"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  ANSYS_VERSION: 222

jobs:
  Style_Check:
    name: Style Check
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.1.0
        with:
          python-version: 3.8

      - name: Install style requirements
        run: |
          pip install -r requirements/requirements_style.txt --disable-pip-version-check

      - name: Codespell
        run: |
          make codespell
        continue-on-error: true

      - name: flake8
        run: |
          make flake8

  Build_and_Test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        os: ["windows-latest", "ubuntu-18.04"]

    steps:
      - uses: actions/checkout@v3

      - name: "Add gatebin to install for Linux"
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "extra=dpf-standalone/v${{env.ANSYS_VERSION}}/ansys_dpf_gatebin-0.1.dev1-py3-none-manylinux_2_17_x86_64.whl" >> $GITHUB_ENV

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: true
          extra-pip-args: ${{ env.extra }}

      - name: "Prepare Testing Environment"
        uses: pyansys/pydpf-actions/prepare_tests@v2.2
        with:
          DEBUG: true

      - name: "Test Docstrings"
        uses: pyansys/pydpf-actions/test_docstrings@v2.2
        with:
          MODULE: ${{env.MODULE}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}

      - name: "Separate long Core tests"
        shell: pwsh
        run: |
          New-Item -Path ".\" -Name "local_server_test" -ItemType "directory"
          New-Item -Path ".\" -Name "test_workflow" -ItemType "directory"
          Copy-Item -Path "tests\conftest.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\conftest.py" -Destination ".\test_workflow\"
          Copy-Item -Path "tests\test_launcher.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_server.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_local_server.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_multi_server.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_workflow.py" -Destination ".\test_workflow\"
          Copy-Item -Path "tests\test_remote_workflow.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_remote_operator.py" -Destination ".\local_server_test\"
          Remove-Item -Path "tests\test_server.py"
          Remove-Item -Path "tests\test_launcher.py"
          Remove-Item -Path "tests\test_local_server.py"
          Remove-Item -Path "tests\test_multi_server.py"
          Remove-Item -Path "tests\test_workflow.py"
          Remove-Item -Path "tests\test_remote_workflow.py"
          Remove-Item -Path "tests\test_remote_operator.py"

      - name: "Test API"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG --cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --log-level=ERROR --junitxml=junit/test-results.xml --reruns 2 .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API 2"
        shell: bash
        working-directory: local_server_test
        run: |
          pytest $DEBUG --cov=ansys.dpf.core --cov-report=xml --cov-report=html --cov-append --log-level=ERROR --junitxml=../tests/junit/test-results2.xml --reruns 2 .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API 3"
        shell: bash
        working-directory: test_workflow
        run: |
          pytest $DEBUG --cov=ansys.dpf.core --cov-report=xml --cov-report=html --cov-append --log-level=ERROR --junitxml=../tests/junit/test-results3.xml --reruns 3 .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_pytest
          path: tests/junit/test-results.xml

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2

  Documentation:
    name: Documentation
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.1.0
        with:
          python-version: 3.8

      - name: "Build Package"
        id: build-package
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: false

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test off-screen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1

      - name: Install documentation packages for Python
        run: |
          pip install -r requirements/requirements_docs.txt

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: Build Documentation
        shell: cmd
        run: |
          cd .ci
          build_doc.bat > ..\docs\log.txt && type ..\docs\log.txt 2>&1
        timeout-minutes: 20

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Retrieve package version"
        shell: bash
        run: |
          echo "::set-output name=VERSION::$(python -c "from ansys.dpf.${{env.MODULE}} import __version__; print(__version__)")"
          echo "${{env.PACKAGE_NAME}} version is: $(python -c "from ansys.dpf.${{env.MODULE}} import __version__; print(__version__)")"
        id: version

      - name: Publish Documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-HTML_Documentation
          path: ./docs/build/html/*

      - name: Publish Documentation log
        uses: actions/upload-artifact@v3
        with:
          name: doc-ansys-dpf-core-log
          path: ./docs/*.txt

  Run_Examples:
    name: Run Examples with/without bin
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        os: ["windows-latest"]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: false

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test offscreen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: "Check examples with gatebin"
        shell: cmd
        run: |
          echo on
          cd .ci
          dir .
          python run_examples.py

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Uninstall gatebin"
        shell: bash
        run: |
          pip uninstall -y ansys-dpf-gatebin

      - name: "Check sanity without gatebin INPROCESS"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: INPROCESS

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2


      - name: "Check sanity without gatebin GRPC"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: GRPC

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Check sanity without gatebin LEGACYGRPC"
        shell: cmd
        run: |
          cd .ci
          python run_non_regression_examples.py
        env:
          DPF_SERVER_TYPE: LEGACYGRPC

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

  Retro-compatibility:
    name: Retro-compatibility
    if: startsWith(github.head_ref, 'master') || contains(github.head_ref, 'retro') || contains(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        os: ["windows-latest"]
        ANSYS_VERSION: ["221"]
    steps:
      - uses: actions/checkout@v3

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.2.dev1
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{matrix.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheel: false

      - name: "Install ansys-grpc-dpf==0.4.0"
        shell: pwsh
        run: |
          pip install ansys-grpc-dpf==0.4.0

      - name: "Prepare Testing Environment"
        uses: pyansys/pydpf-actions/prepare_tests@v2.2
        with:
          DEBUG: true

      - name: "Separate long Core tests"
        shell: pwsh
        run: |
          New-Item -Path ".\" -Name "local_server_test" -ItemType "directory"
          Copy-Item -Path "tests\conftest.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_launcher.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_server.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_local_server.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_multi_server.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_workflow.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_remote_workflow.py" -Destination ".\local_server_test\"
          Copy-Item -Path "tests\test_remote_operator.py" -Destination ".\local_server_test\"
          Remove-Item -Path "tests\test_server.py"
          Remove-Item -Path "tests\test_launcher.py"
          Remove-Item -Path "tests\test_local_server.py"
          Remove-Item -Path "tests\test_multi_server.py"
          Remove-Item -Path "tests\test_workflow.py"
          Remove-Item -Path "tests\test_remote_workflow.py"
          Remove-Item -Path "tests\test_remote_operator.py"

      - name: "Test API"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG --cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --log-level=ERROR --junitxml=junit/test-results.xml --reruns 2 .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Test API 2"
        shell: bash
        working-directory: local_server_test
        run: |
          pytest $DEBUG --ignore=test_server.py::test_shutting_down_when_deleted --cov=ansys.dpf.core --cov-report=xml --cov-report=html --cov-append --log-level=ERROR --junitxml=../tests/junit/test-results2.xml --reruns 2 .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_pytest_${{ matrix.ANSYS_VERSION }}
          path: tests/junit/test-results.xml

  Draft_Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [Build_and_Test, Documentation, Run_Examples, Style_Check, Retro-compatibility]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4.1.0
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*Documentation*.pdf
            ./**/*.zip
          draft: true
          generate_release_notes: true

      - name: Upload to Test PyPi
        run: |
          pip install twine
          twine upload --repository testpypi --skip-existing ./**/*.whl
          twine upload --repository testpypi --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
