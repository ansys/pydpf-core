name: examples_docker

on:
# Can be called by the CI
  workflow_call:
    inputs:
      python_versions:
        required: false
        type: string
        default: '["3.10"]'
      ANSYS_VERSION:
        required: false
        type: string
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''
# Can be called manually
  workflow_dispatch:
    inputs:
      python_versions:
        description: "Python interpreters to test."
        required: true
        type: string
        default: '["3.10"]'
      ANSYS_VERSION:
        description: "ANSYS version to run."
        required: false
        type: string
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  ANSYS_DPF_ACCEPT_LA: Y
  ANSYSLMD_LICENSE_FILE: 1055@${{secrets.LICENSE_SERVER}}

jobs:
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.set_array.outputs.python_versions }}
    steps:
      - id: set_array
        run: |
          echo "python_versions=${{ toJSON(inputs.python_versions) }}" >> $GITHUB_OUTPUT

  examples:
    name: "Run Examples"
    needs: setup
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(needs.setup.outputs.python_versions) }}
        os: ["ubuntu-latest", "macos-latest"]

    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install requirements"
        run: pip install -r requirements/requirements_build.txt

      - name: "Build the wheel"
        shell: bash
        run: |
          if [ ${{ matrix.os }} == "macos-latest" ]; then
              export platform="any" 
          elif [ ${{ matrix.os }} == "ubuntu-latest" ]; then
              export platform="manylinux_2_17"
          else
              export platform="win"
          fi
          python .ci/build_wheel.py -p $platform -w

      - name: "Expose the wheel"
        shell: bash
        id: wheel
        working-directory: dist
        run: |
          export name=`ls ansys_dpf_core*.whl`
          echo ${name}
          echo "wheel_name=${name[0]}" >> $GITHUB_OUTPUT

      - name: "Install package wheel"
        shell: bash
        run: |
          pip install dist/${{ steps.wheel.outputs.wheel_name }}[graphics]

      - name: "Install Colima for Docker on macOS"
        shell: bash
        if: (matrix.os == 'macos-latest')
        run: |          
          brew install colima
          /opt/homebrew/opt/colima/bin/colima start -f

      - name: Login in GitHub Container registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

      - name: "Install DPF"
        id: set-server-path
        shell: bash
        run: |
          export platform="linux"
          ansys_version=${{ inputs.ANSYS_VERSION || vars.ANSYS_VERSION_DEFAULT }}
          suffix=${{ inputs.standalone_suffix && format('.{0}', inputs.standalone_suffix) || '' }}
          version=${ansys_version:0:2}.${ansys_version:2:1}${suffix}
          tag=$platform-$version
          docker pull ghcr.io/ansys-dpf/dpf-standalone:$tag
          docker images
          echo "DPF_DOCKER=ghcr.io/ansys-dpf/dpf-standalone:$tag" >> $GITHUB_ENV

      - name: "Check licences of packages"
        uses: ansys/pydpf-actions/check-licenses@v2.3

      - name: "Test import"
        shell: bash
        working-directory: tests
        run: python -c "from ansys.dpf import core"

      - name: "Prepare Testing Environment"
        uses: ansys/pydpf-actions/prepare_tests@dependencies/bump_pyvista_setup-headless-display-action_to_v4
        with:
          DEBUG: true

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Run examples"
        shell: bash
        working-directory: .ci
        run: |
          echo on
          python run_examples.py
