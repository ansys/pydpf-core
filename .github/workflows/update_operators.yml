name: update_operators

on:
  push:
    branches:
      - "maint/fix_src_code_generation"
# Can be called manually or remotely
  workflow_dispatch:
    inputs:
      ANSYS_VERSION:
        description: "ANSYS version"
        required: false
        type: string
        default: "232"
      standalone_suffix:
        description: "Suffix of the branch on standalone"
        required: false
        type: string
        default: ''

env:
  PACKAGE_NAME: ansys-dpf-core
  MODULE: core
  extra: "--find-links=.github/ -e"
  ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
  ANSYS_DPF_ACCEPT_LA: Y

jobs:
  update_operators:
    name: "Update operators"
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: "Set licensing if necessary"
        if: inputs.ANSYS_VERSION > 231
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV
          echo "ANSYS_DPF_SERVER_CONTEXT=PREMIUM" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4.2.0
        with:
          python-version: ${{ inputs.python_version }}

      - name: "Build Package"
        id: build-package
        uses: pyansys/pydpf-actions/build_package@fix/reposition_extra_pip_arguments
        with:
          python-version: "3.10"
          ANSYS_VERSION: ${{ github.event.inputs.ANSYS_VERSION || '232' }}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheel: false
          wheelhouse: false
          extra-pip-args: ${{ env.extra }}
          standalone_suffix: ${{ github.event.inputs.standalone_branch_suffix || '' }}
          custom-requirements: ""

      - name: "Install requirements_build"
        run: |
          pip install -r requirements/requirements_build.txt

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Generate Operators"
        shell: bash
        working-directory: .ci
        run: |
          python code_generation.py
        timeout-minutes: 5

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()
