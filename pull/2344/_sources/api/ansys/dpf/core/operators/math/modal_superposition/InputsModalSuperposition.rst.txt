





:class:`InputsModalSuperposition`
=================================


.. py:class:: ansys.dpf.core.operators.math.modal_superposition.InputsModalSuperposition(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   modal_superposition operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.modal_superposition()
   >>> my_modal_basis = dpf.FieldsContainer()
   >>> op.inputs.modal_basis.connect(my_modal_basis)
   >>> my_solution_in_modal_space = dpf.FieldsContainer()
   >>> op.inputs.solution_in_modal_space.connect(my_solution_in_modal_space)
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)






.. py:currentmodule:: InputsModalSuperposition

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~modal_basis`
            - Allows to connect modal_basis input to the operator.
          * - :py:attr:`~solution_in_modal_space`
            - Allows to connect solution_in_modal_space input to the operator.
          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.modal_superposition import InputsModalSuperposition

Property detail
---------------

.. py:property:: modal_basis
   :type: ansys.dpf.core.inputs.Input


   Allows to connect modal_basis input to the operator.

   One field by mode with each field representing a mode shape on nodes or elements.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.modal_superposition()
   >>> op.inputs.modal_basis.connect(my_modal_basis)
   >>> # or
   >>> op.inputs.modal_basis(my_modal_basis)

.. py:property:: solution_in_modal_space
   :type: ansys.dpf.core.inputs.Input


   Allows to connect solution_in_modal_space input to the operator.

   One field by time/frequency with each field having a ponderating coefficient for each mode of the modal_basis pin.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.modal_superposition()
   >>> op.inputs.solution_in_modal_space.connect(my_solution_in_modal_space)
   >>> # or
   >>> op.inputs.solution_in_modal_space(my_solution_in_modal_space)

.. py:property:: time_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect time_scoping input to the operator.

   Compute the result on a subset of the time frequency domain defined in the solution_in_modal_space fields container.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.modal_superposition()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: mesh_scoping
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mesh_scoping input to the operator.

   Compute the result on a subset of the space domain defined in the modal_basis fields container.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.modal_superposition()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




