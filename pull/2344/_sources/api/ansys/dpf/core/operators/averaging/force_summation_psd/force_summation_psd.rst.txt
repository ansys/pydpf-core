





:class:`force_summation_psd`
============================


.. py:class:: ansys.dpf.core.operators.averaging.force_summation_psd.force_summation_psd(nodal_scoping=None, elemental_scoping=None, streams=None, data_sources=None, spoint=None, abs_rel_key=None, signif=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes the sum of elemental forces contribution on a set of nodes in
   Global Coordinate System for a PSD analysis. Equivalent to MAPDL
   FSUM/NFORCE.


   :param nodal_scoping: Nodal Scoping. Set of nodes in which elemental contribution forces will be accumulated. Defaults to all nodes.
   :type nodal_scoping: Scoping, optional
   :param elemental_scoping: Elemental Scoping. Set of elements contributing to the force calculation. Defaults to all elements.
   :type elemental_scoping: Scoping, optional
   :param streams: Streams container for RST and PSD files (optional if using data sources). The operator supports both a single RST file and two separate RST files. See data sources pin specifications for details on how to define the streams for both cases.
   :type streams: StreamsContainer, optional
   :param data_sources: Data sources containing RST and PSD files (optional if using a streams container). The operator supports both a single RST file (containing both modal and PSD results) and two separate RST files (one for modal and one for PSD analyses).The data source containing modal results must be defined as an upstream data source.If using a single RST file for PSD and modal analysis, the RST file must be in an upstream data source.If using two separate RST files, only the modal RST must be in an upstream data source.
   :type data_sources: DataSources
   :param spoint: Coordinate field of a point for moment summations. Defaults to (0,0,0).
   :type spoint: Field, optional
   :param abs_rel_key: Key to select the type of response: 0 for relative response (default) or 1 for absolute response.
   :type abs_rel_key: Field, optional
   :param signif: Significance threshold, defaults to 0.0001. Any mode with a significance level above this value will be included in the combination.The significance level is defined as the modal covariance matrix term, divided by the maximum modal covariance matrix term.
   :type signif: float, optional

   :returns: * **force_accumulation** (*FieldsContainer*) -- Returns the sum of forces for the 1-sigma displacement solution on the scoped nodes/elements.
             * **moment_accumulation** (*FieldsContainer*) -- Returns the sum of moments for the 1-sigma displacement solution on the scoped nodes/elements.
             * **forces_on_nodes** (*FieldsContainer*) -- Returns the nodal forces for the 1-sigma displacement solution on the scoped nodes/elements.
             * **moments_on_nodes** (*FieldsContainer*) -- Returns the nodal moments for the 1-sigma displacement solution on the scoped nodes/elements.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.averaging.force_summation_psd()

   >>> # Make input connections
   >>> my_nodal_scoping = dpf.Scoping()
   >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
   >>> my_elemental_scoping = dpf.Scoping()
   >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
   >>> my_streams = dpf.StreamsContainer()
   >>> op.inputs.streams.connect(my_streams)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_spoint = dpf.Field()
   >>> op.inputs.spoint.connect(my_spoint)
   >>> my_abs_rel_key = dpf.Field()
   >>> op.inputs.abs_rel_key.connect(my_abs_rel_key)
   >>> my_signif = float()
   >>> op.inputs.signif.connect(my_signif)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.averaging.force_summation_psd(
   ...     nodal_scoping=my_nodal_scoping,
   ...     elemental_scoping=my_elemental_scoping,
   ...     streams=my_streams,
   ...     data_sources=my_data_sources,
   ...     spoint=my_spoint,
   ...     abs_rel_key=my_abs_rel_key,
   ...     signif=my_signif,
   ... )

   >>> # Get output data
   >>> result_force_accumulation = op.outputs.force_accumulation()
   >>> result_moment_accumulation = op.outputs.moment_accumulation()
   >>> result_forces_on_nodes = op.outputs.forces_on_nodes()
   >>> result_moments_on_nodes = op.outputs.moments_on_nodes()












.. py:currentmodule:: force_summation_psd

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect an input on the operator using a pin number.
          * - :py:attr:`~connect_operator_as_input`
            - Connect an operator as an input on a pin.
          * - :py:attr:`~get_output`
            - Retrieve the output of the operator on the pin number.
          * - :py:attr:`~run`
            - Evaluate this operator.
          * - :py:attr:`~eval`
            - Evaluate this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it
          * - :py:attr:`~progress_bar`
            - Enable or disable progress bar display when requesting the operator's output.
          * - :py:attr:`~config`
            - Copy of the operator's current configuration.
          * - :py:attr:`~id`
            - Retrieve the unique identifier of the operator.
          * - :py:attr:`~specification`
            - Returns the Specification (or documentation) of this Operator.
          * - :py:attr:`~changelog`
            - Return the changelog of this operator.
          * - :py:attr:`~version`
            - Return the current version of the operator.


   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~name`
            - 


   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.
          * - :py:attr:`~operator_specification`
            - Documents an Operator with its description (what the Operator does),its inputs and outputs and some properties.


   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__del__`
            - Delete this instance.
          * - :py:attr:`~__str__`
            - Describe the entity.
          * - :py:attr:`~__add__`
            - Add two fields or two fields containers.
          * - :py:attr:`~__sub__`
            - Subtract two fields or two fields containers.
          * - :py:attr:`~__pow__`
            - Raise each element of a field or a fields container to power 2.
          * - :py:attr:`~__mul__`
            - Multiply two fields or two fields containers.
          * - :py:attr:`~__truediv__`
            - Perform division with another operator or a scalar.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.force_summation_psd import force_summation_psd

Property detail
---------------

.. py:property:: inputs
   :type: InputsForceSummationPsd


   Enables to connect inputs to the operator

   :returns: An instance of InputsForceSummationPsd.
   :rtype: inputs

.. py:property:: outputs
   :type: OutputsForceSummationPsd


   Enables to get outputs of the operator by evaluating it

   :returns: An instance of OutputsForceSummationPsd.
   :rtype: outputs

.. py:property:: progress_bar
   :type: bool


   Enable or disable progress bar display when requesting the operator's output.

   With this property, the user can choose to print a progress bar when
   the operator's output is requested, default is False

.. py:property:: config

   Copy of the operator's current configuration.

   You can modify the copy of the configuration and then use ``operator.config = new_config``
   or instantiate an operator with the new configuration as a parameter.

   For information on an operator's options, see the documentation for that operator.

   :returns: Copy of the operator's current configuration.
   :rtype: :class:`ansys.dpf.core.config.Config`

   .. rubric:: Examples

   Modify the copy of an operator's configuration and set it as current config
   of the operator.

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.add()
   >>> config_add = op.config
   >>> config_add.set_work_by_index_option(True)
   >>> op.config = config_add

.. py:property:: id
   :type: int


   Retrieve the unique identifier of the operator.

   This property returns the unique ID associated with the operator.
   This property is lazily initialized.

   :returns: The unique identifier of the operator.
   :rtype: int

   .. rubric:: Notes

   Property available with server's version starting at 10.0.

.. py:property:: specification

   Returns the Specification (or documentation) of this Operator.

   :rtype: Specification

.. py:property:: changelog
   :type: ansys.dpf.core.changelog.Changelog


   Return the changelog of this operator.

   Requires DPF 11.0 (2026 R1) or above.

   :returns: Changelog of the operator.
   :rtype: changelog

.. py:property:: version
   :type: packaging.version.Version


   Return the current version of the operator.

   Requires DPF 11.0 (2026 R1) or above.



Attribute detail
----------------

.. py:attribute:: name
   :value: None




Method detail
-------------

.. py:method:: default_config(server: ansys.dpf.core.server_types.AnyServerType = None) -> ansys.dpf.core.config.Config
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.

   :returns: A new Config instance equivalent to the default config for this operator.
   :rtype: config


.. py:method:: connect(pin, inpt, pin_out=0)

   Connect an input on the operator using a pin number.

   :param pin: Number of the input pin.
   :type pin: int
   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping,
   :param ScopingsContainer: Operator, os.PathLike Object to connect to.
   :param MeshedRegion: Operator, os.PathLike Object to connect to.
   :param MeshesContainer: Operator, os.PathLike Object to connect to.
   :param DataSources: Operator, os.PathLike Object to connect to.
   :param CyclicSupport: Operator, os.PathLike Object to connect to.
   :param dict: Operator, os.PathLike Object to connect to.
   :param Outputs: Operator, os.PathLike Object to connect to.
   :param pin_out: If the input is an operator, the output pin of the input operator. The default is ``0``.
   :type pin_out: int, optional

   .. rubric:: Examples

   Compute the minimum of displacement by chaining the ``"U"`` and ``"min_max_fc"`` operators.

   >>> from ansys.dpf import core as dpf
   >>> from ansys.dpf.core import examples
   >>> data_src = dpf.DataSources(examples.find_multishells_rst())
   >>> disp_op = dpf.operators.result.displacement()
   >>> disp_op.inputs.data_sources(data_src)
   >>> max_fc_op = dpf.operators.min_max.min_max_fc()
   >>> max_fc_op.inputs.connect(disp_op.outputs)
   >>> max_field = max_fc_op.outputs.field_max()
   >>> max_field.data
   DPFArray([[0.59428386, 0.00201751, 0.0006032 ]]...


.. py:method:: connect_operator_as_input(pin, op)

   Connect an operator as an input on a pin.

   :param pin: Number of the output pin. The default is ``0``.
   :type pin: int
   :param op: Requested type of the output. The default is ``None``.
   :type op: :class:`ansys.dpf.core.dpf_operator.Operator`


.. py:method:: get_output(pin=0, output_type=None)

   Retrieve the output of the operator on the pin number.

   To activate the progress bar for server version higher or equal to 3.0,
   use ``my_op.progress_bar=True``

   :param pin: Number of the output pin. The default is ``0``.
   :type pin: int, optional
   :param output_type: Requested type of the output. The default is ``None``.
   :type output_type: :class:`ansys.dpf.core.common.types`, type,  optional

   :returns: Output of the operator.
   :rtype: type


.. py:method:: __del__()

   Delete this instance.


.. py:method:: __str__()

   Describe the entity.

   :returns: Description of the entity.
   :rtype: str


.. py:method:: run()

   Evaluate this operator.


.. py:method:: eval(pin=None)

   Evaluate this operator.

   :param pin: Number of the output pin. The default is ``None``.
   :type pin: int

   :returns: **output** -- Returns the first output of the operator by default and the output of a
             given pin when specified. Or, it only evaluates the operator without output.
   :rtype: FieldsContainer, Field, MeshedRegion, Scoping

   .. rubric:: Examples

   Use the ``eval`` method.

   >>> from ansys.dpf import core as dpf
   >>> import ansys.dpf.core.operators.math as math
   >>> from ansys.dpf.core import examples
   >>> data_src = dpf.DataSources(examples.find_multishells_rst())
   >>> disp_op = dpf.operators.result.displacement()
   >>> disp_op.inputs.data_sources(data_src)
   >>> normfc = math.norm_fc(disp_op).eval()


.. py:method:: __add__(fields_b)

   Add two fields or two fields containers.

   :returns: **add**
   :rtype: operators.math.add_fc


.. py:method:: __sub__(fields_b)

   Subtract two fields or two fields containers.

   :returns: **minus**
   :rtype: operators.math.minus_fc


.. py:method:: __pow__(value)

   Raise each element of a field or a fields container to power 2.


.. py:method:: __mul__(value)

   Multiply two fields or two fields containers.

   :returns: **mul**
   :rtype: operators.math.generalized_inner_product_fc


.. py:method:: operator_specification(op_name, server=None)
   :staticmethod:


   Documents an Operator with its description (what the Operator does),its inputs and outputs and some properties.


.. py:method:: __truediv__(inpt)

   Perform division with another operator or a scalar.

   This method allows the use of the division operator (`/`) between an
   `Operator` instance and either another `Operator` or a scalar value (float).





