





:class:`InputsMergeFieldsContainers`
====================================


.. py:class:: ansys.dpf.core.operators.utility.merge_fields_containers.InputsMergeFieldsContainers(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   merge_fields_containers operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_containers()
   >>> my_should_merge_named_selections = bool()
   >>> op.inputs.should_merge_named_selections.connect(my_should_merge_named_selections)
   >>> my_sum_merge = bool()
   >>> op.inputs.sum_merge.connect(my_sum_merge)
   >>> my_merged_fields_support = dpf.AbstractFieldSupport()
   >>> op.inputs.merged_fields_support.connect(my_merged_fields_support)
   >>> my_merged_fields_containers_support = dpf.AbstractFieldSupport()
   >>> op.inputs.merged_fields_containers_support.connect(my_merged_fields_containers_support)
   >>> my_fields_containers1 = dpf.FieldsContainer()
   >>> op.inputs.fields_containers1.connect(my_fields_containers1)
   >>> my_fields_containers2 = dpf.FieldsContainer()
   >>> op.inputs.fields_containers2.connect(my_fields_containers2)






.. py:currentmodule:: InputsMergeFieldsContainers

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~should_merge_named_selections`
            - Allows to connect should_merge_named_selections input to the operator.
          * - :py:attr:`~sum_merge`
            - Allows to connect sum_merge input to the operator.
          * - :py:attr:`~merged_fields_support`
            - Allows to connect merged_fields_support input to the operator.
          * - :py:attr:`~merged_fields_containers_support`
            - Allows to connect merged_fields_containers_support input to the operator.
          * - :py:attr:`~fields_containers1`
            - Allows to connect fields_containers1 input to the operator.
          * - :py:attr:`~fields_containers2`
            - Allows to connect fields_containers2 input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.merge_fields_containers import InputsMergeFieldsContainers

Property detail
---------------

.. py:property:: should_merge_named_selections
   :type: ansys.dpf.core.inputs.Input


   Allows to connect should_merge_named_selections input to the operator.

   For some result files (such as RST), the scoping on names selection is duplicated through all the distributed files.If this pin is false, the merging process is skipped. If it is true, this scoping is merged. Default is true.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_containers()
   >>> op.inputs.should_merge_named_selections.connect(my_should_merge_named_selections)
   >>> # or
   >>> op.inputs.should_merge_named_selections(my_should_merge_named_selections)

.. py:property:: sum_merge
   :type: ansys.dpf.core.inputs.Input


   Allows to connect sum_merge input to the operator.

   Default is false. If true, redundant quantities are summed instead of being ignored.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_containers()
   >>> op.inputs.sum_merge.connect(my_sum_merge)
   >>> # or
   >>> op.inputs.sum_merge(my_sum_merge)

.. py:property:: merged_fields_support
   :type: ansys.dpf.core.inputs.Input


   Allows to connect merged_fields_support input to the operator.

   Already merged field support.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_containers()
   >>> op.inputs.merged_fields_support.connect(my_merged_fields_support)
   >>> # or
   >>> op.inputs.merged_fields_support(my_merged_fields_support)

.. py:property:: merged_fields_containers_support
   :type: ansys.dpf.core.inputs.Input


   Allows to connect merged_fields_containers_support input to the operator.

   Already merged fields containers support.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_containers()
   >>> op.inputs.merged_fields_containers_support.connect(my_merged_fields_containers_support)
   >>> # or
   >>> op.inputs.merged_fields_containers_support(my_merged_fields_containers_support)

.. py:property:: fields_containers1
   :type: ansys.dpf.core.inputs.Input


   Allows to connect fields_containers1 input to the operator.

   A vector of fields containers to merge or fields containers from pin 0 to ...

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_containers()
   >>> op.inputs.fields_containers1.connect(my_fields_containers1)
   >>> # or
   >>> op.inputs.fields_containers1(my_fields_containers1)

.. py:property:: fields_containers2
   :type: ansys.dpf.core.inputs.Input


   Allows to connect fields_containers2 input to the operator.

   A vector of fields containers to merge or fields containers from pin 0 to ...

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_containers()
   >>> op.inputs.fields_containers2.connect(my_fields_containers2)
   >>> # or
   >>> op.inputs.fields_containers2(my_fields_containers2)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




