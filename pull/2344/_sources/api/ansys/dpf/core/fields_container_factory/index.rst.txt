





The ``fields_container_factory.py`` module
==========================================

.. py:module:: ansys.dpf.core.fields_container_factory


Summary
-------








.. py:currentmodule:: fields_container_factory
.. tab-set::







    .. tab-item:: Functions

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~over_time_freq_fields_container`
            - Create a fields container with one field by time set.


          * - :py:obj:`~over_time_freq_complex_fields_container`
            - Create a fields container with two fields (real and imaginary) by time set.


          * - :py:obj:`~complex_fields_container`
            - Create a fields container with two fields (real and imaginary) and only one time set.

















Description
-----------

fields_container_factory.

Contains functions to simplify creating a fields container.







Module detail
-------------

.. py:function:: over_time_freq_fields_container(fields, time_freq_unit=None, server=None)

   Create a fields container with one field by time set.

   This method can also set the time frequency support with the correct unit
   if needed.

   :param fields: Dictionary of field entities to add to the fields container.
   :type fields: Dictionary(time_int_key : Field) or list of Field
   :param time_freq_unit: Unit of the time frequency support, which is taken into
                          account if the fields attribute has a dictionary type. The
                          default is ``None``.
   :type time_freq_unit: str, optional
   :param server: Server with the channel connected to the remote or local instance.
                  The default is ``None``, in which case an attempt is made to use the
                  global server.
   :type server: ansys.dpf.core.server, optional

   :returns: **fields_container** -- Fields container containing one field by time step.
   :rtype: FieldsContainer

   .. rubric:: Examples

   Create a fields container from scratch based on time labels.

   >>> from ansys.dpf import core as dpf
   >>> field1 = dpf.Field()
   >>> field2 = dpf.Field()
   >>> from ansys.dpf.core import fields_container_factory
   >>> my_fc = fields_container_factory.over_time_freq_fields_container([ field1, field2 ])


.. py:function:: over_time_freq_complex_fields_container(real_fields, imaginary_fields, time_freq_unit=None, server=None)

   Create a fields container with two fields (real and imaginary) by time set.

   If the inputs for the fields are dictionaries, this method sets the time frequency
   support with the correct unit if needed.

   :param real_fields: Dictionary or list of field entities to add to the fields container.
   :type real_fields: Dictionary(time_int_key : Field) or list of Field
   :param imaginary_fields: Dictionary or list of field entities to add to the fields container.
   :type imaginary_fields: Dictionary(time_int_key : Field) or list of Field
   :param time_freq_unit: Unit of the time frequency support, which is taken into account if
                          the field's attribute has a dictionary type.
   :type time_freq_unit: str , optional
   :param server: Server with the channel connected to the remote or local instance.
                  The default is ``None``, in which case an attempt is made to use the
                  global server.
   :type server: ansys.dpf.core.server, optional

   :returns: **fields_container** -- Fields container containing two fields (real and imaginary) by time step.
   :rtype: FieldsContainer


.. py:function:: complex_fields_container(real_field, imaginary_field, server=None)

   Create a fields container with two fields (real and imaginary) and only one time set.

   :param real_fields: Real :class:`ansys.dpf.core.Field` entity to add to the fields container.
   :type real_fields: Field
   :param imaginary_fields: Imaginary :class:`ansys.dpf.core.Field` entity to add to the fields container.
   :type imaginary_fields: Field
   :param server: Server with the channel connected to the remote or local instance.
                  The default is ``None``, in which case an attempt is made to use the
                  global server.
   :type server: ansys.dpf.core.server, optional

   :returns: **fields_container** -- Fields container with two fields (real and imaginary).
   :rtype: FieldsContainer




