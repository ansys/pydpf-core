





The ``geometry_factory.py`` module
==================================

.. py:module:: ansys.dpf.core.geometry_factory


Summary
-------








.. py:currentmodule:: geometry_factory
.. tab-set::







    .. tab-item:: Functions

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~create_points`
            - Construct points given its coordinates.


          * - :py:obj:`~create_line_from_points`
            - Construct line from two points.


          * - :py:obj:`~create_line_from_vector`
            - Construct line from origin's coordinates and a vector direction.


          * - :py:obj:`~create_plane_from_center_and_normal`
            - Create plane from its center and normal direction.


          * - :py:obj:`~create_plane_from_points`
            - Create plane from three points.


          * - :py:obj:`~create_plane_from_lines`
            - Create plane from two lines.


          * - :py:obj:`~create_plane_from_point_and_line`
            - Create plane from point and line.


          * - :py:obj:`~get_center_from_coords`
            - Get average coordinates from several points.


          * - :py:obj:`~get_normal_direction_from_coords`
            - Get normal direction between three points.


          * - :py:obj:`~get_cross_product`
            - Compute cross product between two vectors.

















Description
-----------

Geometry Factory.

Geometry factory module containing functions to create the different geometries.







Module detail
-------------

.. py:function:: create_points(coordinates, server=None)

   Construct points given its coordinates.

   :param coordinates: 3D coordinates of the points.
   :type coordinates: list, array, Field
   :param server: Server with the channel connected to the remote or local instance. The
                  default is ``None``, in which case an attempt is made to use the global
                  server.
   :type server: :class:`ansys.dpf.core.server`, optional

   .. rubric:: Examples

   >>> from ansys.dpf.core.geometry_factory import create_points
   >>> points = create_points([[1, 1, 1], [2, 1, 1], [0, 2, 0]])
   >>> print(points)
   DPF Points object:
   Number of points: 3
   Coordinates:
     [1. 1. 1.]
     [2. 1. 1.]
     [0. 2. 0.]
   >>> points.plot()


.. py:function:: create_line_from_points(points, n_points=100, server=None)

   Construct line from two points.

   :param points: 3D coordinates of the points.
   :type points: list, array, Field, Points
   :param n_points: Number of points in which the line will be discretized.
   :type n_points: int
   :param server: Server with the channel connected to the remote or local instance. The
                  default is ``None``, in which case an attempt is made to use the global
                  server.
   :type server: :class:`ansys.dpf.core.server`, optional

   .. rubric:: Examples

   >>> from ansys.dpf.core.geometry_factory import create_line_from_points
   >>> line = create_line_from_points([[0, 0, 0], [1, 1, 1]])
   >>> print(line)
   DPF Line object:
   Starting point: [0. 0. 0.]
   Ending point: [1. 1. 1.]
   Line discretized with 100 points
   >>> line.plot()


.. py:function:: create_line_from_vector(ini, end=None, n_points=100, server=None)

   Construct line from origin's coordinates and a vector direction.

   :param ini: List 3D coordinates of the initial and ending points of the line.
   :type ini: list, array, Line
   :param end: 3D coordinates of the ending point of the line (if ``ini`` only contains
               the initial point).
   :type end: list, array, Line, optional
   :param n_points: Number of points in which the line will be discretized.
   :type n_points: int
   :param server: Server with the channel connected to the remote or local instance. The
                  default is ``None``, in which case an attempt is made to use the global
                  server.
   :type server: :class:`ansys.dpf.core.server`, optional

   .. rubric:: Examples

   >>> from ansys.dpf.core.geometry_factory import create_line_from_vector
   >>> line = create_line_from_vector([0, 0, 0], [2, 2, 2])
   >>> print(line)
   DPF Line object:
   Starting point: [0. 0. 0.]
   Ending point: [2. 2. 2.]
   Line discretized with 100 points
   >>> line.plot()


.. py:function:: create_plane_from_center_and_normal(center, normal, width=1, height=1, n_cells_x=20, n_cells_y=20, server=None)

   Create plane from its center and normal direction.

   :param center: 3D coordinates of the center point of the plane.
   :type center: list, array, Points
   :param normal: Normal direction to the plane.
   :type normal: list, array, Line
   :param width: Width of the discretized plane (default = 1).
   :type width: int, float
   :param height: Height of the discretized plane (default = 1).
   :type height: int, float
   :param n_cells_x: Number of cells in the x direction of the plane (default = 20).
   :type n_cells_x: int
   :param n_cells_y: Number of cells in the y direction of the plane (default = 20).
   :type n_cells_y: int
   :param server: Server with the channel connected to the remote or local instance. The
                  default is ``None``, in which case an attempt is made to use the global
                  server.
   :type server: :class:`ansys.dpf.core.server`, optional

   .. rubric:: Examples

   >>> from ansys.dpf.core.geometry_factory import create_plane_from_center_and_normal
   >>> plane = create_plane_from_center_and_normal([1, 1, 1], [0, 0, 1])
   >>> print(plane)
   DPF Plane object:
   Center point: [1, 1, 1]
   Normal direction: [0. 0. 1.]
   Plane discretizaton using:
     Width (x-dir): 1
     Height (y-dir): 1
     Num cells x-dir: 20
     Num cells y-dir: 20
   >>> plane.plot()


.. py:function:: create_plane_from_points(points, n_cells_x=20, n_cells_y=20, server=None)

   Create plane from three points.

   Note that when creating a plane using three points, the plane's width and height
   will be computed such that the three points are the corner points of the plane.

   :param points: 3D coordinates of the three points defining the plane.
   :type points: list, array, Points
   :param n_cells_x: Number of cells in the x direction of the plane (default = 20).
   :type n_cells_x: int
   :param n_cells_y: Number of cells in the y direction of the plane (default = 20).
   :type n_cells_y: int
   :param server: Server with the channel connected to the remote or local instance. The
                  default is ``None``, in which case an attempt is made to use the global
                  server.
   :type server: :class:`ansys.dpf.core.server`, optional

   .. rubric:: Examples

   >>> from ansys.dpf.core.geometry_factory import create_plane_from_points
   >>> plane = create_plane_from_points([[0, 0, 0], [0, 0, 4], [0, 4, 0]])
   >>> print(plane)
   DPF Plane object:
   Center point: [0.0, 1.3333333333333333, 1.3333333333333333]
   Normal direction: [-1.  0.  0.]
   Plane discretizaton using:
     Width (x-dir): 4.0
     Height (y-dir): 4.0
     Num cells x-dir: 20
     Num cells y-dir: 20
   >>> plane.plot()


.. py:function:: create_plane_from_lines(line1, line2, width=1, height=1, n_cells_x=20, n_cells_y=20, server=None)

   Create plane from two lines.

   :param line1: 3D coordinates of the two points defining a line.
   :type line1: list, array, Line
   :param line2: 3D coordinates of the two points defining a line.
   :type line2: list, array, Line
   :param width: Width of the discretized plane (default = 1).
   :type width: int, float
   :param height: Height of the discretized plane (default = 1).
   :type height: int, float
   :param n_cells_x: Number of cells in the x direction of the plane (default = 20).
   :type n_cells_x: int
   :param n_cells_y: Number of cells in the y direction of the plane (default = 20).
   :type n_cells_y: int
   :param server: Server with the channel connected to the remote or local instance. The
                  default is ``None``, in which case an attempt is made to use the global
                  server.
   :type server: :class:`ansys.dpf.core.server`, optional

   .. rubric:: Examples

   >>> from ansys.dpf.core.geometry_factory import create_plane_from_lines
   >>> plane = create_plane_from_lines([[0, 0, 0], [1, 1, 1]], [[0, 1, 0], [2, 1, 0]])
   >>> print(plane)
   DPF Plane object:
   Center point: [-1.5, -0.5, -0.5]
   Normal direction: [ 0.          0.70710678 -0.70710678]
   Plane discretizaton using:
     Width (x-dir): 1
     Height (y-dir): 1
     Num cells x-dir: 20
     Num cells y-dir: 20
   >>> plane.plot()


.. py:function:: create_plane_from_point_and_line(point, line, width=1, height=1, n_cells_x=20, n_cells_y=20, server=None)

   Create plane from point and line.

   Raises a ValueError if the point is on the line.

   :param point: 3D coordinates of the point.
   :type point: list, array, Points
   :param line: 3D coordinates of the two points defining a line.
   :type line: list, array, Line
   :param width: Width of the discretized plane (default = 1).
   :type width: int, float
   :param height: Height of the discretized plane (default = 1).
   :type height: int, float
   :param n_cells_x: Number of cells in the x direction of the plane (default = 20).
   :type n_cells_x: int
   :param n_cells_y: Number of cells in the y direction of the plane (default = 20).
   :type n_cells_y: int
   :param server: Server with the channel connected to the remote or local instance. The
                  default is ``None``, in which case an attempt is made to use the global
                  server.
   :type server: :class:`ansys.dpf.core.server`, optional

   .. rubric:: Examples

   >>> from ansys.dpf.core.geometry_factory import create_plane_from_point_and_line
   >>> plane = create_plane_from_point_and_line([1, 2, 1], [[0, 0, 0], [1, 1, 1]])
   >>> print(plane)
   DPF Plane object:
   Center point: [0.6666666666666666, 1.0, 0.6666666666666666]
   Normal direction: [-0.70710678  0.          0.70710678]
   Plane discretizaton using:
     Width (x-dir): 1
     Height (y-dir): 1
     Num cells x-dir: 20
     Num cells y-dir: 20
   >>> plane.plot()


.. py:function:: get_center_from_coords(coords)

   Get average coordinates from several points.


.. py:function:: get_normal_direction_from_coords(points)

   Get normal direction between three points.


.. py:function:: get_cross_product(vects)

   Compute cross product between two vectors.




