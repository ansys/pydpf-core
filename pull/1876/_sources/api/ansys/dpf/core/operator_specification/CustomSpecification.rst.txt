





:class:`CustomSpecification`
============================


.. py:class:: ansys.dpf.core.operator_specification.CustomSpecification(description=None, server=None)

   Bases: :py:obj:`Specification`


   Create an operator specification with its description.

   Allows to create an Operator Specification with its description (what the Operator does),
   its inputs and outputs and some properties.
   Inherits from Specification (which has only getters) to implement setters.

   Designed to be used in an implementation of
   :class:`CustomOperatorBase <ansys.dpf.core.custom_operator.CustomOperatorBase>` for
   the property ``specification``.

   .. rubric:: Notes

   Is only implemented for usage with type(server)=
   :class:`ansys.dpf.core.server_types.InProcessServer`
   and server version higher than 4.0.

   .. rubric:: Examples

   >>> from ansys.dpf.core.custom_operator import CustomOperatorBase
   >>> from ansys.dpf.core import Field
   >>> from ansys.dpf.core.operator_specification import CustomSpecification,     SpecificationProperties, PinSpecification
   >>> class AddFloatToFieldData(CustomOperatorBase):
   ...     def run(self):
   ...         field = self.get_input(0, Field)
   ...         to_add = self.get_input(1, float)
   ...         data = field.data
   ...         data += to_add
   ...         self.set_output(0, field)
   ...         self.set_succeeded()
   ...
   ...     @property
   ...     def specification(self):
   ...         spec = CustomSpecification()
   ...         spec.description = "Add a custom value to all the data of an input Field"
   ...         spec.inputs = {
   ...             0: PinSpecification("field", [Field], "Field on which float value is added."),
   ...             1: PinSpecification("to_add", [float], "Data to add.") }
   ...         spec.outputs = {
   ...             0: PinSpecification("field", [Field], "Updated field.")}
   ...         spec.properties = SpecificationProperties("custom add to field", "math")
   ...         return spec
   ...
   ...     @property
   ...     def name(self):
   ...         return "custom_add_to_field"




.. py:currentmodule:: CustomSpecification

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~set_changelog`
            - Set the changelog for this operator specification.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~description`
            - Description of the operation applied by the Operator.
          * - :py:attr:`~inputs`
            - Dictionary mapping the input pin numbers to their ``PinSpecification``.
          * - :py:attr:`~outputs`
            - Returns a dictionary mapping the output pin numbers to their ``PinSpecification``.
          * - :py:attr:`~config_specification`
            - Documents the available configuration options supported by the Operator.
          * - :py:attr:`~properties`
            - Return additional properties of the Operator.


   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~operator_name`
            - 



   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - Provide more details in the string representation of the instance.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operator_specification import CustomSpecification

Property detail
---------------

.. py:property:: description
   :type: str


   Description of the operation applied by the Operator.

.. py:property:: inputs
   :type: dict


   Dictionary mapping the input pin numbers to their ``PinSpecification``.

   :returns: **inputs**
   :rtype: dict[int:PinSpecification]

.. py:property:: outputs
   :type: dict


   Returns a dictionary mapping the output pin numbers to their ``PinSpecification``.

   :returns: **outputs**
   :rtype: dict[int:PinSpecification]

.. py:property:: config_specification
   :type: ConfigSpecification


   Documents the available configuration options supported by the Operator.

   :rtype: ConfigSpecification

.. py:property:: properties
   :type: SpecificationProperties


   Return additional properties of the Operator.

   Returns some additional properties of the Operator, like the category, the exposure,
   the scripting and user names and the plugin



Attribute detail
----------------

.. py:attribute:: operator_name
   :value: None




Method detail
-------------

.. py:method:: __str__()

   Provide more details in the string representation of the instance.


.. py:method:: set_changelog(changelog: ansys.dpf.core.changelog.Changelog)

   Set the changelog for this operator specification.

   Requires DPF 11.0 (2026 R1) or above.






