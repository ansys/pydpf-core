





:class:`InputsMakeProducerConsumerForEachIterator`
==================================================


.. py:class:: ansys.dpf.core.operators.utility.make_producer_consumer_for_each_iterator.InputsMakeProducerConsumerForEachIterator(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   make_producer_consumer_for_each_iterator operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> my_try_generate_iterable = bool()
   >>> op.inputs.try_generate_iterable.connect(my_try_generate_iterable)
   >>> my_iterable = dpf.()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> my_operator_to_iterate = dpf.Operator()
   >>> op.inputs.operator_to_iterate.connect(my_operator_to_iterate)
   >>> my_pin_index = int()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> my_valueA = dpf.()
   >>> op.inputs.valueA.connect(my_valueA)
   >>> my_valueB = dpf.()
   >>> op.inputs.valueB.connect(my_valueB)
   >>> my_valueC1 = dpf.()
   >>> op.inputs.valueC1.connect(my_valueC1)
   >>> my_valueC2 = dpf.()
   >>> op.inputs.valueC2.connect(my_valueC2)
   >>> my_producer_op11 = dpf.Operator()
   >>> op.inputs.producer_op11.connect(my_producer_op11)
   >>> my_producer_op12 = dpf.Operator()
   >>> op.inputs.producer_op12.connect(my_producer_op12)
   >>> my_output_pin_of_producer_op11 = int()
   >>> op.inputs.output_pin_of_producer_op11.connect(my_output_pin_of_producer_op11)
   >>> my_output_pin_of_producer_op12 = int()
   >>> op.inputs.output_pin_of_producer_op12.connect(my_output_pin_of_producer_op12)
   >>> my_input_pin_of_consumer_op11 = int()
   >>> op.inputs.input_pin_of_consumer_op11.connect(my_input_pin_of_consumer_op11)
   >>> my_input_pin_of_consumer_op12 = int()
   >>> op.inputs.input_pin_of_consumer_op12.connect(my_input_pin_of_consumer_op12)
   >>> my_consumer_op11 = dpf.Operator()
   >>> op.inputs.consumer_op11.connect(my_consumer_op11)
   >>> my_consumer_op12 = dpf.Operator()
   >>> op.inputs.consumer_op12.connect(my_consumer_op12)






.. py:currentmodule:: InputsMakeProducerConsumerForEachIterator

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~try_generate_iterable`
            - Allows to connect try_generate_iterable input to the operator.
          * - :py:attr:`~iterable`
            - Allows to connect iterable input to the operator.
          * - :py:attr:`~operator_to_iterate`
            - Allows to connect operator_to_iterate input to the operator.
          * - :py:attr:`~pin_index`
            - Allows to connect pin_index input to the operator.
          * - :py:attr:`~valueA`
            - Allows to connect valueA input to the operator.
          * - :py:attr:`~valueB`
            - Allows to connect valueB input to the operator.
          * - :py:attr:`~valueC1`
            - Allows to connect valueC1 input to the operator.
          * - :py:attr:`~valueC2`
            - Allows to connect valueC2 input to the operator.
          * - :py:attr:`~producer_op11`
            - Allows to connect producer_op11 input to the operator.
          * - :py:attr:`~producer_op12`
            - Allows to connect producer_op12 input to the operator.
          * - :py:attr:`~output_pin_of_producer_op11`
            - Allows to connect output_pin_of_producer_op11 input to the operator.
          * - :py:attr:`~output_pin_of_producer_op12`
            - Allows to connect output_pin_of_producer_op12 input to the operator.
          * - :py:attr:`~input_pin_of_consumer_op11`
            - Allows to connect input_pin_of_consumer_op11 input to the operator.
          * - :py:attr:`~input_pin_of_consumer_op12`
            - Allows to connect input_pin_of_consumer_op12 input to the operator.
          * - :py:attr:`~consumer_op11`
            - Allows to connect consumer_op11 input to the operator.
          * - :py:attr:`~consumer_op12`
            - Allows to connect consumer_op12 input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.make_producer_consumer_for_each_iterator import InputsMakeProducerConsumerForEachIterator

Property detail
---------------

.. py:property:: try_generate_iterable
   :type: ansys.dpf.core.inputs.Input


   Allows to connect try_generate_iterable input to the operator.

   if true, already iterable values connected in pin 3 like vectors, Scoping, TimefreqSupport, Containers and DataSources are split to iterate on it (default is true)

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.try_generate_iterable.connect(my_try_generate_iterable)
   >>> # or
   >>> op.inputs.try_generate_iterable(my_try_generate_iterable)

.. py:property:: iterable
   :type: ansys.dpf.core.inputs.Input


   Allows to connect iterable input to the operator.

   Iterable object, generated by make_for_each_range oeprator, that can be combined with the one currently generated.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> # or
   >>> op.inputs.iterable(my_iterable)

.. py:property:: operator_to_iterate
   :type: ansys.dpf.core.inputs.Input


   Allows to connect operator_to_iterate input to the operator.

   Operator that must be reconnected with the range values.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.operator_to_iterate.connect(my_operator_to_iterate)
   >>> # or
   >>> op.inputs.operator_to_iterate(my_operator_to_iterate)

.. py:property:: pin_index
   :type: ansys.dpf.core.inputs.Input


   Allows to connect pin_index input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> # or
   >>> op.inputs.pin_index(my_pin_index)

.. py:property:: valueA
   :type: ansys.dpf.core.inputs.Input


   Allows to connect valueA input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.valueA.connect(my_valueA)
   >>> # or
   >>> op.inputs.valueA(my_valueA)

.. py:property:: valueB
   :type: ansys.dpf.core.inputs.Input


   Allows to connect valueB input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.valueB.connect(my_valueB)
   >>> # or
   >>> op.inputs.valueB(my_valueB)

.. py:property:: valueC1
   :type: ansys.dpf.core.inputs.Input


   Allows to connect valueC1 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.valueC1.connect(my_valueC1)
   >>> # or
   >>> op.inputs.valueC1(my_valueC1)

.. py:property:: valueC2
   :type: ansys.dpf.core.inputs.Input


   Allows to connect valueC2 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.valueC2.connect(my_valueC2)
   >>> # or
   >>> op.inputs.valueC2(my_valueC2)

.. py:property:: producer_op11
   :type: ansys.dpf.core.inputs.Input


   Allows to connect producer_op11 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.producer_op11.connect(my_producer_op11)
   >>> # or
   >>> op.inputs.producer_op11(my_producer_op11)

.. py:property:: producer_op12
   :type: ansys.dpf.core.inputs.Input


   Allows to connect producer_op12 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.producer_op12.connect(my_producer_op12)
   >>> # or
   >>> op.inputs.producer_op12(my_producer_op12)

.. py:property:: output_pin_of_producer_op11
   :type: ansys.dpf.core.inputs.Input


   Allows to connect output_pin_of_producer_op11 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.output_pin_of_producer_op11.connect(my_output_pin_of_producer_op11)
   >>> # or
   >>> op.inputs.output_pin_of_producer_op11(my_output_pin_of_producer_op11)

.. py:property:: output_pin_of_producer_op12
   :type: ansys.dpf.core.inputs.Input


   Allows to connect output_pin_of_producer_op12 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.output_pin_of_producer_op12.connect(my_output_pin_of_producer_op12)
   >>> # or
   >>> op.inputs.output_pin_of_producer_op12(my_output_pin_of_producer_op12)

.. py:property:: input_pin_of_consumer_op11
   :type: ansys.dpf.core.inputs.Input


   Allows to connect input_pin_of_consumer_op11 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.input_pin_of_consumer_op11.connect(my_input_pin_of_consumer_op11)
   >>> # or
   >>> op.inputs.input_pin_of_consumer_op11(my_input_pin_of_consumer_op11)

.. py:property:: input_pin_of_consumer_op12
   :type: ansys.dpf.core.inputs.Input


   Allows to connect input_pin_of_consumer_op12 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.input_pin_of_consumer_op12.connect(my_input_pin_of_consumer_op12)
   >>> # or
   >>> op.inputs.input_pin_of_consumer_op12(my_input_pin_of_consumer_op12)

.. py:property:: consumer_op11
   :type: ansys.dpf.core.inputs.Input


   Allows to connect consumer_op11 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.consumer_op11.connect(my_consumer_op11)
   >>> # or
   >>> op.inputs.consumer_op11(my_consumer_op11)

.. py:property:: consumer_op12
   :type: ansys.dpf.core.inputs.Input


   Allows to connect consumer_op12 input to the operator.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()
   >>> op.inputs.consumer_op12.connect(my_consumer_op12)
   >>> # or
   >>> op.inputs.consumer_op12(my_consumer_op12)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




