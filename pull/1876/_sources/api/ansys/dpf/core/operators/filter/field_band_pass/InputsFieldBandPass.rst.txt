





:class:`InputsFieldBandPass`
============================


.. py:class:: ansys.dpf.core.operators.filter.field_band_pass.InputsFieldBandPass(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   field_band_pass operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.field_band_pass()
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_min_threshold = float()
   >>> op.inputs.min_threshold.connect(my_min_threshold)
   >>> my_max_threshold = float()
   >>> op.inputs.max_threshold.connect(my_max_threshold)






.. py:currentmodule:: InputsFieldBandPass

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field`
            - Allows to connect field input to the operator.
          * - :py:attr:`~min_threshold`
            - Allows to connect min_threshold input to the operator.
          * - :py:attr:`~max_threshold`
            - Allows to connect max_threshold input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.filter.field_band_pass import InputsFieldBandPass

Property detail
---------------

.. py:property:: field
   :type: ansys.dpf.core.inputs.Input


   Allows to connect field input to the operator.

   field or fields container with only one field is expected

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.field_band_pass()
   >>> op.inputs.field.connect(my_field)
   >>> # or
   >>> op.inputs.field(my_field)

.. py:property:: min_threshold
   :type: ansys.dpf.core.inputs.Input


   Allows to connect min_threshold input to the operator.

   A minimum threshold scalar or a field containing one value is expected.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.field_band_pass()
   >>> op.inputs.min_threshold.connect(my_min_threshold)
   >>> # or
   >>> op.inputs.min_threshold(my_min_threshold)

.. py:property:: max_threshold
   :type: ansys.dpf.core.inputs.Input


   Allows to connect max_threshold input to the operator.

   A maximum threshold scalar or a field containing one value is expected.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.field_band_pass()
   >>> op.inputs.max_threshold.connect(my_max_threshold)
   >>> # or
   >>> op.inputs.max_threshold(my_max_threshold)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




