





:class:`InputsMeshToPyvista`
============================


.. py:class:: ansys.dpf.core.operators.mesh.mesh_to_pyvista.InputsMeshToPyvista(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   mesh_to_pyvista operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_to_pyvista()
   >>> my_coordinates = dpf.Field()
   >>> op.inputs.coordinates.connect(my_coordinates)
   >>> my_as_linear = bool()
   >>> op.inputs.as_linear.connect(my_as_linear)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_vtk_updated = bool()
   >>> op.inputs.vtk_updated.connect(my_vtk_updated)
   >>> my_as_poly = bool()
   >>> op.inputs.as_poly.connect(my_as_poly)






.. py:currentmodule:: InputsMeshToPyvista

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~coordinates`
            - Allows to connect coordinates input to the operator.
          * - :py:attr:`~as_linear`
            - Allows to connect as_linear input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~vtk_updated`
            - Allows to connect vtk_updated input to the operator.
          * - :py:attr:`~as_poly`
            - Allows to connect as_poly input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_to_pyvista import InputsMeshToPyvista

Property detail
---------------

.. py:property:: coordinates
   :type: ansys.dpf.core.inputs.Input


   Allows to connect coordinates input to the operator.

   Node coordinates. If not set, the node coordinates of the mesh are employed.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_to_pyvista()
   >>> op.inputs.coordinates.connect(my_coordinates)
   >>> # or
   >>> op.inputs.coordinates(my_coordinates)

.. py:property:: as_linear
   :type: ansys.dpf.core.inputs.Input


   Allows to connect as_linear input to the operator.

   Export a linear version of the mesh (quadratic surface elements do no include midside nodes). If not set, defaults to true.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_to_pyvista()
   >>> op.inputs.as_linear.connect(my_as_linear)
   >>> # or
   >>> op.inputs.as_linear(my_as_linear)

.. py:property:: mesh
   :type: ansys.dpf.core.inputs.Input


   Allows to connect mesh input to the operator.

   mesh to export in pyVista format

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_to_pyvista()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: vtk_updated
   :type: ansys.dpf.core.inputs.Input


   Allows to connect vtk_updated input to the operator.

   True if the VTK version employed by pyVista is > VTK 9. Default true.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_to_pyvista()
   >>> op.inputs.vtk_updated.connect(my_vtk_updated)
   >>> # or
   >>> op.inputs.vtk_updated(my_vtk_updated)

.. py:property:: as_poly
   :type: ansys.dpf.core.inputs.Input


   Allows to connect as_poly input to the operator.

   Export elements as polyhedrons (cell-face-node representation). Default false.

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_to_pyvista()
   >>> op.inputs.as_poly.connect(my_as_poly)
   >>> # or
   >>> op.inputs.as_poly(my_as_poly)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




