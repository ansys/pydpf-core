





:class:`InputsTimeIntegration`
==============================


.. py:class:: ansys.dpf.core.operators.math.time_integration.InputsTimeIntegration(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   time_integration operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_resample_output = bool()
   >>> op.inputs.resample_output.connect(my_resample_output)
   >>> my_absolute_error = float()
   >>> op.inputs.absolute_error.connect(my_absolute_error)
   >>> my_minimum_step_size = float()
   >>> op.inputs.minimum_step_size.connect(my_minimum_step_size)
   >>> my_integration_constant = float()
   >>> op.inputs.integration_constant.connect(my_integration_constant)






.. py:currentmodule:: InputsTimeIntegration

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field`
            - Allows to connect field input to the operator.
          * - :py:attr:`~resample_output`
            - Allows to connect resample_output input to the operator.
          * - :py:attr:`~absolute_error`
            - Allows to connect absolute_error input to the operator.
          * - :py:attr:`~minimum_step_size`
            - Allows to connect minimum_step_size input to the operator.
          * - :py:attr:`~integration_constant`
            - Allows to connect integration_constant input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.time_integration import InputsTimeIntegration

Property detail
---------------

.. py:property:: field
   :type: ansys.dpf.core.inputs.Input


   Allows to connect field input to the operator.

   field

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.field.connect(my_field)
   >>> # or
   >>> op.inputs.field(my_field)

.. py:property:: resample_output
   :type: ansys.dpf.core.inputs.Input


   Allows to connect resample_output input to the operator.

   Resample the output

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.resample_output.connect(my_resample_output)
   >>> # or
   >>> op.inputs.resample_output(my_resample_output)

.. py:property:: absolute_error
   :type: ansys.dpf.core.inputs.Input


   Allows to connect absolute_error input to the operator.

   Absolute error for the resampling

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.absolute_error.connect(my_absolute_error)
   >>> # or
   >>> op.inputs.absolute_error(my_absolute_error)

.. py:property:: minimum_step_size
   :type: ansys.dpf.core.inputs.Input


   Allows to connect minimum_step_size input to the operator.

   Minimum time step size for the resamplig

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.minimum_step_size.connect(my_minimum_step_size)
   >>> # or
   >>> op.inputs.minimum_step_size(my_minimum_step_size)

.. py:property:: integration_constant
   :type: ansys.dpf.core.inputs.Input


   Allows to connect integration_constant input to the operator.

   Constant to be added to the integrated field

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.integration_constant.connect(my_integration_constant)
   >>> # or
   >>> op.inputs.integration_constant(my_integration_constant)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




