





:class:`InputsConvertnumOp`
===========================


.. py:class:: ansys.dpf.core.operators.invariant.convertnum_op.InputsConvertnumOp(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   convertnum_op operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> my_input_ordering = int()
   >>> op.inputs.input_ordering.connect(my_input_ordering)
   >>> my_output_ordering = int()
   >>> op.inputs.output_ordering.connect(my_output_ordering)
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)






.. py:currentmodule:: InputsConvertnumOp

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect any input (an entity or an operator output) to any input pin of this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~input_ordering`
            - Allows to connect input_ordering input to the operator.
          * - :py:attr:`~output_ordering`
            - Allows to connect output_ordering input to the operator.
          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 
          * - :py:attr:`~__call__`
            - 
          * - :py:attr:`~__getitem__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.invariant.convertnum_op import InputsConvertnumOp

Property detail
---------------

.. py:property:: input_ordering
   :type: ansys.dpf.core.inputs.Input


   Allows to connect input_ordering input to the operator.

   Input ordering number

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> op.inputs.input_ordering.connect(my_input_ordering)
   >>> # or
   >>> op.inputs.input_ordering(my_input_ordering)

.. py:property:: output_ordering
   :type: ansys.dpf.core.inputs.Input


   Allows to connect output_ordering input to the operator.

   Output ordering number

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> op.inputs.output_ordering.connect(my_output_ordering)
   >>> # or
   >>> op.inputs.output_ordering(my_output_ordering)

.. py:property:: fields_container
   :type: ansys.dpf.core.inputs.Input


   Allows to connect fields_container input to the operator.

   Expect fields container

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: data_sources
   :type: ansys.dpf.core.inputs.Input


   Allows to connect data_sources input to the operator.

   Data_sources (must contain the full file).

   :returns: An Input instance for this pin.
   :rtype: input

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)




Method detail
-------------

.. py:method:: __str__()

.. py:method:: connect(inpt)

   Connect any input (an entity or an operator output) to any input pin of this operator.

   Searches for the input type corresponding to the output.

   .. deprecated::
       Deprecated in favor of explicit output-to-input connections.

   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping, Enum,
   :param ScopingsContainer: Input of the operator.
   :type ScopingsContainer: E501
   :param MeshedRegion: Input of the operator.
   :type MeshedRegion: E501
   :param MeshesContainer: Input of the operator.
   :type MeshesContainer: E501
   :param DataSources: Input of the operator.
   :type DataSources: E501
   :param CyclicSupport: Input of the operator.
   :type CyclicSupport: E501
   :param Outputs: Input of the operator.
   :type Outputs: E501
   :param os.PathLike  # noqa: Input of the operator.
   :type os.PathLike  # noqa: E501


.. py:method:: __call__(inpt)

.. py:method:: __getitem__(item) -> Input




