





:class:`make_producer_consumer_for_each_iterator`
=================================================


.. py:class:: ansys.dpf.core.operators.utility.make_producer_consumer_for_each_iterator.make_producer_consumer_for_each_iterator(try_generate_iterable=None, iterable=None, operator_to_iterate=None, pin_index=None, valueA=None, valueB=None, valueC1=None, valueC2=None, producer_op11=None, producer_op12=None, output_pin_of_producer_op11=None, output_pin_of_producer_op12=None, input_pin_of_consumer_op11=None, input_pin_of_consumer_op12=None, consumer_op11=None, consumer_op12=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Generates an iterator that can be consumed by the for_each operator.The
   chain of Operators are split into a first part : the producers and a
   second part : the consumers.Asynchronous buffers are indeed to connect
   the producers and the consumers.


   :param try_generate_iterable: if true, already iterable values connected in pin 3 like vectors, Scoping, TimefreqSupport, Containers and DataSources are split to iterate on it (default is true)
   :type try_generate_iterable: bool, optional
   :param iterable: Iterable object, generated by make_for_each_range oeprator, that can be combined with the one currently generated.
   :type iterable: optional
   :param operator_to_iterate: Operator that must be reconnected with the range values.
   :type operator_to_iterate: Operator
   :param pin_index:
   :type pin_index: int
   :param valueA:
   :param valueB:
   :param valueC1:
   :param valueC2:
   :param producer_op11:
   :type producer_op11: Operator
   :param producer_op12:
   :type producer_op12: Operator
   :param output_pin_of_producer_op11:
   :type output_pin_of_producer_op11: int
   :param output_pin_of_producer_op12:
   :type output_pin_of_producer_op12: int
   :param input_pin_of_consumer_op11:
   :type input_pin_of_consumer_op11: int
   :param input_pin_of_consumer_op12:
   :type input_pin_of_consumer_op12: int
   :param consumer_op11:
   :type consumer_op11: Operator
   :param consumer_op12:
   :type consumer_op12: Operator

   :returns: to connect to producer_consumer_for_each
   :rtype: iterator

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator()

   >>> # Make input connections
   >>> my_try_generate_iterable = bool()
   >>> op.inputs.try_generate_iterable.connect(my_try_generate_iterable)
   >>> my_iterable = dpf.()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> my_operator_to_iterate = dpf.Operator()
   >>> op.inputs.operator_to_iterate.connect(my_operator_to_iterate)
   >>> my_pin_index = int()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> my_valueA = dpf.()
   >>> op.inputs.valueA.connect(my_valueA)
   >>> my_valueB = dpf.()
   >>> op.inputs.valueB.connect(my_valueB)
   >>> my_valueC1 = dpf.()
   >>> op.inputs.valueC1.connect(my_valueC1)
   >>> my_valueC2 = dpf.()
   >>> op.inputs.valueC2.connect(my_valueC2)
   >>> my_producer_op11 = dpf.Operator()
   >>> op.inputs.producer_op11.connect(my_producer_op11)
   >>> my_producer_op12 = dpf.Operator()
   >>> op.inputs.producer_op12.connect(my_producer_op12)
   >>> my_output_pin_of_producer_op11 = int()
   >>> op.inputs.output_pin_of_producer_op11.connect(my_output_pin_of_producer_op11)
   >>> my_output_pin_of_producer_op12 = int()
   >>> op.inputs.output_pin_of_producer_op12.connect(my_output_pin_of_producer_op12)
   >>> my_input_pin_of_consumer_op11 = int()
   >>> op.inputs.input_pin_of_consumer_op11.connect(my_input_pin_of_consumer_op11)
   >>> my_input_pin_of_consumer_op12 = int()
   >>> op.inputs.input_pin_of_consumer_op12.connect(my_input_pin_of_consumer_op12)
   >>> my_consumer_op11 = dpf.Operator()
   >>> op.inputs.consumer_op11.connect(my_consumer_op11)
   >>> my_consumer_op12 = dpf.Operator()
   >>> op.inputs.consumer_op12.connect(my_consumer_op12)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.make_producer_consumer_for_each_iterator(
   ...     try_generate_iterable=my_try_generate_iterable,
   ...     iterable=my_iterable,
   ...     operator_to_iterate=my_operator_to_iterate,
   ...     pin_index=my_pin_index,
   ...     valueA=my_valueA,
   ...     valueB=my_valueB,
   ...     valueC1=my_valueC1,
   ...     valueC2=my_valueC2,
   ...     producer_op11=my_producer_op11,
   ...     producer_op12=my_producer_op12,
   ...     output_pin_of_producer_op11=my_output_pin_of_producer_op11,
   ...     output_pin_of_producer_op12=my_output_pin_of_producer_op12,
   ...     input_pin_of_consumer_op11=my_input_pin_of_consumer_op11,
   ...     input_pin_of_consumer_op12=my_input_pin_of_consumer_op12,
   ...     consumer_op11=my_consumer_op11,
   ...     consumer_op12=my_consumer_op12,
   ... )

   >>> # Get output data
   >>> result_iterator = op.outputs.iterator()












.. py:currentmodule:: make_producer_consumer_for_each_iterator

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~connect`
            - Connect an input on the operator using a pin number.
          * - :py:attr:`~connect_operator_as_input`
            - Connect an operator as an input on a pin.
          * - :py:attr:`~get_output`
            - Retrieve the output of the operator on the pin number.
          * - :py:attr:`~run`
            - Evaluate this operator.
          * - :py:attr:`~eval`
            - Evaluate this operator.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it
          * - :py:attr:`~progress_bar`
            - Enable or disable progress bar display when requesting the operator's output.
          * - :py:attr:`~config`
            - Copy of the operator's current configuration.
          * - :py:attr:`~id`
            - Retrieve the unique identifier of the operator.
          * - :py:attr:`~specification`
            - Returns the Specification (or documentation) of this Operator.
          * - :py:attr:`~changelog`
            - Return the changelog of this operator.
          * - :py:attr:`~version`
            - Return the current version of the operator.


   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~name`
            - 


   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.
          * - :py:attr:`~operator_specification`
            - Documents an Operator with its description (what the Operator does),its inputs and outputs and some properties.


   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__del__`
            - Delete this instance.
          * - :py:attr:`~__str__`
            - Describe the entity.
          * - :py:attr:`~__add__`
            - Add two fields or two fields containers.
          * - :py:attr:`~__sub__`
            - Subtract two fields or two fields containers.
          * - :py:attr:`~__pow__`
            - Raise each element of a field or a fields container to power 2.
          * - :py:attr:`~__mul__`
            - Multiply two fields or two fields containers.
          * - :py:attr:`~__truediv__`
            - Perform division with another operator or a scalar.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.make_producer_consumer_for_each_iterator import make_producer_consumer_for_each_iterator

Property detail
---------------

.. py:property:: inputs
   :type: InputsMakeProducerConsumerForEachIterator


   Enables to connect inputs to the operator

   :returns: An instance of InputsMakeProducerConsumerForEachIterator.
   :rtype: inputs

.. py:property:: outputs
   :type: OutputsMakeProducerConsumerForEachIterator


   Enables to get outputs of the operator by evaluating it

   :returns: An instance of OutputsMakeProducerConsumerForEachIterator.
   :rtype: outputs

.. py:property:: progress_bar
   :type: bool


   Enable or disable progress bar display when requesting the operator's output.

   With this property, the user can choose to print a progress bar when
   the operator's output is requested, default is False

.. py:property:: config

   Copy of the operator's current configuration.

   You can modify the copy of the configuration and then use ``operator.config = new_config``
   or instantiate an operator with the new configuration as a parameter.

   For information on an operator's options, see the documentation for that operator.

   :returns: Copy of the operator's current configuration.
   :rtype: :class:`ansys.dpf.core.config.Config`

   .. rubric:: Examples

   Modify the copy of an operator's configuration and set it as current config
   of the operator.

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.add()
   >>> config_add = op.config
   >>> config_add.set_work_by_index_option(True)
   >>> op.config = config_add

.. py:property:: id
   :type: int


   Retrieve the unique identifier of the operator.

   This property returns the unique ID associated with the operator.
   This property is lazily initialized.

   :returns: The unique identifier of the operator.
   :rtype: int

   .. rubric:: Notes

   Property available with server's version starting at 10.0.

.. py:property:: specification

   Returns the Specification (or documentation) of this Operator.

   :rtype: Specification

.. py:property:: changelog
   :type: ansys.dpf.core.changelog.Changelog


   Return the changelog of this operator.

   Requires DPF 11.0 (2026 R1) or above.

   :returns: Changelog of the operator.
   :rtype: changelog

.. py:property:: version
   :type: packaging.version.Version


   Return the current version of the operator.

   Requires DPF 11.0 (2026 R1) or above.



Attribute detail
----------------

.. py:attribute:: name
   :value: None




Method detail
-------------

.. py:method:: default_config(server: ansys.dpf.core.server_types.AnyServerType = None) -> ansys.dpf.core.config.Config
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.

   :returns: A new Config instance equivalent to the default config for this operator.
   :rtype: config


.. py:method:: connect(pin, inpt, pin_out=0)

   Connect an input on the operator using a pin number.

   :param pin: Number of the input pin.
   :type pin: int
   :param inpt:
   :type inpt: str, int, double, bool, list[int], list[float], Field, FieldsContainer, Scoping,
   :param ScopingsContainer: Operator, os.PathLike Object to connect to.
   :param MeshedRegion: Operator, os.PathLike Object to connect to.
   :param MeshesContainer: Operator, os.PathLike Object to connect to.
   :param DataSources: Operator, os.PathLike Object to connect to.
   :param CyclicSupport: Operator, os.PathLike Object to connect to.
   :param dict: Operator, os.PathLike Object to connect to.
   :param Outputs: Operator, os.PathLike Object to connect to.
   :param pin_out: If the input is an operator, the output pin of the input operator. The default is ``0``.
   :type pin_out: int, optional

   .. rubric:: Examples

   Compute the minimum of displacement by chaining the ``"U"`` and ``"min_max_fc"`` operators.

   >>> from ansys.dpf import core as dpf
   >>> from ansys.dpf.core import examples
   >>> data_src = dpf.DataSources(examples.find_multishells_rst())
   >>> disp_op = dpf.operators.result.displacement()
   >>> disp_op.inputs.data_sources(data_src)
   >>> max_fc_op = dpf.operators.min_max.min_max_fc()
   >>> max_fc_op.inputs.connect(disp_op.outputs)
   >>> max_field = max_fc_op.outputs.field_max()
   >>> max_field.data
   DPFArray([[0.59428386, 0.00201751, 0.0006032 ]]...


.. py:method:: connect_operator_as_input(pin, op)

   Connect an operator as an input on a pin.

   :param pin: Number of the output pin. The default is ``0``.
   :type pin: int
   :param op: Requested type of the output. The default is ``None``.
   :type op: :class:`ansys.dpf.core.dpf_operator.Operator`


.. py:method:: get_output(pin=0, output_type=None)

   Retrieve the output of the operator on the pin number.

   To activate the progress bar for server version higher or equal to 3.0,
   use ``my_op.progress_bar=True``

   :param pin: Number of the output pin. The default is ``0``.
   :type pin: int, optional
   :param output_type: Requested type of the output. The default is ``None``.
   :type output_type: :class:`ansys.dpf.core.common.types`, type,  optional

   :returns: Output of the operator.
   :rtype: type


.. py:method:: __del__()

   Delete this instance.


.. py:method:: __str__()

   Describe the entity.

   :returns: Description of the entity.
   :rtype: str


.. py:method:: run()

   Evaluate this operator.


.. py:method:: eval(pin=None)

   Evaluate this operator.

   :param pin: Number of the output pin. The default is ``None``.
   :type pin: int

   :returns: **output** -- Returns the first output of the operator by default and the output of a
             given pin when specified. Or, it only evaluates the operator without output.
   :rtype: FieldsContainer, Field, MeshedRegion, Scoping

   .. rubric:: Examples

   Use the ``eval`` method.

   >>> from ansys.dpf import core as dpf
   >>> import ansys.dpf.core.operators.math as math
   >>> from ansys.dpf.core import examples
   >>> data_src = dpf.DataSources(examples.find_multishells_rst())
   >>> disp_op = dpf.operators.result.displacement()
   >>> disp_op.inputs.data_sources(data_src)
   >>> normfc = math.norm_fc(disp_op).eval()


.. py:method:: __add__(fields_b)

   Add two fields or two fields containers.

   :returns: **add**
   :rtype: operators.math.add_fc


.. py:method:: __sub__(fields_b)

   Subtract two fields or two fields containers.

   :returns: **minus**
   :rtype: operators.math.minus_fc


.. py:method:: __pow__(value)

   Raise each element of a field or a fields container to power 2.


.. py:method:: __mul__(value)

   Multiply two fields or two fields containers.

   :returns: **mul**
   :rtype: operators.math.generalized_inner_product_fc


.. py:method:: operator_specification(op_name, server=None)
   :staticmethod:


   Documents an Operator with its description (what the Operator does),its inputs and outputs and some properties.


.. py:method:: __truediv__(inpt)

   Perform division with another operator or a scalar.

   This method allows the use of the division operator (`/`) between an
   `Operator` instance and either another `Operator` or a scalar value (float).





