# This is work in progress
# Testing workflow in CI is gradually being transferred to tox

[tox]
description = Default tox environment list and core configurations

# To allow running all tests with a single label, will be handy later on
labels =
    test = test-api,test-launcher,test-server,test-local_server,test-multi_server,test-remote_workflow,test-remote_operator,test-workflow,test-service,test-operators

isolated_build_env = build

[testenv]
description = Default configuration for test environments, unless overridden

pass_env =
    PACKAGE_NAME
    MODULE
    ANSYS_DPF_ACCEPT_LA
    ANSYSLMD_LICENSE_FILE

package = external # To allow custom wheel builds

[testenv:build_external]
description = Environment for custom build of package wheels, solves PyDPF custom wheel building requirement

allowlist_externals =
    bash

package_glob = {toxinidir}{/}dist{/}ansys_dpf_core*

commands = 
    # Build the wheel
    bash -c '\
    if [ {on_platform} == "linux" ]; then \
        export platform="manylinux_2_17"; \
    elif [ {on_platform} == "win32" ]; then \
        export platform="win"; \
    else \
        echo "Unknown OS"; \
    fi; \
    echo $platform; \
    python .ci/build_wheel.py -p $platform -w'

[testenv:runtests]
description = Environment to allow executing some commands before test run, and after test run
# In PyDPF, test files are organized prior to testing. Creating this environment helps to achieve the same effect, ensuring
# test files are organized before running tests and reverted after the tests finish running.

skip_install = True

[testenv:test-{api,launcher,server,local_server,multi_server,remote_workflow,remote_operator,workflow,service,operators}]
description = Environment where project testing configuration is defined

setenv =
    # Pytest extra arguments
    COVERAGE = --cov=ansys.dpf.core --cov-report=xml --cov-report=html --log-level=ERROR --cov-append
    RERUNS = -reruns 2 --reruns-delay 1
    DEBUG = -v -s --durations=10 --durations-min=1.0

    api: JUNITXML = --junitxml=tests/junit/test-results.xml
    launcher: JUNITXML = --junitxml=tests/junit/test-results2.xml
    server: JUNITXML = --junitxml=tests/junit/test-results3.xml
    local_server: JUNITXML = --junitxml=tests/junit/test-results4.xml
    multi_server: JUNITXML = --junitxml=tests/junit/test-results5.xml
    remote_workflow: JUNITXML = --junitxml=tests/junit/test-results6.xml
    remote_operator: JUNITXML = --junitxml=tests/junit/test-results7.xml
    workflow: JUNITXML = test_workflow--junitxml=tests/junit/test-results8.xml
    service: JUNITXML = --junitxml=tests/junit/test-results9.xml
    operators: JUNITXML = --junitxml=../tests/junit/test-results12.xml

    # Tests sets
    api: PYTEST_PYTHON_FILES = tests
    launcher: PYTEST_PYTHON_FILES = test_launcher
    server: PYTEST_PYTHON_FILES = test_server
    local_server: PYTEST_PYTHON_FILES = test_local_server
    multi_server: PYTEST_PYTHON_FILES = test_multi_server
    remote_workflow: PYTEST_PYTHON_FILES = test_remote_workflow
    remote_operator: PYTEST_PYTHON_FILES = test_remote_operator
    workflow: PYTEST_PYTHON_FILES = test_workflow
    service: PYTEST_PYTHON_FILES = test_service
    operators: PYTEST_PYTHON_FILES = tests/operators

deps = 
    -r requirements/requirements_test.txt

commands_pre =

commands =
    pytest {env:DEBUG} {env:COVERAGE} {env:RERUNS} {env:JUNITXML} {env:PYTEST_PYTHON_FILES}

commands_post =